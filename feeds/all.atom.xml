<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lisha Li's Blog</title><link href="http://lisafly.github.io/" rel="alternate"></link><link href="http://lisafly.github.io/feeds/all.atom.xml" rel="self"></link><id>http://lisafly.github.io/</id><updated>2013-12-09T00:43:32-08:00</updated><entry><title>Lisa Is Learning</title><link href="http://lisafly.github.io/blog/lisa-is-learning/" rel="alternate"></link><updated>2013-12-09T00:43:32-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-09:blog/lisa-is-learning/</id><summary type="html">&lt;p&gt;learning new staff is hard.....&lt;/p&gt;</summary><category term="L"></category></entry><entry><title>Compress and Decompressing Archives in Linux</title><link href="http://lisafly.github.io/blog/compress-and-decompress-in-linux/" rel="alternate"></link><updated>2013-12-05T22:13:42-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/compress-and-decompress-in-linux/</id><summary type="html">&lt;p&gt;Important tips: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Always test integrity of the compressed file 
before you throw away the original archives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a large zip file generated in Windows, 
it's possible that it cannot be unzipped correctly in Linux.
(unzip bug?)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Universal Way&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# decompress&lt;/span&gt;
&lt;span class="n"&gt;dtrx&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;tar.gz or tgz&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# list the archive contents&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ztvf&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# extract the archive contents to the current directory&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zxvf&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# extract the archive contents to a directory named &amp;quot;exdir&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zxvf&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;exdir&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;.gz&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# decompress&lt;/span&gt;
&lt;span class="n"&gt;gunzip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;archive_name&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;decompressed_file_name&lt;/span&gt;
&lt;span class="cp"&gt;# or&lt;/span&gt;
&lt;span class="n"&gt;gzip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;decompressed_file_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that you have to use the &lt;code&gt;-c&lt;/code&gt; option, 
otherwise, the original compressed file is removed.&lt;/p&gt;
&lt;h2&gt;tar.bz2&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# list the archive contents&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jtvf&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bz2&lt;/span&gt;
&lt;span class="cp"&gt;# extract the archive contents to the current directory&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jxvf&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# extract the archive contents to a directory named &amp;quot;exdir&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jxvf&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;exdir&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;zip&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# list the archive contents&lt;/span&gt;
&lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# test integrity of the archive&lt;/span&gt;
&lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# extract the archive contents into the current directory&lt;/span&gt;
&lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# extract the archive contents into the directory &amp;quot;exdir&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;exdir&lt;/span&gt;
&lt;span class="cp"&gt;# zip all files in current directory&lt;/span&gt;
&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;archive_name&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;rar&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# list the archive contents&lt;/span&gt;
&lt;span class="n"&gt;unrar&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# test integrity of the archive&lt;/span&gt;
&lt;span class="n"&gt;unrar&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# extract the archive with full names&lt;/span&gt;
&lt;span class="n"&gt;unrar&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;7zip&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# list the archive contents&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;za&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# test the archive contents&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;za&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# extract the archive contents with full names&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;za&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;span class="cp"&gt;# extract a file/folder from the archive&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;za&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;archive_name&lt;/span&gt; &lt;span class="n"&gt;path_to_file_to_be_extracted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For &lt;code&gt;rar&lt;/code&gt; and &lt;code&gt;7za&lt;/code&gt;, 
I'm not sure whether there are options for creating a new directory 
to uncompress the archive into. 
However, you can always first create an empty directory, 
move the archive into it and then uncompress it. &lt;/p&gt;</summary><category term="Linux"></category><category term="decompress"></category><category term="compress"></category><category term="archive"></category></entry><entry><title>Useful Tools in Linux</title><link href="http://lisafly.github.io/blog/useful-tools-linux/" rel="alternate"></link><updated>2013-12-05T14:42:24-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/useful-tools-linux/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/linux/linux.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.icewalkers.com/"&gt;IceWalkers&lt;/a&gt; is a great place 
to find software/tools for all kinds of purposes.&lt;/p&gt;
&lt;h2&gt;Server/Desktop Management&lt;/h2&gt;
&lt;h3&gt;Software Installation/Remove/Recommendation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;apt-get&lt;/li&gt;
&lt;li&gt;wajig&lt;/li&gt;
&lt;li&gt;Software Center&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Terminal Tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;terminator&lt;/li&gt;
&lt;li&gt;screen, tmux&lt;/li&gt;
&lt;li&gt;nohup, disown&lt;/li&gt;
&lt;li&gt;nautilus-open-terminal&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Administer&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;webmin, cloudmin, usermin&lt;/li&gt;
&lt;li&gt;id, adduser, gpasswd (recommended for adding/removing groups)&lt;/li&gt;
&lt;li&gt;uptime, top, netstat, ifconfig&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Disk Maintainance&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;fdisk&lt;/li&gt;
&lt;li&gt;df&lt;/li&gt;
&lt;li&gt;badblocks&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Resurce Statistics&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;top&lt;/li&gt;
&lt;li&gt;htop&lt;/li&gt;
&lt;li&gt;dstat&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;fail2ban&lt;/li&gt;
&lt;li&gt;Tor (online anonymity)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Encryption&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;gpg &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Time Synchronization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;ntp (sync-debian)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Task Scheduling&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;at&lt;/li&gt;
&lt;li&gt;watch&lt;/li&gt;
&lt;li&gt;crontab&lt;/li&gt;
&lt;li&gt;inotify (monitoring file system changes and triger events)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Backup&lt;/h2&gt;
&lt;h3&gt;Cloud Backup Tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Storage Made Simple (SME)&lt;/li&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;Ubuntu One&lt;/li&gt;
&lt;li&gt;AeroFS&lt;/li&gt;
&lt;li&gt;SparkleShare&lt;/li&gt;
&lt;li&gt;Google Drive&lt;/li&gt;
&lt;li&gt;bitcasa&lt;/li&gt;
&lt;li&gt;Box&lt;/li&gt;
&lt;li&gt;Copy&lt;/li&gt;
&lt;li&gt;Wuala&lt;/li&gt;
&lt;li&gt;bitTorrent Sync&lt;/li&gt;
&lt;li&gt;owncloud&lt;/li&gt;
&lt;li&gt;spiderOak&lt;/li&gt;
&lt;li&gt;Network Attach Storage (NAS)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Non-cloud Backup Tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;rsync (1-way synchronization)&lt;/li&gt;
&lt;li&gt;rsnapshot (incremental backup)&lt;/li&gt;
&lt;li&gt;duplicity (incremental backup with encryption and compression)&lt;/li&gt;
&lt;li&gt;unison (2-way synchronization)&lt;/li&gt;
&lt;li&gt;Back In Time&lt;/li&gt;
&lt;li&gt;Bacula (comprehensive backup tool)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Network&lt;/h2&gt;
&lt;h3&gt;Remote Tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;OpenSSH, keychain (keyring for OpenSSH)&lt;/li&gt;
&lt;li&gt;vnc&lt;/li&gt;
&lt;li&gt;sshfs&lt;/li&gt;
&lt;li&gt;Remmina&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Network Maintaiance&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;arp-scan&lt;/li&gt;
&lt;li&gt;ping&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Downloading Tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Deluge (BitTorrent)&lt;/li&gt;
&lt;li&gt;transimission (BitTorrent)&lt;/li&gt;
&lt;li&gt;qBitTorrent (BitTorrent)&lt;/li&gt;
&lt;li&gt;rTorrent (command line BitTorrent)&lt;/li&gt;
&lt;li&gt;SubDownloader (download/upload subtitles of movies)&lt;/li&gt;
&lt;li&gt;aria2 (high speed command line download utility)&lt;/li&gt;
&lt;li&gt;wget&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;li&gt;mechanize, Selenium, iMacros&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Anonymous Tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;VPN&lt;/li&gt;
&lt;li&gt;Proxy&lt;/li&gt;
&lt;li&gt;Anomos&lt;/li&gt;
&lt;li&gt;Tor&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Compress and Uncompress&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;tar&lt;/li&gt;
&lt;li&gt;rar, unrar&lt;/li&gt;
&lt;li&gt;7z and 7za&lt;/li&gt;
&lt;li&gt;dtrx&lt;/li&gt;
&lt;li&gt;zip, unzip&lt;/li&gt;
&lt;li&gt;xarchive&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Virtual Machine&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;li&gt;VMWare&lt;/li&gt;
&lt;li&gt;Xen&lt;/li&gt;
&lt;li&gt;KVM (requires hardware support, e.g., Intel VT-x or AMD-V)&lt;/li&gt;
&lt;li&gt;QEMU-KVM (requires hardware support, e.g., Intel VT-x or AMD-V)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Cloud&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;OpenStack&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Database Management System (DBMS)&lt;/h2&gt;
&lt;h3&gt;Relational DBMS&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;MySQL&lt;ul&gt;
&lt;li&gt;MySQL Workbench &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SQLite (embedded database)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Object/Document-oriented DBMS&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;CouchDB&lt;/li&gt;
&lt;li&gt;OrientDB (written in Java)&lt;/li&gt;
&lt;li&gt;UnQLite (embedded database)&lt;/li&gt;
&lt;li&gt;MooDB (embeded database)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Daily Work Tools (Office Tools, etc.)&lt;/h2&gt;
&lt;h3&gt;Web Browser&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Tor (online anonymity)&lt;/li&gt;
&lt;li&gt;Google Chrome&lt;ul&gt;
&lt;li&gt;Vimimum, Vrome (Vim-like key bindings)&lt;/li&gt;
&lt;li&gt;AdBlock Plus (block ads)&lt;/li&gt;
&lt;li&gt;Pocket (save pages to read later)&lt;/li&gt;
&lt;li&gt;Send from Gmail (send the link of current page via Gmail)&lt;/li&gt;
&lt;li&gt;feedly (RSS feed)&lt;/li&gt;
&lt;li&gt;TV Clicker&lt;/li&gt;
&lt;li&gt;PrintFriendly (print web pages to PDF)&lt;/li&gt;
&lt;li&gt;Secure SSH (SSH client in Google)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Firefox/Iceweasel&lt;ul&gt;
&lt;li&gt;Vimperator (Vim-like key bindings, the ultimate plugin for Firefox)&lt;/li&gt;
&lt;li&gt;AdBlock Plus (block ads)&lt;/li&gt;
&lt;li&gt;NoScript (block scripts on website which makes web surfing faster and securer)&lt;/li&gt;
&lt;li&gt;Pocket (save pages to read later)&lt;/li&gt;
&lt;li&gt;Flashblock (block flash vedio on websites which makes web surfing faster and securer)&lt;/li&gt;
&lt;li&gt;Shareaholic (the ultimate way to share webpages with yourself/friends)&lt;/li&gt;
&lt;li&gt;Xmarks (a standalone synchronization plugin for Firefox)&lt;/li&gt;
&lt;li&gt;feedly (RSS feed)&lt;/li&gt;
&lt;li&gt;FireSSH (SSH client for Firefox)&lt;/li&gt;
&lt;li&gt;firebug (the ultimate way to modify/hack websites)&lt;/li&gt;
&lt;li&gt;Greasemonkey/scriptish&lt;/li&gt;
&lt;li&gt;cliget&lt;br /&gt;
Generates curl/wget commands that emulate the request 
as though it's coming from your browser 
allowing you to download protected files directly to a separate machine.&lt;/li&gt;
&lt;li&gt;lget&lt;br /&gt;
Allows you to initiate a direct download of a file given a url.&lt;/li&gt;
&lt;li&gt;DownThemAll&lt;br /&gt;
The first and only download manager/accelerator built inside Firefox!&lt;/li&gt;
&lt;li&gt;PrintFriendly&lt;/li&gt;
&lt;li&gt;Open in Chrome&lt;/li&gt;
&lt;li&gt;IETab&lt;/li&gt;
&lt;li&gt;Live HTTP Headers&lt;br /&gt;
View HTTP headers of a page and while browsing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;w3m (a powerful text-based web browser) &lt;/li&gt;
&lt;li&gt;lynx (another text-based web browser)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;(Automated) Web Browsing&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;wget&lt;/li&gt;
&lt;li&gt;libcurl/Curl/RCurl/... (command line web browsing/scripting)&lt;/li&gt;
&lt;li&gt;mechanize (web browsing/scripting written in python)&lt;/li&gt;
&lt;li&gt;Selenium, iMacros&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Password Management&lt;/h3&gt;
&lt;h4&gt;GUI Password Manager&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;keepassx&lt;/li&gt;
&lt;li&gt;LastPass (for non-critical passwords)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Command-line Password Manager&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;pwman3&lt;/li&gt;
&lt;li&gt;pass&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Data Manipulation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;grep/sed/awk/cut/sort/uniq/comm&lt;/li&gt;
&lt;li&gt;catdoc/xls2csv/catppt&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Text Editor&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Vi/Vim (general purpose text editor)
        - vim-addon-manager
        - clang_complete
        - supertab
        - SuperSnipMate
        - PythonMode
        - pythoncomplete&lt;/li&gt;
&lt;li&gt;Gedit&lt;/li&gt;
&lt;li&gt;Geany&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;IDE&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;KDevelop (C++)&lt;/li&gt;
&lt;li&gt;Eclipse (for Java ,C++, Python, etc.)&lt;/li&gt;
&lt;li&gt;Spyder (Python)&lt;/li&gt;
&lt;li&gt;Eclipse + PyDev (python)&lt;/li&gt;
&lt;li&gt;PyCharm (Python)&lt;/li&gt;
&lt;li&gt;Qt Creater (for Qt development and general purpose C++ IDE)&lt;/li&gt;
&lt;li&gt;Rstudio (for R, Markdown ,C++, Latex, etc.) &lt;/li&gt;
&lt;li&gt;ReText (Markdown, reStructuredText)&lt;/li&gt;
&lt;li&gt;Markable (online Markdown editor)&lt;/li&gt;
&lt;li&gt;JuliaStudio (for Julia)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;MS Office Alternative&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;gnumeric (Excel)&lt;/li&gt;
&lt;li&gt;AbiWord (Word)&lt;/li&gt;
&lt;li&gt;LibreOffice&lt;/li&gt;
&lt;li&gt;Calligra Suite (KDE dependent)&lt;/li&gt;
&lt;li&gt;WPS Office&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Type Setting Tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;texlive&lt;/li&gt;
&lt;li&gt;texstudio&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Dictionary&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;dict&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Email Client&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Thunderbird (called icedove in Debian)&lt;ul&gt;
&lt;li&gt;Adblock Plus&lt;/li&gt;
&lt;li&gt;Provider for Google Calendar&lt;/li&gt;
&lt;li&gt;Muttator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evolution&lt;/li&gt;
&lt;li&gt;Claws Mail&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;PDF Tools&lt;/h3&gt;
&lt;h4&gt;Reader/Viewer&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;evince&lt;/li&gt;
&lt;li&gt;xpdf&lt;/li&gt;
&lt;li&gt;okular&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Manipulation&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;pdftk&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Scientific Reference Managment&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Mendeley&lt;/li&gt;
&lt;li&gt;ReadCube&lt;/li&gt;
&lt;li&gt;Zotero&lt;/li&gt;
&lt;li&gt;JabRef&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;E-book library management&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;calibre &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Symbolic Computing&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Methmatica&lt;/li&gt;
&lt;li&gt;sage&lt;/li&gt;
&lt;li&gt;Maxima&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;To-do list&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Out of Milk&lt;/li&gt;
&lt;li&gt;Remember the Milk&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Notes Taking&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;EverNote&lt;/li&gt;
&lt;li&gt;NixNote (3rd party cross-platform client for EverNote)&lt;/li&gt;
&lt;li&gt;GeekNote (command-line client for EverNote)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Automation Tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;AutoKey&lt;/li&gt;
&lt;li&gt;Selenium&lt;/li&gt;
&lt;li&gt;Macro in Vimperator&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Programming Tools&lt;/h2&gt;
&lt;h3&gt;Compiler&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;GCC&lt;/li&gt;
&lt;li&gt;Clang&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Debugging Tools&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;GDB&lt;/li&gt;
&lt;li&gt;Valgrind&lt;/li&gt;
&lt;li&gt;CUDA-Memcheck&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Version Control&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Media Tools&lt;/h2&gt;
&lt;h3&gt;CD/DVD burning&lt;/h3&gt;
&lt;h4&gt;GUI Tools&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;k3b  &lt;/li&gt;
&lt;li&gt;gnome baker&lt;/li&gt;
&lt;li&gt;brasero&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Commandline Tools&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;xvidenc (shell script to encode DVDs to Xvid)&lt;/li&gt;
&lt;li&gt;isoinfo&lt;/li&gt;
&lt;li&gt;genisoimage (Debian) or mkisofs (other Linux)&lt;/li&gt;
&lt;li&gt;dd or cat&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Video/Audio Player/Editing&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;vlc&lt;/li&gt;
&lt;li&gt;MPlayer, SMPlayer&lt;/li&gt;
&lt;li&gt;Kdenlive&lt;/li&gt;
&lt;li&gt;Lightworks&lt;/li&gt;
&lt;li&gt;ffmpeg&lt;/li&gt;
&lt;li&gt;HandBrake&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Sound Synthesis&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;festival&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Audio Editing&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Ardour&lt;/li&gt;
&lt;li&gt;Audacity&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Scan/OCR&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;VueScan&lt;/li&gt;
&lt;li&gt;tesseract&lt;/li&gt;
&lt;li&gt;gocr&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Image&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;ImageMagic&lt;/li&gt;
&lt;li&gt;GwenView&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Chart&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Dia Diagram Editor&lt;/li&gt;
&lt;li&gt;LibreOffice Draw&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;3-D Modeling&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;blender&lt;/li&gt;
&lt;li&gt;freeCAD&lt;/li&gt;
&lt;li&gt;OpenSCAD&lt;/li&gt;
&lt;li&gt;Google Sketchup&lt;/li&gt;
&lt;li&gt;EQUINOX-3D&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Social Tools&lt;/h2&gt;
&lt;h3&gt;Teleconference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Skype&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Web Hosting&lt;/h2&gt;
&lt;h3&gt;Server Side Scripting Language&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PHP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JSP&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Client Side Scripting Language&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Integrated Package for Web Hosting&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;XAMPP (originaly called LAMPP)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Math in Web Pages&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;MathJax (a succesor to jsMath)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Performance Tools&lt;/h2&gt;
&lt;h2&gt;Boot Performance&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;bootchart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;readahead-fedora&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Runtime Performance&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;preload&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;localepurge&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Other Suggestions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;remove old kernels&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;package cleanup&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Web Tools&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;JustInMind Prototyper&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby On Rails (RoR)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Django&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.JS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ActiveJDBC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;web2py&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SAS Stored Process (Web Application) and SAS Visual Analytics&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Software Host&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GitHub&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no private repository for free account&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bitbucket&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unlimited private repositories for free account&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SourceForge&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;File Converting Tools&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;pandoc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;knitr (an R package)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;convert&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pdflatex &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dos2unix, unix2dos&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Windows Emulation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;VirtualBox, VMWare&lt;/li&gt;
&lt;li&gt;Wine, CrossOver&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Business&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;gnucash&lt;/li&gt;
&lt;li&gt;DocumentBurst&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Websites&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;MileWise&lt;/li&gt;
&lt;li&gt;BTGuard&lt;/li&gt;
&lt;li&gt;http://dedalvs.tumblr.com/post/48998678919/99-life-hacks-to-make-your-life-easier&lt;/li&gt;
&lt;/ol&gt;</summary><category term="shell"></category><category term="remote"></category><category term="PDF"></category><category term="software"></category><category term="tools"></category><category term="statistics"></category><category term="terminal"></category><category term="application"></category><category term="Linux"></category></entry><entry><title>Macro in SAS</title><link href="http://lisafly.github.io/blog/macro-in-sas/" rel="alternate"></link><updated>2013-12-05T00:54:02-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/macro-in-sas/</id><summary type="html">&lt;p&gt;&lt;a href="https://bitbucket.org/dclong/sas_learn/src/8bc48195ca14ba370b395b775090027a75f5ddeb/macro?at=master"&gt;Here&lt;/a&gt; are some examples for SAS macro.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Macros are substituted with their definition before SAS code is run,
which is similar to macros in other programming languages such as C/C++.
The essence of macro is text substitution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Macros in double quotation marks are expanded 
while macros in single quotation marks are not expnaded.
For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;%let m = &amp;quot;Hello, &amp;quot;;&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt; &amp;quot;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;mWorld&lt;/span&gt;!&amp;quot;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;generates &lt;code&gt;Hello, World!&lt;/code&gt; while&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;%let m = &amp;quot;Hello, &amp;quot;;&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;&amp;amp;mWorld!&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;generates &lt;code&gt;&amp;amp;mWorld!&lt;/code&gt;.
This is similar to the behavior of Bash variables in strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be careful when you use maro in SAS especially when you deal with &lt;code&gt;%if&lt;/code&gt;. 
My suggestion is that avoid using &lt;code&gt;%if&lt;/code&gt; if you can. 
You can use &lt;code&gt;%select&lt;/code&gt; instead. 
If you have to use &lt;code&gt;%if&lt;/code&gt;, 
you must be aware that the macro is expanded before it is run,
i.e. there is no branching going on when running the code. 
(Confused, I think %select will have same problem here,
put the probelamtic example here ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use dot (".") to connect a macro variable and usual characters. 
For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;%let i = 1;&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is expanded to &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;set1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;before running.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="dot"></category><category term="SAS"></category><category term="macro"></category><category term="branch"></category><category term="programming"></category></entry><entry><title>General Tips for SAS</title><link href="http://lisafly.github.io/blog/general-tips-for-sas/" rel="alternate"></link><updated>2013-12-05T00:50:56-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/general-tips-for-sas/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are two kinds of modules in SAS.
One is data step, 
the other is procedure.
The data steps read in, create and modify data sets.
The procedures are mainly used to analyze data sets and display results.
However, 
procedures can also manipulate data, 
e.g., the &lt;code&gt;SQL&lt;/code&gt;, &lt;code&gt;SORT&lt;/code&gt;, &lt;code&gt;TRANSPOSE&lt;/code&gt; procedures and so on.
Every procedure in SAS has tons of options that help you accomplish different tasks. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SAS is case-insensitive. 
However, strings/characters are case-sensitive. 
For example, 
&lt;code&gt;"good"&lt;/code&gt; and &lt;code&gt;"GOOD"&lt;/code&gt; are different as characters. 
This matters when your SAS code relies on string comparisons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In SAS, 
a key word can have different means in different context. 
For example, 
a key word can be an option, 
a function or a procedure. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every SAS command must be ended with the semicolon (;).
If you miss a semicolon in SAS,
the following code might turn red in SAS enhanced editor.
And you will wild error messages if you run the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most procedures in SAS take data sets 
(with rows stand for observations and columns stand for variables) as input. 
However, 
some procedures also accept other special types of data (e.g., covariance matrix) as input.
When you want to use a special type of data as input, 
you must explicit specify its type (use &lt;code&gt;type=data_type&lt;/code&gt;).  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you keep variable names in SAS short (best not to exceede 8 characters),
becuase you cannot use names with more than 8 characters in some situations,&lt;br /&gt;
e.g., when you create shortcut using &lt;code&gt;filename&lt;/code&gt; 
(not sure whether this has been changed in new versions of SAS).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;It is very slow to display results in HTML format when there are massive results. 
Instead of using the prin procedure, it might be much faster to just rerun the code. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Linear Models&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;prefer nested than distinct (many) levels,
for example, instead of 1-9, 
prefer 1-3 inside another factor of 3 levels. 
This is a performance concern. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prefer numerical values to character values: 
first, character variables has a default length of 8 which is usually too short
while numerical values are 64 bits. 
Second, the IML procedure accepts matrices only, 
so you cannot mix numeric and character values in the IML procedure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="character"></category><category term="programming"></category><category term="goto"></category><category term="SAS"></category><category term="procedure"></category><category term="data step"></category></entry><entry><title>Manipulate Data in SAS</title><link href="http://lisafly.github.io/blog/sas-data-manipulation/" rel="alternate"></link><updated>2013-12-05T00:49:54-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/sas-data-manipulation/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/sas/sas.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a user library if you want your SAS data sets to persist.
For example,
the following code creates a library named &lt;code&gt;lib&lt;/code&gt; 
which points to the directory &lt;code&gt;~/sas/lib&lt;/code&gt;,
and creates a data set named &lt;code&gt;s1&lt;/code&gt; in this library in the data step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;libname&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/sas/lib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The data set &lt;code&gt;s1&lt;/code&gt; will persist after you quit SAS,
and you can still access it next time you use SAS.
Surely you have to define a library (e.g., &lt;code&gt;lib&lt;/code&gt;) pointing the diretory &lt;code&gt;~/sas/lib&lt;/code&gt; again,
and use the library to reference the data set &lt;code&gt;s1&lt;/code&gt; (e.g., &lt;code&gt;lib.s1&lt;/code&gt;). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can specify several different directories as a single library in SAS. 
For example,
the following code creates a library named &lt;code&gt;mlib&lt;/code&gt; pointing to 
a previously created library &lt;code&gt;lib&lt;/code&gt; and 
directories &lt;code&gt;~/sas/lib2&lt;/code&gt; and &lt;code&gt;~/sas/lib3&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;libname&lt;/span&gt; &lt;span class="nf"&gt;mlib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/sas/lib2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/sas/lib3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is convenient if you previous created SAS data sets in different directories
and want to use all of them without moving these data sets.
Note that when you create data sets in &lt;code&gt;mlib&lt;/code&gt;, 
SAS will use these directories/libraries in the order you specified.
That is SAS will put the data set into &lt;code&gt;lib&lt;/code&gt; if there's space,
otherwise it looks for the next directory with enough space.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use create shortcuts for files in SAS.
For example,
the following code creates a file shortcut &lt;code&gt;f&lt;/code&gt; pointing to a local file,
and use it in data step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/sas/examples/data/fake1.txt&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;infile&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To point a file online, 
you can the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://dclong.github.io/fake1.txt&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;infile&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This allows you to read files online in SAS.
You can also create a a file shortcut point to a directory. 
For example, the following is equivalent code to the first example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/sas/examples/data/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;infile&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fake1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is convenient if you have to read in many files from the same directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a matrix has many columns (variables), 
it is not very convenient to specify variables to read in 
(if you want to read in almost all of them). 
A good alternative is to read in all numeric/character columns into IML procedure i
and then drop unnecessary columns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use proc import or proc access to read data from different
kinds of files and this enable us to read data without specify
variable names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data sets are very important in SAS. Most procedures in SAS are based on data sets. 
It is benefitial to know how to manipulate data sets in SAS. 
There are two popular ways to manipulate data sets in SAS, 
the data step and the SQL procedure. 
The data step is often used to read in data. 
It can also perform some simple data manipulation jobs, 
for example, selecting variables and merge data sets. 
The SQL procedure is an advanced way for 
manipulating data sets. Except these two ways, 
there are also other SAS procedures for manipulating data sets. 
For example, the TRANSPOSE procedure can transpose a data set. 
Almost all SAS procedures can filter observations and variables before using a data set. 
For example, you can use &lt;code&gt;WHERE&lt;/code&gt; statement to filter observations, 
and you can use &lt;code&gt;keep&lt;/code&gt; and &lt;code&gt;drop&lt;/code&gt; after &lt;code&gt;data=data_set_name&lt;/code&gt; 
to select variables in the input and output data set. 
In many SAS procedures, you can use the &lt;code&gt;var&lt;/code&gt; statment to declare the variable(s) to work on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All temporary variables are kept in the data set by default in the data step. 
If not overwritten, 
the next value (value in next observation) of a variable is its value in last observation. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;set&lt;/code&gt; to combine data vertically (by row) and &lt;code&gt;merge&lt;/code&gt; 
to combine data horizontally (by column) in a data step. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;return&lt;/code&gt; statement in the data step tell SAS 
that the reading/manipulation of current observation is done 
and it should continues to read/manipulate the next observation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use variables in the data step without initialize them. 
The default value for numerical variables is 0,
and the default value for character variables is the empty string. 
You can use &lt;code&gt;retain&lt;/code&gt; to set initial values for variables in the data step if you like. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we read in data in data step we can treat "txt" file as "dat" file sometimes, 
which means that we can use file extension "dat".
(actually, I don't file extension matters)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PROC SQL is a very powerful procedure to deal with data set, 
but still data step have some advantages over SQL procedure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we print out a data set, 
the label(s) we have defined in data step will not appear in the output 
unless we define lable(s) again in print procedure. 
However if we use PROC SQL to get a report of the data set, 
the label(s) will appear in the output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You often use statement &lt;code&gt;filename&lt;/code&gt; to make shortcut, 
so that we can read in data easily either from a website or a local disk. 
You often define a shortcut as the whole path of a file. 
Actually, we can just specify part of the path as the shortcut.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometime times problems might occur when we read data into SAS from a file. 
This might be because that there are too many columns in a row. 
You use option &lt;code&gt;lrecl=n&lt;/code&gt; to change the configuration. 
However the biggest value for &lt;code&gt;lrecl&lt;/code&gt; is 32767, 
which means that there cannot be unlimited columns in a row.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statment for extracting a sub set from a data set
can be substituted by &lt;code&gt;where&lt;/code&gt; statement 
given that you only keep the condition in the &lt;code&gt;if&lt;/code&gt; statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lag and dif functions very useful ...
can we combine lag and diff? yes
lag doesn't work on variables that don't exist in the table
so you cannot use lag on new variables
instead, you should use retain
a friend of me asked a good question about lag, opposite, doesn't exists, 
between read in data line by line ....
such a function requires second scan ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scan ... similar to split in other programming languages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;missing value (.) affects functions such as lag and dif,
don't use missing values unless you absolutely need it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it seems that operations on missing values does not necessarily
produce missing values, e.g., min function
this is ridiculous!!!
min &amp;gt;&amp;lt;
max &amp;lt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use proc transpose to transpose data, thin to fat ... great!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is recommended to use x1 x2 and so on as variable names in the data step. 
this makes manipulating data much easier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;termstr, according to files created on different operating systems ...
use different termstr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;goto&lt;/code&gt; (or &lt;code&gt;go to&lt;/code&gt;) is supported in SAS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use "||" or "!!" to concatenate characters horizontally and "//" 
to concatenate matrices vertically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use multiple input in a data step allows to read a single record from multiple lines
and double trailing allows you to read in data in flexible way&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="programming"></category><category term="SAS"></category><category term="SQL"></category><category term="data"></category></entry><entry><title>Working Remotely in Linux</title><link href="http://lisafly.github.io/blog/work-remotely-linux/" rel="alternate"></link><updated>2013-12-05T00:39:36-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/work-remotely-linux/</id><summary type="html">&lt;h2&gt;From Linux to Linux:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Command Line Mode: "ssh"&lt;ul&gt;
&lt;li&gt;Using X forwarding, you can also run GUI applications on the server.
This is not recommended unless it's short quick work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote File System: "sshfs"&lt;ul&gt;
&lt;li&gt;You'd better use a mount point which you have full access to,
otherwise, you have use the root user to access the mount point. &lt;/li&gt;
&lt;li&gt;You'd better add yourself to the &lt;code&gt;fuse&lt;/code&gt; (which is required by sshfs) group.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote Desktop&lt;ul&gt;
&lt;li&gt;VNC (e.g., vino or tight vnc, remmina)&lt;/li&gt;
&lt;li&gt;NX (NoMachine)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;From Linux to Windows:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Remote Desktop:&lt;ul&gt;
&lt;li&gt;rdesktop&lt;/li&gt;
&lt;li&gt;Remmina&lt;/li&gt;
&lt;li&gt;NoMachine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote File System: "smb"&lt;ol&gt;
&lt;li&gt;Open nautilus file manager and press "CTRL + L" to show the address field.&lt;/li&gt;
&lt;li&gt;Type in smb://host_name/folder in the address field and press enter.&lt;/li&gt;
&lt;li&gt;Type in your user name and password in the prompt to login. &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;From Windows to Linux:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Comand Line Mode: "ssh" (e.g., Security Shell)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="software"></category><category term="remote"></category><category term="Linux"></category></entry><entry><title>R for Internet/Web Applications</title><link href="http://lisafly.github.io/blog/r-for-internet-web-applications/" rel="alternate"></link><updated>2013-12-05T00:32:35-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/r-for-internet-web-applications/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;h2&gt;Sending/Receiving Emails&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are many ways to send email in R. 
First, you can use &lt;code&gt;sendmail{sendmailR}&lt;/code&gt;. 
The following code is a simple test email.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;firedragon.du@gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dclong@iastate.edu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sending Email from R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;It works&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smtpServer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mailhub.iastate.edu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this way, you can attach objects in R directly to the email, 
but it does not support email authentication, 
and it does not support multiple recipients very well. 
Second, you can call code written in other languages in R to send emails. 
For example, 
you can use &lt;code&gt;rJava&lt;/code&gt; to call Java code to send emails in R. 
I have written an R package &lt;a href="https://github.com/dclong/dclong.spt"&gt;dclong.jmail&lt;/a&gt; 
based on Java Mail API
which can be used to send/receive emails. 
It supports email authentication. 
Another way is to use &lt;code&gt;system&lt;/code&gt; or &lt;code&gt;shell&lt;/code&gt; 
to call executable applications to send emails. 
There are many such email applications in Linux system. 
For Windows system, 
the application &lt;code&gt;sendEmail&lt;/code&gt; written by Brandon zehm is good one, 
which support Gmail, multiple recipients and multiple attachments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Automated Web Browsing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;RCurl/httr/XML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;download.file&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="email"></category><category term="R"></category><category term="Web"></category><category term="programming"></category><category term="network"></category></entry><entry><title>Environments in R</title><link href="http://lisafly.github.io/blog/environments-in-r/" rel="alternate"></link><updated>2013-12-05T00:31:05-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/environments-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The option &lt;code&gt;pos=1&lt;/code&gt; of the function &lt;code&gt;assign&lt;/code&gt; refers to the global environment, 
i.e., the user's workspace. 
Containers in R are 1-based, 
so it is easy to understand (and remember) that R use 1 to stand for the global enviroment (user's workspace).
Notice that &lt;code&gt;..GlobalEnv&lt;/code&gt; is a variable standing for the global environment and &lt;code&gt;globalenv()&lt;/code&gt; returns the global environment,
&lt;code&gt;pos=1&lt;/code&gt; is equivalent to say &lt;code&gt;pos=.GlobalEnv&lt;/code&gt; or &lt;code&gt;pos=globalenv()&lt;/code&gt;.
If you want to create a global variable in a function,
you can use the function &lt;code&gt;assign&lt;/code&gt; by specifying &lt;code&gt;pos=1&lt;/code&gt; (or &lt;code&gt;pos=.GlobalEnv&lt;/code&gt; or &lt;code&gt;pos=globalenv&lt;/code&gt;).
Another easier but less powerful way is to the &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; or &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; to assign/create global variables. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;new.env&lt;/code&gt; creates a new environment. 
If you want to source in some code 
but would rather let the code in a new environment (so that the environment sourcing the code is not contaminated),
you can use &lt;code&gt;source(path_to_file, local=new.env())&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;emptyenv&lt;/code&gt; returns an immutable empty environment. 
The empty environment is not used to evaluate expressions or run code but rather to check whether nested environments end.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="programming"></category></entry><entry><title>General Tips for R</title><link href="http://lisafly.github.io/blog/general-tips-for-r/" rel="alternate"></link><updated>2013-12-05T00:29:52-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/general-tips-for-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Many R functions have lots of arguments which allows you get a full
control of their behaviors, so before you ask whether there is any R
function which have a little different behavior from a R function
you know, you'd better first check the arguments of the function you
know.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many R functions are generic functions (e.g. &lt;code&gt;plot&lt;/code&gt;, &lt;code&gt;residuals&lt;/code&gt;, &lt;code&gt;coef&lt;/code&gt;, etc), 
which means that they can be
applied to different types of objects, and the behavior varies
according to the type of objects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tips"></category><category term="R"></category><category term="generic"></category><category term="programming"></category><category term="argument"></category></entry><entry><title>Graphics in R</title><link href="http://lisafly.github.io/blog/graphics-in-r/" rel="alternate"></link><updated>2013-12-05T00:28:59-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/graphics-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;gets the dimension (i.e. width and height) of the graphics device.
If no graphics device has been open, it opens a new one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To force a plot to have a fixed aspect ratio, you can use option
&lt;code&gt;asp=aspRatio&lt;/code&gt; in plotting function. For example, &lt;code&gt;plot(x,y,asp=1)&lt;/code&gt;
makes a scatter plot with aspect ratio 1. This is helpful when you
don't want a plot to get stretched.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;title&lt;/code&gt; adds titles and axes labels for an existing plot,
so if you forget to specify a title or axes labels when you use
produce a plot, you can use &lt;code&gt;title&lt;/code&gt; to add them into the plot
instead of producing a new plot (Sometimes it is very time-consuming to produce a plot, e.g. when
you analyze gene data.). &lt;code&gt;legend&lt;/code&gt; adds legends for an
existing plot. For example, see the code which produces
The following image (need to add title).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;](.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;pdf&lt;/code&gt; and &lt;code&gt;postscript&lt;/code&gt; starts the graphics device driver
for producing &lt;code&gt;pdf&lt;/code&gt; and &lt;code&gt;ps&lt;/code&gt; graphics respectively, which are
vectorgraph. Similarly, &lt;code&gt;jpeg&lt;/code&gt;, &lt;code&gt;bmp&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt; and &lt;code&gt;tiff&lt;/code&gt; start
graphics device driver for producing &lt;code&gt;jpeg&lt;/code&gt;, &lt;code&gt;bmp&lt;/code&gt;, &lt;code&gt;png&lt;/code&gt; and &lt;code&gt;tiff&lt;/code&gt;
graphics, which are bitmaps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To divide a window device to server sub window devices and make
plots on them, there are server way. First, you can use &lt;code&gt;par&lt;/code&gt;,
e.g. to divide a window device to $2\times3$ sub window devices, you
can use &lt;code&gt;par(mfrow=c(2,3))&lt;/code&gt; or  &lt;code&gt;par(mfcol=c(2,3))&lt;/code&gt;. The
difference between them is the first one display plots by rows while
the second one display plots by columns. Second, you can use
&lt;code&gt;layout{graphics}&lt;/code&gt;, e.g. to divide a window device to two parts
vertically and then further divide the bottom part into two
horizontal parts, you can use &lt;code&gt;layout(matrix(c(1,2,1,3)))&lt;/code&gt;. Same
values in the matrix stand for the same area, and they also stand
for the order they get used among all the sub window devices. Third,
you can use &lt;code&gt;split.screen&lt;/code&gt;, e.g. to achieve what we did using
&lt;code&gt;layout&lt;/code&gt;, we can use the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To make a plot on sub window device generated by &lt;code&gt;split.screen&lt;/code&gt;, you
must first active it. If you use functions in &lt;code&gt;lattice&lt;/code&gt;, you will
find that these basically ignore all these 3 functions. &lt;code&gt;lattice&lt;/code&gt;
has its own way to split window devices. To do this, you have first
save plots made by functions in &lt;code&gt;lattice&lt;/code&gt;, and then print these plot
at appropriate locations using the generic &lt;code&gt;print&lt;/code&gt;. For example, the
following code make two plots using functions in &lt;code&gt;lattice&lt;/code&gt;, and then
using &lt;code&gt;print&lt;/code&gt; to display them vertically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;px1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;histogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;px2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bwplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="n"&gt;vertically&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;px1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;px2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first two values for øption&lt;code&gt;position&lt;/code&gt; stand for x and y
coordinates of the bottom-left corner of the panel to display the
corresponding plot; the last two values, the top-right corner.
Generally speaking, &lt;code&gt;par&lt;/code&gt; is most easy one to use, but it can only
divide a window device into rectangular sub window devices, and in
order for plots to show up at the right place you must make plots in
the right order;  &lt;code&gt;layout&lt;/code&gt; is also easy to use. You can divide a
window device into irregular shapes, but still you have to make
plots in the right order to make them to show up at the right place;
&lt;code&gt;split.screen&lt;/code&gt; is not as convenient as &lt;code&gt;par&lt;/code&gt; and  &lt;code&gt;layout&lt;/code&gt;, but
you can divide a window device into irregular sub window devices and
make plot on any sub window device (by calling &lt;code&gt;screen&lt;/code&gt; first)
whenever you want; perhaps it most inconvenient to use &lt;code&gt;lattice&lt;/code&gt; to
achieve the same purpose. You must use functions in &lt;code&gt;lattice&lt;/code&gt;, and
you have to calculate positions for each sub window device and pass
it to &lt;code&gt;print&lt;/code&gt;. But &lt;code&gt;lattice&lt;/code&gt; has some unique plotting functions and
it uses more advanced technologies, you can reuse saved plots
instead of replotting them every time. This is similar to how
&lt;code&gt;Mathematica&lt;/code&gt; handles graphics. My suggestion is that you never use
&lt;code&gt;lattice&lt;/code&gt; for this kind of job unless necessary.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;plot&lt;/code&gt; is a generic function (Actually many functions in R are generic functions. See &lt;a href=""&gt;this post&lt;/a&gt; for more information.), which be applied to many
different types of objects in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;boxplot&lt;/code&gt; can make plot of different data sets without
using function par().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Into order to recover to the default graph setting, we can save the
information of &lt;code&gt;par&lt;/code&gt; first and reuse it whenever we want to go back
to the default settings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;points&lt;/code&gt; add points to a graph; &lt;code&gt;segments&lt;/code&gt; add segments to a graph.
Though these job can be done by &lt;code&gt;plot&lt;/code&gt;, these low level functions
are still useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use Greek symbol when we plot graph in R, e.g. plot(1,
xlab=expression(alpha+beta)).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use math expression when plot a graph. To do this, we just
need specify the corresponding label as &lt;code&gt;expression(expr)&lt;/code&gt;, where
"expr" is an appropriate expression in R. For example, if we want to
use Greek symbol $\alpha$, we can specify "xlab=expression(alpha)".
Whenver we forget how to write mathematica expressions, we can type
in command "demo(plotmath)" which will display corresponding
expression in R for all kinds of math expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sna::gplot.arrow&lt;/code&gt; makes neat arrows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;plot(...,type="h") gives us needle plot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chull&lt;/code&gt; computes convex hull of a given set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dev.copy2pdf&lt;/code&gt; copies the graphics content on the current graphics
device to a pdf file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="par"></category><category term="R"></category><category term="plot"></category><category term="graphics"></category><category term="programming"></category></entry><entry><title>Skills for R</title><link href="http://lisafly.github.io/blog/skills-for-r/" rel="alternate"></link><updated>2013-12-05T00:28:24-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/skills-for-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike C/C++, Java and SAS, you do not have semicolon to indicate the
end of a command, but you can do this if you like. It is helpful if
you have to write multiple commands on a line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R support command/terminal mode, and if you open R in a
command/terminal window, the working directory of R will be the
working directory of the command/terminal window. For some GUI for R
, you can only use a single application, e.g. you cannot open two
Rstudio at the same time. But sometimes, you might want to open more
than one R applications in different directories. To do this, you
can use the command/terminal mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you do not know how use a function, you can always type a
question mark before the function name to open the help document of
the function. For example, if don't know how to use &lt;code&gt;sum&lt;/code&gt;, you can
type in &lt;code&gt;?sum&lt;/code&gt; in R console to open the help document for &lt;code&gt;sum&lt;/code&gt;.
Sometimes, you might just want see what arguments a function have,
instead of opening the help document. In this case, you can use
&lt;code&gt;args&lt;/code&gt; which display the declaration of a function. It' quite often
that you want to use a function in R, but you cannot remember the
name of the function. If you still know part of the function name,
you can type in &lt;code&gt;??partial_name&lt;/code&gt; in R console, then R will
try to match it with all possible functions using regular
expression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes, you might want to hide an object 
(i.e. do not display the object when using the command &lt;code&gt;ls()&lt;/code&gt;) in the R workspace, 
for example if you write a package
which relies on some global variables or some functions that should
never by renamed. To do this, you can give a name to the object
starting with a dot. For example there're some functions such as
&lt;code&gt;.jinit&lt;/code&gt;, &lt;code&gt;.jcall&lt;/code&gt; and so on in R &lt;code&gt;rJava&lt;/code&gt;, but you cannot see them
by use &lt;code&gt;ls()&lt;/code&gt;. If you do want to display all objects including these
that start with a dot in R workspace, you can use
&lt;code&gt;ls(all.names=TRUE)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, numerical variables in R are double values even you even
they do not have decimal digits. To use data type of integer, you can
put an &lt;code&gt;L&lt;/code&gt; after integers. For example to assign a integer 5 to a
variable &lt;code&gt;aInt&lt;/code&gt;, you can use &lt;code&gt;aInt = 5L&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;comment&lt;/code&gt; can be use to set or query &lt;code&gt;comment&lt;/code&gt; of an object in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;with&lt;/code&gt; allows you evaluate an expression inside a data environment
(usually a data frame), so you do not have to attach the data into R
workspace (Attaching data into R workspace might mark other variables with
the same names, so it is encouraged to do so.). within transform&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;class&lt;/code&gt; gets/sets the class of a R object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;attr&lt;/code&gt; can get and set attributes of objects, e.g.
it can list names of objects. The difference between them is that
&lt;code&gt;attributes&lt;/code&gt; can set the attributes of a null object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt; shows the structure of an arbitrary R object. For example, if
you have a large data frame &lt;code&gt;df&lt;/code&gt; you can use &lt;code&gt;str(df)&lt;/code&gt; to show its
structure, so that you know what columes (type of data and names) it
has.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;ESC&lt;/code&gt; hot key halts current unfinished command, which is helpful
when you make typo in a command (especially when you miss a
single/double quotation mark).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Rprof&lt;/code&gt; enables profiling an R is execution, which helps you write
efficient R code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to run some code without writing any intermediate result
into the workspace, you can put the code into &lt;code&gt;local&lt;/code&gt; surrounded by
curly braces. However, you must use &lt;code&gt;-\&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;-&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt; in
the code. Note that you can use semicolon to separate different
commands.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exists&lt;/code&gt; checks whether a R object with a given name has been
defined. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aNon_Exist_Object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;missing&lt;/code&gt; checks whether an argument of a function has been passed a
value or not. It can only be used inside a function to help check
availability of arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;shell("shutdown/s")&lt;/code&gt; (in Windows) to shutdown the
computer after R has finished computing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When write a user-defined function, you'd better return a
comprehensive result which contains not only the final outcomes but
also other information such as parameters used in the computation.
This gives you the ability to work on a project in the long term,
especially when the names of variables do not give you much
information about parameters used in computation (typical they do not
because otherwise they will be long).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="skills"></category><category term="programming"></category></entry><entry><title>String and Characters in R</title><link href="http://lisafly.github.io/blog/string-and-characters-in-r/" rel="alternate"></link><updated>2013-12-05T00:27:18-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/string-and-characters-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;By default, 
characters read into R by &lt;code&gt;read.table&lt;/code&gt; (and alike functions) is converted to factors. 
While it makes modeling convenient in R, 
it's usually inconvenient if you have to manipulate the data. 
The problem is nicely solved with the option &lt;code&gt;stringasis=T&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;iconv&lt;/code&gt; is very useful for transforming codings 
between different encoding schemes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;format&lt;/code&gt; is very useful to display numbers 
and characters in the same length.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;cat&lt;/code&gt; can be used to display numbers 
and characters without quotation marks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;chartr&lt;/code&gt; can be used to substitute old characters to new characters. 
If new character is null then this functions can be used
to drop characters from the original string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;nchar&lt;/code&gt; can be used to get the length of characters 
while function &lt;code&gt;length&lt;/code&gt; can only be used to get the length of vectors or matrixs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For special characters, we can put a backslash before it to get it,
or I think we can put it into a pair of single quotation mark.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R function &lt;code&gt;paste&lt;/code&gt; can concatenate several vectors 
and it can also concatenate the elements in a vector. 
It's very similar to function &lt;code&gt;rep&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using function &lt;code&gt;expression&lt;/code&gt; and &lt;code&gt;eval&lt;/code&gt; we can achieve symbolic computation. 
In addition, function &lt;code&gt;parse&lt;/code&gt; might be useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;match.arg&lt;/code&gt; can be used to partially match strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes we use &lt;code&gt;\\1&lt;/code&gt; to stand for the string in the first parenthesis in &lt;code&gt;patter&lt;/code&gt; argument. 
When we use &lt;code&gt;\\11&lt;/code&gt; it the string in the first parenthesis in &lt;code&gt;pattern&lt;/code&gt; argument followed by &lt;code&gt;1&lt;/code&gt;, 
even if there're at least &lt;code&gt;11&lt;/code&gt; parenthesis in the pattern argument. 
This means that while regular expression is convenient to work with strings, 
it's easy to make mistakes. 
It's a two-sided sword.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To replace a substring of a string with a new one, 
you can use &lt;code&gt;sub&lt;/code&gt; or &lt;code&gt;gsub&lt;/code&gt;. 
The difference between &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;gsub&lt;/code&gt; is that &lt;code&gt;sub&lt;/code&gt; only replaces the first occurrence 
while &lt;code&gt;gsub&lt;/code&gt; replaces all occurrences. 
However, sometimes, 
you might want to replace substring by index 
which gives more accurate control of substituting. 
For example, 
when there are multiple  occurrences of a substring 
and you only want to replace the 2nd one,
then neither &lt;code&gt;sub&lt;/code&gt; nor &lt;code&gt;gsub&lt;/code&gt; works well here. 
&lt;code&gt;substr&lt;/code&gt; and &lt;code&gt;substring&lt;/code&gt; are good alternatives in this situation. 
These two functions work similarly to vectors and matrices, 
which means that you can use these two functions to both extract and replace substrings. 
If you want to replace an element of a vector/matrix to a new one, 
you can just assign a new value to the element. 
Similarly to replace substring of an object string using &lt;code&gt;substr&lt;/code&gt; or &lt;code&gt;substring&lt;/code&gt;, 
you can simply assign a new value for the substring. 
However, &lt;code&gt;substr&lt;/code&gt; and &lt;code&gt;substring&lt;/code&gt; can only replace a substring with the same length, 
if the argument &lt;code&gt;replacement&lt;/code&gt; is not long enough, 
then only partial of the substring specified will be replaced; 
if the argument &lt;code&gt;replacement&lt;/code&gt; is too long, 
then it will be truncated to have the same length with the substring to be replaced. 
If you want to replace a substring specified by index with any new string, 
you can use &lt;code&gt;dclong.String::strReplace&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;strwidth&lt;/code&gt; calculates the width of a string when displayed on a graphics device.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;strsplit&lt;/code&gt; splits a string according to specified delimiters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="programming"></category><category term="character"></category><category term="string"></category></entry><entry><title>Time and Date in R</title><link href="http://lisafly.github.io/blog/time-and-date-in-r/" rel="alternate"></link><updated>2013-12-05T00:26:18-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/time-and-date-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;as.Date&lt;/code&gt; and &lt;code&gt;strptime&lt;/code&gt; convert string to dates. 
For these functions to work right, 
you must use the right format.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="date"></category><category term="time"></category><category term="programming"></category></entry><entry><title>Tips for Programming in R</title><link href="http://lisafly.github.io/blog/tips-for-programming-in-r/" rel="alternate"></link><updated>2013-12-05T00:25:50-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/tips-for-programming-in-r/</id><summary type="html">&lt;h2&gt;Debugging&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can the debug a function using the function &lt;code&gt;debug&lt;/code&gt;. 
For example, 
you can use the following command to debug a function named &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;During debugging,
you can type &lt;code&gt;Q&lt;/code&gt; to quit the process.
For this reason, 
you'd better not use &lt;code&gt;Q&lt;/code&gt; as a variable name in user-defined functions.
The the function &lt;code&gt;f&lt;/code&gt; is no longer debugged once you source in its code again.
You can also undebug it manually be the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;undebug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Other&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;R uses a copy-on-write technic which is similar to what matlab does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;fix&lt;/code&gt; can be used to fix object in R, 
which can be very convenient.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes, 
you want to check the source code of a function in R. 
To do this, 
you can just type in the name of the function in R. 
However, 
for functions which call interfaces written by C/C++ or Fortran this does not work. 
You must download the source code of the corresponding R package, 
and check the code there. 
However, 
for functions written in S3 method, 
you can use function &lt;code&gt;getS3method&lt;/code&gt; to check the source code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getAnywhere&lt;/code&gt; can show you code of functions that are written s3 or
s4 method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S3method object uses &lt;code&gt;$&lt;/code&gt; while s4method object uses &lt;code&gt;@&lt;/code&gt; to extract
elements. You can use &lt;code&gt;str&lt;/code&gt; to see the structure of both of the two
types of objects. And which symbol to use will be indicated in the
output.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="debug"></category><category term="programming"></category></entry><entry><title>Traps in R</title><link href="http://lisafly.github.io/blog/traps-in-r/" rel="alternate"></link><updated>2013-12-05T00:25:17-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/traps-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A really tricky problem about is global and local variables. You can
use any global variable in a user-defined function, which is true at
least in R with version 2.13 or older. For example if you have
defined a global variable &lt;code&gt;a&lt;/code&gt;, you can use variable &lt;code&gt;a&lt;/code&gt; directly in
user-defined functions. However, you cannot use &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;-&lt;/code&gt; or
&lt;code&gt;-&amp;gt;&lt;/code&gt; to mutate global variables. Whenever you use these three
operators, R thinks that you're either creating a new variable (if
the variable is not defined before), or you're updating the value of
an existing variable (if the variable already exists). For example,
suppose there's still a global variable &lt;code&gt;a&lt;/code&gt; in the R workspace. You
can use variable &lt;code&gt;a&lt;/code&gt; directly in user-defined functions, but if you
use &lt;code&gt;a=2&lt;/code&gt; (or &lt;code&gt;a&amp;lt;-2&lt;/code&gt; or &lt;code&gt;2-&amp;gt;a&lt;/code&gt;) in the user-defined
function, R won't think that you're updating the value of the global
variable, instead it things that you're creating a new local
variable &lt;code&gt;a&lt;/code&gt;. For this reason, if a global variable &lt;code&gt;a&lt;/code&gt; exists while
there's no local variable &lt;code&gt;a&lt;/code&gt; in a user-defined function, error
message will be shown if you use &lt;code&gt;a[1]=1&lt;/code&gt; (or other equivalent ways)
and try to run the function, because by doing this you're telling R
that you want to update the value of the first element of local
variable &lt;code&gt;a&lt;/code&gt; but local variable &lt;code&gt;a&lt;/code&gt; doesn't exist. If you really
want to update the value of (or create) a global variable in a
user-defined function, you should use operator &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; or
&lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt;. For example, if you want to update the value of global
variable &lt;code&gt;a&lt;/code&gt;, you can use &lt;code&gt;a&amp;lt;&amp;lt;-2&lt;/code&gt; (or &lt;code&gt;2-&amp;gt;&amp;gt;a&lt;/code&gt;). Now
you have seen that global variables can screw the execution result
of your own defined function easily. The situation can become even
trickier and thus harder to debug, if you define a local variable in
a branch (e.g. a branch of &lt;code&gt;if()...else...&lt;/code&gt; statement) of the code
while forget to define the same local variable in other branches and
at the same time a global variable with the same name exists. My
suggestion is that you first remove all global variables in the R
workspace if there's any, and then run your program. In this way,
you can avoid confusion resulting from global variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always be careful when there's an operation based on two vectors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sequence operator (&lt;code&gt;:&lt;/code&gt;) has a higher priority over arithmetic
operators (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;), but a lower priority than the power
operator (&lt;code&gt;^&lt;/code&gt;) and element operator (&lt;code&gt;[]&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expression &lt;code&gt;2^1^2&lt;/code&gt; is calculated from right to left in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid use function &lt;code&gt;median&lt;/code&gt; if you can, because it returns two
numbers when the vector has an even number of elements,which is
usually not what statisticians wand and might result in serious
problems in many cases. Actually we can always use
&lt;code&gt;quantile(x,prob=0.5)&lt;/code&gt; to get the median of vector &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For functions which takes &lt;code&gt;...&lt;/code&gt; as one of its parameters, we have to
be very careful.Because this kind of functions accept any number and
any kind of parameters. So sometime you think that you are passing
values to some argument of a function, but actually not. For example
if you use &lt;code&gt;seq(0,100,step=2)&lt;/code&gt; you might be in trouble. The right
command that works in this situations can be &lt;code&gt;seq(0,100,by=2)&lt;/code&gt;.
Nowadays, there are many different programming languages, and all of
them have their own advantages and disadvantages. So we might have
learned several different programming languages. And we are probably
told not to remember all functions by heart, instead, we can check
the syntax of functions when we have to use them. This is an
efficient way which is also my way to learn programming languages.
However, this might can lead to problems sometimes. Because we're
lazy, we might just guess syntax of functions that we're going to
use. This is not a big problem in complied languages, because anyway
the syntax will be checked later and what is more usually we have
good editors to help us (e.g. eclipse for Java). R is a interpreted
language, so even if there're syntax errors you might can still run
it. And because of high flexibility of R, it is very hard to editor
for R to find these tricky mistakes. So if we can, we should always
at least check the arguments of the functions we are going to use in
R. A simple way is just to use function &lt;code&gt;args&lt;/code&gt;. If we have used &lt;code&gt;args&lt;/code&gt;
to check the arguments of function &lt;code&gt;seq&lt;/code&gt;, then the chance for us to
make the mistakes mentioned above is very small. Also it is
recommended to always pass arguments to functions using argument
names, i.e. using the form &lt;code&gt;argname1=argvalue1&lt;/code&gt; to pass arguments to
functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To get the length of a vector, you can use &lt;code&gt;length&lt;/code&gt;. However, to get
the length of a string, you should use &lt;code&gt;nchar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;round&lt;/code&gt; in use the close even number strategy which might not what
you expect, so be careful when you use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a &lt;code&gt;for&lt;/code&gt; loop, the loop vector is immutable while the loop is
running. This means that R calculates the loop vector only once, an
for this reason, feel free to ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is often that one want to build a larger array based on small
arrays. For example, one build a 3-D array by repeating a 2-D
matrix. You should be careful if the "matrix" you used is obtained
by reading data from a file, because it's really a data frame often
times. All elements in an array have the same type, while elements
in a data frame do not have to share the same type. For this reason,
it is really inefficient to build an array based on a data frame (if
even all columns of the data frame share the same type). If you do
this for a large data frame, R can choke. A good way is to first
convert the data frame to a matrix using &lt;code&gt;as.matrix&lt;/code&gt;, and then build
the array you want based on the matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R runs commands in &lt;code&gt;Rprofile.site&lt;/code&gt;, then loads the save image (if
any), and then runs &lt;code&gt;.First&lt;/code&gt; (if exists). This means that if you
want to run something which depends the R image, you must put it
into the &lt;code&gt;.First&lt;/code&gt; instead of &lt;code&gt;Rprofile.site&lt;/code&gt;. However, it seems that
there is a bug with Rstudio (at least before version 0.94), who
does not follow the above order when it starts R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usually the number of levels of a factor equals the number of
distinct elements in the factor, however, it doesn't have to be.
Except factitious ones, the situation that the two quantities are
not the same usually happens after subsetting a data frame or
factor. If the number of levels of a factor is not the same with the
number of its distinct elements, you can apply &lt;code&gt;factor&lt;/code&gt; on itself to
get a factor with the two quantities identical.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use a factor for the index of subsetting, because if used it
will be coerced to an integer vector which is usually not what
people expect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R allows lazy evaluation to some extent, e.g. as almost all other
languages do, boolean expression in R are evaluated using lazy
evaluation. What is more important is that missing arguments are
allowed for R functions (i.e. you do not have to pass values to some
arguments, and everything runs OK as long as missing arguments are
not involved in computing), and missing arguments can even be
further passed to sub-functions (Everything runs OK as long as missing arguments are never used in
computing). Here is an illustration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; exact &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; na.rm &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; use&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;exact&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mean&lt;span class="p"&gt;((&lt;/span&gt;x &lt;span class="o"&gt;-&lt;/span&gt; mean&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    stats&lt;span class="o"&gt;::&lt;/span&gt;var&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&lt;/span&gt; x&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; y&lt;span class="p"&gt;,&lt;/span&gt; na.rm &lt;span class="o"&gt;=&lt;/span&gt; na.rm&lt;span class="p"&gt;,&lt;/span&gt; use &lt;span class="o"&gt;=&lt;/span&gt; use&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

var&lt;span class="p"&gt;(&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 1.667&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, R does not fully support lazy evaluation, and you shall not
expect code involve advanced lazy evaluation (need an example there
...) to work well. Part of the reason for not supporting advanced
lazy evaluation in R is that it invites many problems and can
probably result in fetal mistakes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Because of the way that computers stores double values, there are
always tiny storing errors associated with double values. So if you
want to compare whether a double value belongs to a range (a point
is a closed interval with equal limts), you can change the limits
(depends on what your want to do) of the range slightly to avoid
storing errors.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="global variable"></category><category term="programming"></category><category term="traps"></category></entry><entry><title>Convert Math Formula and Table To Latex</title><link href="http://lisafly.github.io/blog/convert-math-formula-and-table-to-latex/" rel="alternate"></link><updated>2013-12-05T00:23:40-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/convert-math-formula-and-table-to-latex/</id><summary type="html">&lt;h2&gt;R&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;xtable{xtable}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good for converting table to Latex code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;latex{Hmisc} &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert R objects (not just tables) to Latex code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Excel&lt;/h2&gt;
&lt;h2&gt;MATLAB&lt;/h2&gt;
&lt;h2&gt;Mathematica&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Type in the formula in Mathematica.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Selected the formula.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Right click on selection, and then select "Copy as" -&amp;gt; "Latex".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also convert formulas to other format in Mathematica.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Mathematica"></category><category term="table"></category><category term="programming"></category><category term="Excel"></category><category term="Latex"></category><category term="formula"></category><category term="R"></category><category term="MATLAB"></category></entry><entry><title>Distributions in R</title><link href="http://lisafly.github.io/blog/distributions-in-r/" rel="alternate"></link><updated>2013-12-05T00:22:23-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/distributions-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The definition of geometric distribution in R is not the same as the common definition. 
A random variable of geometric distribution in R starts from zero, 
i.e. geometric distribution in R is defined as the number of failures before we succeed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A random variable of negative binomial distribution $NB(r,p)$ in R 
is defined as the number of failures before we succeed for &lt;code&gt;r&lt;/code&gt; times,
where &lt;code&gt;p&lt;/code&gt; is the success probability in each trial.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The definition of hyper-geometric is the same as common but be careful with the parameters!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="distribution"></category><category term="R"></category><category term="programming"></category><category term="statistics"></category></entry><entry><title>Random Number Generating in R</title><link href="http://lisafly.github.io/blog/rng-in-r/" rel="alternate"></link><updated>2013-12-05T00:21:35-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/rng-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Functions for sampling random numbers from distributions 
share a same "basic" random number generator (RNG). 
If one set a seed for the "basic" RNG in use, 
it affects all functions for generating observations from distributions. 
The kind of "basic" RNG can be queried and set by &lt;code&gt;RNGkind&lt;/code&gt;. 
The default RNG in R is Mersenne-Twister.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When doing a big simulation, 
some people like to split the simulation into smart parts 
and run each part on a different machine. 
Theorectically speaking, 
this can cause problems, 
because random numbers generated on different machines might not come 
from disjoint parts of a same seed 
(or even not a same kind of random number generator). 
Parallel computing is an alternative to this approach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="programming"></category><category term="RNG"></category></entry><entry><title>Alike Objects/Functions in R</title><link href="http://lisafly.github.io/blog/alike-objects-in-r/" rel="alternate"></link><updated>2013-12-05T00:19:25-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/alike-objects-in-r/</id><summary type="html">&lt;h2&gt;Matrix VS Data Frame:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The data in a matrix must be of the same type while different columns 
in a data frame can have different types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A data frame is much bigger than a matrix with the same dimension. 
If possible, always use matrix instead of data frame to do computation.
Especially, 
when you creating arrays using the function &lt;code&gt;array&lt;/code&gt;,
you should avoid using a data frame as the data source 
(even if all columns of the data frame have the same type).
A way to work around this is to first convert a data frame to a matrix 
and then use the matrix as the data source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A data frame has names for rows and columns by default while a matrix not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;code&gt;sub&lt;/code&gt; VS &lt;code&gt;gsub&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;sub&lt;/code&gt; substitute only the first occurence of the string 
that matches the given pattern 
while function &lt;code&gt;gsub&lt;/code&gt; substitute all occurences of strings that matches the given pattern.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;code&gt;warning&lt;/code&gt; VS &lt;code&gt;warnings&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The function &lt;code&gt;warning&lt;/code&gt; shows a user-defined warning message 
while the function &lt;code&gt;warnings&lt;/code&gt; displays previously generated warning messages.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="programming"></category><category term="regex"></category><category term="data frame"></category><category term="matrix"></category><category term="R"></category><category term="warning"></category></entry><entry><title>Filesystem in R</title><link href="http://lisafly.github.io/blog/filesystem-in-r/" rel="alternate"></link><updated>2013-12-05T00:17:23-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/filesystem-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dirname&lt;/code&gt; returns the parent folder of a file or directory, and
&lt;code&gt;basename&lt;/code&gt; return the name (without the parent folder) of the file
or directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;file.path&lt;/code&gt; can combine directories (filenames) into a
path. It works similar to &lt;code&gt;paste&lt;/code&gt; which concatenates several strings
to a single one, but it is much faster. If some function in R doesn't
not support relative path, then we can use function &lt;code&gt;file.path&lt;/code&gt; to
combine the result returned by &lt;code&gt;getwd&lt;/code&gt; and the relative path, e.g.
&lt;code&gt;shell.exec(file.path(getwd(),'/1.txt'))&lt;/code&gt;. Notice that Notice that
&lt;code&gt;file.path&lt;/code&gt; does not handle the leading and trailing directory
delimiters very well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;Study&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C:/Study//1.txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To combine paths without worrying about the annoying leading and
trailing directory delimiters, you can use &lt;code&gt;combinePath&lt;/code&gt; in
&lt;code&gt;dclong.FileSystem&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;file.edit&lt;/code&gt; can open saved R code using R editor and it can
also open an empty R editor provided an empty string as parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There're many useful functions in R which provide low-level
interface to the computer's file and directory system, e.g.
&lt;code&gt;file.create&lt;/code&gt;, &lt;code&gt;file.exists&lt;/code&gt; and &lt;code&gt;dir.create&lt;/code&gt; and so on. If a
function for manipulating directories is missing, it's probably the
same as the function for manipulating files, e.g. function
&lt;code&gt;file.rename&lt;/code&gt; can also be used to rename a directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;file.info&lt;/code&gt; returns the information of files and
directories. The "isdir" column of the resulting data frame
indicates whether a path stands for a file or a directory. For
example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="n"&gt;isdir&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;               &lt;span class="n"&gt;mtime&lt;/span&gt;               &lt;span class="n"&gt;ctime&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;TRUE&lt;/span&gt;  &lt;span class="mi"&gt;777&lt;/span&gt; &lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt; &lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;
                &lt;span class="n"&gt;atime&lt;/span&gt; &lt;span class="n"&gt;exe&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;  &lt;span class="n"&gt;no&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that &lt;code&gt;file\_test&lt;/code&gt; can also be used to check whether a path is
a file or a directory. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;file_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;FALSE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Often times, one need to use temporary files. &lt;code&gt;tempfile&lt;/code&gt; returns a
vector of character strings which can be used as names for temporary
files. By default the temporary file is created in a temporary
directory returned by &lt;code&gt;tempdir&lt;/code&gt;. For example (the following results
is platform dependent),&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tempdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;Users&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;adu&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;AppData&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;Local&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;Temp&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;Rtmp55KGaO&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;Users&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;adu&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;AppData&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;Local&lt;/span&gt;
&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;Temp&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;Rtmp55KGaO&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt122935c&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="filesystem"></category><category term="programming"></category></entry><entry><title>Functions and Calls in R</title><link href="http://lisafly.github.io/blog/functions-and-calls-in-r/" rel="alternate"></link><updated>2013-12-05T00:15:37-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-12-05:blog/functions-and-calls-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can assign value to an R object by its name (in string) using the function &lt;code&gt;assign&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can get the value (i.e., deep copy not reference) of an R object 
(for general expression, use &lt;code&gt;eval&lt;/code&gt; with &lt;code&gt;deparse&lt;/code&gt;)
by its name (string) using the function &lt;code&gt;get&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;as.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Primitive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;as.character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;as.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;character&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the contratry, 
you can use the function &lt;code&gt;substitute&lt;/code&gt; or &lt;code&gt;quote&lt;/code&gt; to get the name (string) of an object, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substitute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftree_0_4_0_0&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;_100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ftree_0_4_0_0.5_100&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substitute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftree_0_4_0_0&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;_100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ftree_0_4_0_0.5_100&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftree_0_4_0_0&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="n"&gt;_100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function &lt;code&gt;dclong.fs::sym2str&lt;/code&gt; is an interesting one 
which tries to be smart to convert an R object to the right string. 
Note that &lt;code&gt;get&lt;/code&gt; only works on object names not string containing general expressions. 
To evaluate a string containing an R expression, 
you have to first parse it using the function &lt;code&gt;parse&lt;/code&gt; 
and then evaluate it using the function &lt;code&gt;eval&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x + 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are several ways to create function calls without executing it. 
The first way is to use &lt;code&gt;call&lt;/code&gt; by passing the name of a function 
and corresponding parameters to it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rnorm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;
&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="mf"&gt;0.7618801&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.2722733&lt;/span&gt;  &lt;span class="mf"&gt;1.1521628&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second way is to create a list containing a function, 
and parameters to be passed to the function, 
and then set the mode of the list to "call" or coerce it to a call using &lt;code&gt;as.call&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;
&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rnorm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;3.842330&lt;/span&gt; &lt;span class="mf"&gt;3.027134&lt;/span&gt; &lt;span class="mf"&gt;3.515679&lt;/span&gt; &lt;span class="mf"&gt;2.346022&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last way is to use the function &lt;code&gt;parse&lt;/code&gt; to parse expressions (string).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rnorm(3)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is useful when you want delayed evaluation or flexible calls.
Though you can make a function flexible using dots arguments ("..."), 
you can use only one dots arguments, 
and all arguments in the dots arguments must be pass to one function. 
Using list with mode "call" and &lt;code&gt;eval&lt;/code&gt;, 
you can make a user-defined function accept list as argument, 
which contains arguments to be passed to a call in the user-defined function. 
In this way, 
the list argument containing arguments to be passed to a call is comparable to the dots argument.
The advantage of list argument over the dots argument is that 
you can use more than multiple list arguments containing arguments 
to be passed to different calls in a user-defined function, 
thus it's even more flexible. 
Another smart use of call and &lt;code&gt;eval&lt;/code&gt; is to apply a function over a list of argument. 
For example, 
if you want to convert a list (of vectors/matrices) to a matrix, 
you can use the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#create a list with elements being 2*2 matrices&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
     &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is another R &lt;code&gt;do.call&lt;/code&gt; which performs the above operations at once, 
i.e., it constructs and executes a function call from a name or a function 
and a list of arguments to be passed to it. 
The following is another example of converting a list (of vectors/matrices) to a matrix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In &lt;code&gt;data-structures&lt;/code&gt;, 
you learned that there is a &lt;code&gt;sapply&lt;/code&gt; which can apply a function over a list. 
The difference between &lt;code&gt;do.call&lt;/code&gt; and &lt;code&gt;sapply&lt;/code&gt; is that&lt;br /&gt;
&lt;code&gt;do.call&lt;/code&gt; takes the whole list as an argument and returns only one result 
while  &lt;code&gt;sapply&lt;/code&gt; takes each element of the list as argument and returns a list of results 
(Sometimes, theses results are reformed to a simpler data structure, 
e.g. a vector or a matrix.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To check whether an object is a call, you can use &lt;code&gt;is.call&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can refer to missing arguments in user-defined functions. 
R won't complain until these missing arguments are really required.
For example consider the following silly function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ftemp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ftemp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ftemp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that &lt;code&gt;ftemp(-1)&lt;/code&gt; calls &lt;code&gt;ftemp(x=1,y=y)&lt;/code&gt;. 
You might think that this is not valid because the argument &lt;code&gt;y&lt;/code&gt; is missing, 
however, 
R does not complain about it because the argument &lt;code&gt;y&lt;/code&gt; is never used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;try&lt;/code&gt; allows us to handle error-recovery, 
which is similar to &lt;code&gt;try-catch-end try&lt;/code&gt; in vb.net. 
If you this function, 
R does not stop executing code when error is detected, 
rather you can decide what to do when error happens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use function &lt;code&gt;switch&lt;/code&gt; to write branch statement in R, 
however this function is not very friendly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use command &lt;code&gt;stop&lt;/code&gt; to stop executing a function in R, 
however it will print error message at the same time. 
And what's more, 
no values can be returned. 
To avoid printing error messages or to return values when exiting a function, 
we can use function &lt;code&gt;return&lt;/code&gt;.
Even if a function do not return anything, 
we can pass it as a argument to &lt;code&gt;return&lt;/code&gt;, 
and absolutely nothing will be return in this case. 
This can be help if we do not want anything to be return in a user-defined function. 
Notice that you can use return as a statement (i.e. put it on a single line), 
but it has no effect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use the names of build-in functions in R as parameter in self-defined functions. 
To avoid confusion, we can we use name space such as &lt;code&gt;base::matrix&lt;/code&gt; instead of &lt;code&gt;matrix&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define overloaded functions and functions with uncertain number of variables (using &lt;code&gt;...&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can define a function inside another function in R.
This can be helpful when we want to define some function that never be used again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define sub functions in a function, which is very convenient.
For example, 
sometimes you want to call another function inside a function. 
However, 
the function that you want to call is different every time 
and you even do not how to define it before you get intermediate results, 
i.e. the function that you want to call does not just differ in the form of arguments. 
To achieve this, 
you can use the strategy of defining sub functions inside a function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some functions in R require a function as argument. 
To pass value to the argument, 
you can directly give the define of a function instead of writing a function first 
and then pass the name of the defined function to the argument. 
This can be very convenient sometime, 
e.g. when you use function &lt;code&gt;apply&lt;/code&gt;, 
the function that you want to call is not define in R yet very simple, 
then you can use the strategy of passing definition to argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In R the arguments passed to a function can be changed, 
e.g. if x is a argument a function, 
then you can assign a new value to x. 
Notice that in some other languages, 
the arguments passed to a function cannot be changed, e.g. Mathematica.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For most functions in R, 
you can just type in their names in R GUI to get their source code; 
for functions written in S3, 
you can use function &lt;code&gt;getS3method&lt;/code&gt; to get their source code; 
for other functions written in C or Fortran, 
you have to download the source code of R in order to find the source code of these functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a R function which accepts the dots argument (...), 
you can pass basically any argument to it including dots itself. 
So if you want to pass all stuff in a dots argument to a function, 
you don't have to parse it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usually built-in R functions have many arguments 
and because R use partial matches to pass arguments to functions, 
you might never get a warning message 
if you use some argument that actually does not exist. 
If this happens when you use a function directly, 
it is possible for you to find this subtle mistake. 
However, if you make this kind of mistakes in a user-defined function, 
then it can be a very tricky bug. 
So it is recommended that you always check the arguments of functions 
that you are not very familiar with before you use it. 
When you come across some tricky bugs, 
you might want to check whether it is resulted from miss-passed argument(s) or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The difference between &lt;code&gt;ifelse&lt;/code&gt; and &lt;code&gt;if()… else …&lt;/code&gt;. &lt;code&gt;ifelse&lt;/code&gt; is a vector function 
but if()… else not. 
Generally speaking, if()… else… is used in a loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R uses buffer to store the output and then print it when the buffer is full. 
In order to print the information immediately you can use function &lt;code&gt;flush.console&lt;/code&gt; 
after you use function &lt;code&gt;cat&lt;/code&gt; to print out information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you always use &lt;code&gt;{}&lt;/code&gt; when use branches and loops in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An R object exists ever since it is defined 
until the end of its current evaluation environment. 
So unlike C++ and Java in which an object defined in a block is only in effect in that block, 
an object in R defined in a block will still be in effect outside the block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;with&lt;/code&gt; allows us to evaluate expressions in a data environment, 
so it's convenient to use it to work with data frames.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;T&lt;/code&gt; to stand for &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; stand for &lt;code&gt;FALSE&lt;/code&gt; when you write code in R, 
but you'd better use &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt; 
when you write user-defined functions 
because &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; are actually global variables that are defined as &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt; 
while &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt; are constant in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function&lt;code&gt;missing&lt;/code&gt; tests whether a value has been specified as an argument for a function, 
so it can be used write very robust functions and functions with flexible number of arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some functions in R can only be use when R is run in interactive
mode. If you want your code to run flawlessly in any mode, you can
use &lt;code&gt;interactive&lt;/code&gt; to check whether R is run in interactive mode or
command mode, and modify your code correspondingly. Notice that when
compiling an R package (commands such as &lt;code&gt;R CMD build&lt;/code&gt; are used),
R is run in command mode. As the reason mentioned before, some of
your examples might not run correctly, which can make your package
fail to pass the test. A simply tricky is to include your code in
block &lt;code&gt;if(interactive()){}&lt;/code&gt;, so that it will not run when the package
is compiled while it runs perfectly when copied and pasted in R GUI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pmatch&lt;/code&gt; performs partial string matching. If a function takes a
string argument, you can incorporate partial matching technic so
that the users can use partial values for the string argument. This
can make it a better experience for users to use the function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usually a &lt;code&gt;for&lt;/code&gt; loop is more convenient than a &lt;code&gt;while&lt;/code&gt; loop in all
kinds of programing languages. However, a &lt;code&gt;for&lt;/code&gt; loop in R requires a
vector specifying the loop range. Sometimes it's not very convenient
to construct a general purpose vector for a loop, e.g. if a loop
starts from &lt;code&gt;loopStart&lt;/code&gt; and ends at &lt;code&gt;loopEnd&lt;/code&gt; with a step &lt;code&gt;loopStep&lt;/code&gt;
but &lt;code&gt;loopEnd&lt;/code&gt; is not always greater than &lt;code&gt;loopStart&lt;/code&gt;, then it's
clumsy to use &lt;code&gt;loop&lt;/code&gt;. In this kind of situations, you can use a
&lt;code&gt;while&lt;/code&gt; loop instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The vector in a for loop is calculated once and stored. So it will not
take more time if you put an expression which generate the needed
vector in for loop. What is more, if you use an existing vector, the
for loop will not be affected even if you change the original vector.
(How about while loop? I think it is the same. In a word, the
conditions is determined before the loop and cannot be changed in
the loop. It is the same in Matlab, but different in Java[^18].)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;addTaskCallback&lt;/code&gt; registers an R function that is to be called each
time a top-level task is completed. and removeTaskCallback and
taskCallbackManager, these are very useful functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="function"></category><category term="programming"></category><category term="call"></category></entry><entry><title>Chance to Take One's Own Seat?</title><link href="http://lisafly.github.io/blog/chance-take-own-seat/" rel="alternate"></link><updated>2013-11-19T10:01:11-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-19:blog/chance-take-own-seat/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/seat/seat.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;There are $N$ seats on a plane.
Suppose the first passengers is drunk and he takes a seat randomly.
For each of the other passengers, if his/her seat is not taken by other people,
then he/she sits on his/her own seat, otherwise he/she takes a seat randomly.
What is  the probability that the last passenger takes his/her own seat?&lt;/p&gt;
&lt;p&gt;Let's use $P_n$ to stand for the probability that the last passenger takes his/her own seat,
given that there're $n$ seats in total, i.e. $N=n$.
If the first passenger takes his own seat,
then the last passenger will take his/her own seat.
If the first passenger takes the last passenger's seat,
then the last passenger cannot take his/her own seat (we know that he/she must take the first passenger's seat).
If the first passenger takes the $i^{th}, 1&amp;lt;i&amp;lt;n$ passenger's seat,
then for the $j^{th}$ passenger, $1&amp;lt; j\lt i$, he/she will takes his/her own seat.
Now the $i^{th}$ passenger has to choose a seat randomly.
Since we don't care about whether the $i^{th}$ passenger takes his/her own seat or not,
we can pretend that the first passenger's seat is the $i^{th}$ passengers.
From this perspective, the problem has been changed to a same problem with $N=n-i+1$.
So conditioning on the seat that the first passenger takes,
we have the following recursive formula:&lt;/p&gt;
&lt;p&gt;$$
P_n=\frac{1}{n}\times1+\frac{1}{n}\times0+\sum_{i=2}^{n-1}\frac{1}{n}P_{n-i+1}=\frac{1}{n}\sum_{i=1}^{n-1}P_i,\ n\ge2,
$$&lt;/p&gt;
&lt;p&gt;where $P_1=1$.&lt;/p&gt;
&lt;p&gt;We can use method of generating function to find the formula of general terms.
However, if we notice from the recursive formula that $P_2=\frac{1}{2}$,
$P_3=\frac{1}{2}$, $P_4=\frac{1}{2}$ and so on.
We can easily see that $P_i=\frac{1}{2}$ for $i\ge2$ is the
unique solution for the general terms.\
So as long as there're more than 1 people,
the probability that the last passenger takes his/her own seat is $\frac{1}{2}$.&lt;/p&gt;</summary><category term="statistics"></category><category term="recursion"></category><category term="probability"></category><category term="fun problems"></category></entry><entry><title>How Many People Stay in the Same Position?</title><link href="http://lisafly.github.io/blog/same-position-permutation/" rel="alternate"></link><updated>2013-11-17T15:16:03-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-17:blog/same-position-permutation/</id><summary type="html">&lt;p&gt;&lt;img src="http://legendu.net/media/people/same.jpg" width="240" height="200" align="right"&gt;&lt;/p&gt;
&lt;p&gt;There are 100 seats on a plane.
If each of the 100 passengers randomly take a seat,
how many people will have his/her own seat on average?&lt;/p&gt;
&lt;p&gt;There is a classic way to solve this problem, 
which is to decompose a (complicated) random variable into a sum of simple random variables.
This is an important trick. 
See &lt;a href="http://legendu.net/en/blog/calculate-covariance-between-multinomial-categories-by-hand/"&gt;this post&lt;/a&gt; 
for the use of this trick to calculate the covariance 
of observastions in two categories in a multinomial distribution.&lt;/p&gt;
&lt;p&gt;Let's generalize this problem to assume that 
there are $n$ seats and $n$ passengers. 
Let $Y_i=I(\text{passenger } i \text{ takes its seat})$, $1\le i \le n$,
where $I$ is an indicator function. 
$Y_i$'s are exchangeable, 
which means that for a fixed $k$ ($1\le k\le n$), 
any subset of $\{Y_i: 1\le i \le n\}$ with $k$ elements has the same distribution.
Specially,
it's easy to see that &lt;/p&gt;
&lt;p&gt;$$
Y_i\overset{iid}{\sim}\text{Bernoulli}(\frac{1}{n}),
$$&lt;/p&gt;
&lt;p&gt;$$
Y_iY_j\overset{iid}{\sim}Bernoulli(\frac{1}{n(n-1)}), i\ne j.
$$&lt;/p&gt;
&lt;p&gt;So we have &lt;/p&gt;
&lt;p&gt;$$
EY_i=\frac{1}{n},
$$&lt;/p&gt;
&lt;p&gt;$$
EY_iY_j=\frac{1}{n(n-1)}, i\ne j, 
$$&lt;/p&gt;
&lt;p&gt;$$
Var(Y_i)=\frac{n-1}{n^2},
$$&lt;/p&gt;
&lt;p&gt;$$
Cov(Y_1,Y_2)=EY_1Y_2-EY_1EY_2=\frac{1}{n^2(n-1)}.
$$&lt;/p&gt;
&lt;p&gt;Let $X_n\equiv\sum_{i=1}^nY_i$, 
which is the number of passengers taking their own seats.
From above results we know that&lt;/p&gt;
&lt;p&gt;$$
E(X_n)=E\left( \sum_{i=1}^nY_i\right)=\sum_{i=1}^n E Y_i=n E Y_1=n\frac{1}{n}=1,
$$&lt;/p&gt;
&lt;p&gt;\begin{align}
Var\left( X_n\right) &amp;amp;= Var\left( \sum_{i=1}^nY_i\right)
                =\sum_{i=1}^n Var(Y_i)+\sum_{i\ne j}Cov(Y_i,Y_j) \nonumber \newline
                     &amp;amp;=  nVar(Y_1)+n(n-1)Cov(Y_1,Y_2) \nonumber \newline
                     &amp;amp;=  n\frac{n-1}{n^2}+n(n-1)\frac{1}{n^2(n-1)}=1. \nonumber
\end{align}&lt;/p&gt;
&lt;p&gt;Surprisingly, both the mean and the variance of $X_n$ is 1,
which suggests that we can predict $X_n$,
i.e. the number of integers that have the same position as their
original position very well.&lt;/p&gt;
&lt;p&gt;The above solution is elegant. 
However, 
I'd like to try to solve this problem using my preferred universal procedure.
Let $Y_i$ and $X_i$, $1\le i \le n$, be as defined above. 
Conditioning $X_n$ on $Y_1$ gives us a recursive/differtial equation.
If $Y_1=1$ (with probability $\frac{1}{n}$), 
i.e., the first passenger sits on its seat,
then $X_n = 1 + X_{n-1}$;
It's a little tricky when $Y_1=0$ (with probability $1-\frac{1}{n}$),
i.e., the first passenger sits on other people's seat. 
Assume the first passenger takes $k^{th}$ ($2\le k\le n$) passenger's seat.
If we pretend that seat 1 is the $k^{th}$ passenger's seat,
then we have $X_n = X_{n-1}$. 
However, seat 1 is not $k^{th}$ passenger's seat,
and we cannot count it into $X_{n-1}$. 
Let $E_k\equiv I(\text{passenger } k \text{ sits on seat 1})$. 
We only miss count $X_{n-1}$ by extra 1 when $E_k=1$, 
so when $Y_1=0$ we have 
$$
X_n = X_{n-1} - E_k.
$$
It's easy to see that $E_k\sim\text{Bernoulli}(\frac{1}{n-1})$. 
So using the conditional expectation formula, we have
\begin{align}
EX_n &amp;amp;= E(E(X_n|Y_1))\nonumber\newline 
     &amp;amp;= E\left(\frac{1}{n}(1 + X_{n-1}) + (1-\frac{1}{n}) (X_{n-1} - E_k)\right)\nonumber\newline
     &amp;amp;=EX_{n-1},
\end{align}
where $EX_1=1$.
This is the simplest recursive/differential equation. 
Anyone can immediately see that $EX_n=1, \forall n\ge1$ is the solution to this recursive/differential equation.&lt;/p&gt;</summary><category term="same position"></category><category term="statistics"></category><category term="probability"></category><category term="linear recursion"></category><category term="fun problems"></category><category term="conditional expectation"></category><category term="permutation"></category></entry><entry><title>Calculate Covariance Between Multinomial Categories by Hand</title><link href="http://lisafly.github.io/blog/calculate-covariance-between-multinomial-categories-by-hand/" rel="alternate"></link><updated>2013-11-17T15:14:27-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-17:blog/calculate-covariance-between-multinomial-categories-by-hand/</id><summary type="html">&lt;p&gt;Let $(X_1, \ldots, X_k)\sim\text{Multinomial}(n, p_1, \ldots, p_k)$. 
I'll show how to calculate $Cov(X_i, X_j), i\ne j$. 
The main purpose of doing this is to illustrate the little trick 
of reducing complexity of problems by decomposing a complicated random variable 
into simple ones. &lt;/p&gt;
&lt;p&gt;Let $(Y_{i1}, \ldots, Y_{ik})\overset{iid}{\sim}\text{Multinomial}(1, p_1, \ldots, p_k), i\ge1$,
then 
$$
X_j = \sum_{i=1}^n Y_{ij}, 1\le j \le k.
$$
So,
\begin{align}
Cov(X_i,X_j) &amp;amp;= Cov(\sum_{l=1}^n Y_{li}, \sum_{m=1}^n Y_{mj})\nonumber\newline
             &amp;amp;= \sum_{l=1}^n\sum_{m=1}^n Cov(Y_{li}, Y_{mj})\nonumber\newline
             &amp;amp;= \sum_{m=1}^n Cov(Y_{mi}, Y_{mj})\nonumber\newline
             &amp;amp;= nCov(Y_{1i}, Y_{1j}) = n(EY_{1i}Y_{1j} - EY_{1i}EY_{1j})\nonumber\newline
             &amp;amp;= -np_ip_j\nonumber\newline
\end{align}&lt;/p&gt;</summary><category term="fun problem"></category><category term="statistics"></category><category term="probability"></category><category term="multinomial"></category><category term="covariance"></category></entry><entry><title>Rstudio Does Not Start</title><link href="http://lisafly.github.io/blog/rstudio-not-start/" rel="alternate"></link><updated>2013-11-16T21:38:41-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-16:blog/rstudio-not-start/</id><summary type="html">&lt;p&gt;Rstudio is the best cross-platform IDE for R so far. 
It is a lot like the IDE of matlab.
Once I came across the problem that Rstudio did not start. 
I search website for a solution but has no luck. 
I have seen broken configuration files prevent applications 
from working correctly a lot.
So I tried removing the configuration directory ".rstudio-desktop" from my home directory, 
and Rstudio worked properly again!
This trick also works for many other applications, 
e.g., forefix, latex (temporary files), etc.&lt;/p&gt;</summary><category term="IDE"></category><category term="R"></category><category term="statistics"></category><category term="software"></category><category term="configuration"></category></entry><entry><title>Comparison of (Debian Series) Linux Distributions</title><link href="http://lisafly.github.io/blog/debian-vs-ubuntu/" rel="alternate"></link><updated>2013-11-15T23:24:53-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-15:blog/debian-vs-ubuntu/</id><summary type="html">&lt;p&gt;The Debian series Linux 
(including Debian, Ubuntu, Mint, antiX, etc) is a popular Linux distribution series. 
It is a good choice for personal (desktop) use. 
The following are some comparisons based on my PERSONAL experience.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ease to install: Ubuntu &amp;gt; Mint &amp;gt; Debian.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usability: Ubuntu &amp;gt; Mint &amp;gt; Debian.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stability: Debian &amp;gt; Mint &amp;gt;= Ubuntu.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance: Debian &amp;gt; Ubuntu, Mint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;antiX is lightweighted Debian compatible Linux distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu has more commercial, graphics related packages,
and these packages make Ubuntu more user friendly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zubuntu (Ubuntu + Xfce) is sweet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux distribution are based on the same kernel. 
Choosing a good desktop environment is more important than choose a Linux distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Distributions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ubuntu is much simpler than other Linux distributions, very fancy. 
I like it honest speaking. 
The only thing I'm worrying about is stablity. I might switch back to ubuntu in future. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu, Mint and Fedora are easy to install and use. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debian have more strict selection on "free" softwares.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ArchLinux is for geek. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="antiX"></category><category term="Linux Mint"></category><category term="Ubuntu"></category><category term="Linux"></category><category term="Debian"></category></entry><entry><title>Good C++ Libraries</title><link href="http://lisafly.github.io/blog/good-cpp-libraries/" rel="alternate"></link><updated>2013-11-08T20:33:02-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-08:blog/good-cpp-libraries/</id><summary type="html">&lt;h2&gt;Good C++ Libraries&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;boost: an advanced general purpose C++ library &lt;/li&gt;
&lt;li&gt;dlib: a general purpose cross-platform C++ library designed using contract programming and modern C++ techniques.&lt;/li&gt;
&lt;li&gt;R: a popular statistic software. &lt;/li&gt;
&lt;li&gt;shogun: a large scale machine learning toolbox&lt;/li&gt;
&lt;li&gt;Armadillo: linear algebra&lt;/li&gt;
&lt;li&gt;it++: signal processing&lt;/li&gt;
&lt;li&gt;Blitz++: linear algebra and random number generator &lt;/li&gt;
&lt;li&gt;GMP: the GNU Multiple Precision Arithmetic Library&lt;/li&gt;
&lt;li&gt;NTL: a library for doing number theory &lt;/li&gt;
&lt;li&gt;HPX: high performance parallel library&lt;/li&gt;
&lt;li&gt;Cinder (graphics, audio, video, networking, image processing and computational geometry)&lt;/li&gt;
&lt;li&gt;libcurl: a free and easy-to-use client-side URL transfer library&lt;/li&gt;
&lt;li&gt;GSL: a comprehensive C/C++ scientific library&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;R&lt;/h2&gt;
&lt;p&gt;There are some useful distribution related C functions in R.h.
You can use these C functions which do not require an session of R 
(random number generating functions require a session of R and thus cannot be used in C/C++ code directly) 
in your C/C++ code.
A more general and powerful way to call R related functions is via the "Rinside" package. 
Using the "Rinside" package, 
you can call any R function not just C functions in R header files.
On the contrary, "Rcpp" is a way to extened R via C++. 
The most convenient way to use "Rcpp" is to expose C++ classes/methods/functions to R via &lt;code&gt;RCPP_MODULE&lt;/code&gt;.
Note that "Rcpp" is for R users not C/C++ users,
i.e., you must come back to R. 
Tring to compile C/C++ based on "Rcpp" and the binary code will result in segmentation fault. &lt;/p&gt;
&lt;h2&gt;Boost&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The boost random library (and thus the standard library of C++11) does not have a way to generate 
random numbers from the beta distribution directly, 
however, you use $X/(X+Y)$ where $X$ and $Y$ are independent 
random variables from the gamma distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;boost::accumulator is good for incremental calculations,
especially when several quantities having dependent relationships need 
be calculated. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Armadillo&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The C++ standard library supports methods &lt;code&gt;at&lt;/code&gt; and &lt;code&gt;operator[]&lt;/code&gt; for accessing elements of containers. 
Armadillo supports these two methods as no-bound-checking versions. 
&lt;code&gt;operator()&lt;/code&gt; is the bound-checking (and thus preferred) version for accessing elements of matrices and arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Armadillo use &lt;code&gt;*&lt;/code&gt; for matrix multiplication and &lt;code&gt;%&lt;/code&gt; element-wise multiplication,
which is different from R and Matlab.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;GSL&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The GSL library implements popular special functions many of which 
are not implemented in other libraries 
(e.g., the Lambert-W function is not implemented in Boost).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The distribution related functions (quantile, cdf, PDF, etc) in 
GSL is more convenient to use than the Boost library. 
You can define macros to match the GSL version of distribution functions with 
R version of distribution functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="library"></category><category term="programming"></category><category term="gsl"></category><category term="package"></category><category term="GMP"></category><category term="boost"></category><category term="it++"></category><category term="C++"></category><category term="armadillo"></category><category term="NTL"></category></entry><entry><title>General Tips For C++</title><link href="http://lisafly.github.io/blog/general-tips-for-cpp/" rel="alternate"></link><updated>2013-11-08T16:08:23-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-08:blog/general-tips-for-cpp/</id><summary type="html">&lt;h2&gt;IDE&lt;/h2&gt;
&lt;p&gt;Eclispe CDT is a good IDE for C/C++ development in Unix/Linux sytem. 
Configuration of Eclipse CDT in Windows system is not pleasant. 
Netbeans and code::blocks are good alternatives in Windows system.&lt;/p&gt;
&lt;h2&gt;Traverse Containers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;It's suggested that you always traverse a container using an interator instead of an (integer) index
unless (integer) index is absolutely necessary. 
Traverse a container with (integer) index is error-prone.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For situations where &lt;code&gt;++i;&lt;/code&gt; and &lt;code&gt;i++;&lt;/code&gt; (similar for &lt;code&gt;--i&lt;/code&gt; and &lt;code&gt;i--&lt;/code&gt;) can both be used, 
you'd better your use the first one. 
This is becuase &lt;code&gt;++i;&lt;/code&gt; is usually more efficient than &lt;code&gt;i++;&lt;/code&gt;
especially when &lt;code&gt;i&lt;/code&gt; is not of primitive type but some complex object. 
Modern compilers might optimize the latter one to be as efficient as the former one, 
but it never hurt to use the former one.
You should be very careful when you use either &lt;code&gt;++i&lt;/code&gt; or &lt;code&gt;i++&lt;/code&gt; in your code. 
Both these two expressions change the value of i. 
So if &lt;code&gt;++i&lt;/code&gt; or &lt;code&gt;i++&lt;/code&gt; is used and &lt;code&gt;i&lt;/code&gt; appears more than once in an expression, 
you'd better thining twice. 
My suggestion is to simply avoid these situations. 
Do not wirte code that is difficult to read and understand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefer iterating containings using iterators. 
Iterating containings using an integer index variable can possible cause several problems. 
First, using an integer index variable makes the code not portable. 
Second, using an integer index varialbe might cause the overflow problem.
Due to the second reason, 
if you do want to use an integer index variable (e.g., i) to iterate a container (e.g., c), 
you'd better check boundry conditions by &lt;code&gt;if(i&amp;lt;0 || i&amp;gt;=c.size()) ...&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefer functions/methods with fewer arguments. 
If a function/method has many arguments, 
it is suggested that you group related arguments into a single argument.
This make the function/method easier to understand. 
For example, 
if a function/method takes two double arguments which are 
the x and y coordinate of a point, you can group them into a pair of doubles.
This does not make the function/method more convenient to use 
(in the sense of saveing typing), 
but the code will usually be more readable. 
Also, 
when you write a class, 
it is recommended that you group related member variables into a single struct. 
For example, 
you can group all temporary variables 
(variables do not need constructors to offer initializing values) into a single struct.
This not only makes the code more readable but also make it 
easier to write copy and move constructors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you write a class, 
it is recommended that you use long (full) names for data members but short simple names for method members.
This makes it more convenient to implement 
(you can use short simple names for the arguments of method members) and use the class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead of letting a method return &lt;code&gt;void&lt;/code&gt;, 
you can return a reference to current object.
This make is possible to write "chained" code and thus more convenient. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When error happens and you do not want to throw exceptions, 
you can use &lt;code&gt;std::cerr&lt;/code&gt; to print out error message and then use &lt;code&gt;exit&lt;/code&gt;
to stop the program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions in &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt; are very useful and they make it easier and more conveneint to write code. 
However, 
sometimes it can be more convenient, 
concise and efficient (both time and memory) 
to write code by yourself than using functions in &lt;code&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++ does not allow multiple types in one auto statement 
similar to non-auto declarations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't declare objects const if want to move from them.
Applying &lt;code&gt;std::move&lt;/code&gt; on a const object copies the object.
&lt;code&gt;std::move&lt;/code&gt; is essentially cast and &lt;code&gt;std::forward&lt;/code&gt; is essentially conditional cast.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using std::move doesn't guarantee anything will be moved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Array&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Avoid using &lt;code&gt;arrays&lt;/code&gt; in C/C++. 
Use &lt;code&gt;vectors&lt;/code&gt; instead. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In C/C++, a 1-dimensional array is equivalent to a pointer. 
For example,
if we have definition &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;then &lt;code&gt;a&lt;/code&gt; can be treated as a pointer to integers. 
However, a 2-dimensional array in C/C++ is not the same as a pointer to pointers. 
For example, if we have definition &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then &lt;code&gt;a&lt;/code&gt; is not of the same type as &lt;code&gt;int **&lt;/code&gt;. 
As a matter of fact, &lt;code&gt;int **&lt;/code&gt; is an array of pointers to integers. 
If you pass you a 2-dimensional integer array to a function which requires an
&lt;code&gt;int **&lt;/code&gt; parameter, 
the compiler will complain.&lt;/p&gt;</summary><category term="tips"></category><category term="programming"></category></entry><entry><title>Tips for C++ Compilers</title><link href="http://lisafly.github.io/blog/tips-gcc-compiler/" rel="alternate"></link><updated>2013-11-08T12:20:14-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-08:blog/tips-gcc-compiler/</id><summary type="html">&lt;h2&gt;GCC&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;User option &lt;code&gt;-lpthread&lt;/code&gt; to link the thread library when your code use the thread library. 
If you do not use, the option &lt;code&gt;-lpthread&lt;/code&gt;, you can probably compile your coe without any 
error or warning, but you will probably get the following error when you run the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;terminate&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;throwing&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;system_error&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Operation&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;permitted&lt;/span&gt;
  &lt;span class="n"&gt;Aborted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User option &lt;code&gt;-std=c++0x&lt;/code&gt; to compile C++11 code. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some thumb rules for compiler optimization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;when you need to debug, use the option &lt;code&gt;-O0&lt;/code&gt; 
(and the option &lt;code&gt;-g&lt;/code&gt; to generate debugging symbols.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when you are preparing to ship it, 
use the option &lt;code&gt;-O2&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when you really care about performance (e.g., for use on Gentoo), 
use the option &lt;code&gt;-O3&lt;/code&gt;. 
However, this is not always safe. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when you need to put it on an embedded system, use &lt;code&gt;-Os&lt;/code&gt; 
(optimize for size, not for efficiency.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Clang&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;use libc++ instead libstdc++&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C++"></category><category term="programming"></category><category term="GCC"></category><category term="thread"></category><category term="compiler"></category><category term="link"></category></entry><entry><title>String In Java</title><link href="http://lisafly.github.io/blog/string-in-java/" rel="alternate"></link><updated>2013-11-07T19:43:17-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-07:blog/string-in-java/</id><summary type="html">&lt;h2&gt;String&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;String is a special class (immutable) in Java. Extensive operations
(&lt;code&gt;+&lt;/code&gt; and other methods of &lt;code&gt;String&lt;/code&gt;) on strings is usually very slow.
You can use &lt;code&gt;StringBuilder&lt;/code&gt; to improve performance. Except
improvement of performance, &lt;code&gt;StringBuilder&lt;/code&gt; also offer many other
useful methods for string operations that are not included in
&lt;code&gt;String&lt;/code&gt;. &lt;code&gt;StringBuilder&lt;/code&gt; is a mutable class. When you make an
operation on a &lt;code&gt;StringBuilder&lt;/code&gt; object, the original object is
mutated, i.e., unlike many other classes do, it does not return a new
object, instead, it returns the (mutated) original object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to read or write large text (e.g. more than 100M), you
can use &lt;code&gt;BufferedRead&lt;/code&gt; and &lt;code&gt;BufferedWriter&lt;/code&gt; to improve
performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There's no built-in sort method for String. 
To sort characters in a string,
you can first convert the string into a char array,
sort the char array and convert back.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Java"></category><category term="programming"></category><category term="string"></category></entry><entry><title>Resizing Hard Disk Of Guest Machine In Virtualbox</title><link href="http://lisafly.github.io/blog/resizing-hard-disk-of-guest-machine-in-virtualbox/" rel="alternate"></link><updated>2013-11-03T00:00:13-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-11-03:blog/resizing-hard-disk-of-guest-machine-in-virtualbox/</id><summary type="html">&lt;p&gt;Suppose you have virtual hard disk in VirtualBox called &lt;code&gt;xp.vdi&lt;/code&gt;, 
you can resize it (megabytes) using the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;VBoxManage&lt;/span&gt; &lt;span class="n"&gt;modifyhd&lt;/span&gt; &lt;span class="n"&gt;xp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vdi&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="mi"&gt;40960&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command currently doesn't support vmdk virtual disk. 
So if you have a virtual disk called &lt;code&gt;xp.vmdk&lt;/code&gt;,
you have to first convert it into a vdi disk using command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;VBoxManage&lt;/span&gt; &lt;span class="n"&gt;clonehd&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;VDI&lt;/span&gt; &lt;span class="n"&gt;xp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vmdk&lt;/span&gt; &lt;span class="n"&gt;xp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vdi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then resize the vdi file using previous command.&lt;/p&gt;
&lt;p&gt;Note that the above commands only resize the virtual disk,
it doesn't resizes partitions inside the virtual disk.
You must manually resize partiions. 
This is easy to do for Windows 7/8 guest machines. 
If have other type of guest machiens (e.g., XP),
you can use partition tools (e.g., GParted) to manually resize partitions.
Take GParted for example,
you can download it, 
mount it into a virtual CD/DVD, 
boot your guest machine into GParted,
and then use the graphical tool to resize partitions.
It's very intuitive once you get there.&lt;/p&gt;</summary><category term="partition"></category><category term="gparted"></category><category term="virtualbox"></category><category term="software"></category><category term="vmdk"></category></entry><entry><title>The Power of Generating Functions</title><link href="http://lisafly.github.io/blog/generating-functions/" rel="alternate"></link><updated>2013-10-30T22:17:41-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/generating-functions/</id><summary type="html">&lt;p&gt;Generating functions is a very powerful way to find closed 
formula for sequences defined iteratively.
I was so bored during the final week, 
so I went on internet for fun. 
Finally I found someone from Sydney University was asking for help on this question:&lt;/p&gt;
&lt;p&gt;(a) If Ln=Ln-1+Ln-2 for n&amp;gt;1 and Lo=2 and L1=1, please Find a closed formula for Ln.&lt;/p&gt;
&lt;p&gt;(b) Sn=Ln+ Ln-1 + … + Lo, please find an closed formula for Sn.&lt;/p&gt;
&lt;p&gt;(c) An=Ln-1So + Ln-2S1 + … + LoSn-1, please find a closed formula for An.&lt;/p&gt;
&lt;p&gt;I gave a solution using generating functions. See &lt;a href="{{%20site.url%20}}/media/sequence.pdf"&gt;sequence&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're from math department, 
you might question that do these series defined converge, 
if so what are the domains of convergence? 
Dating back to some day when I was still a sophomore, 
I read a book about generating functions 
and talked with my friend Hao Ying about how powerful it is. 
I cited the author's words:" We don't even have to check the domain of convergence of the series…". 
Hao bugged up and said:" What? You don't need to check the domain of converge? 
It's not important what others said. 
What really matters is what you think. 
Do you really think that's valid?…". 
Well, I still have to say that really we don't need check the converge domain of the series we used. 
It's trifle and might too be hard. 
As is known too all, 
it's easy to use mathematical induction method to prove or disprove 
a closed formula for a sequence define iteratively. 
If the formula can be proved, 
the generating method works, vise versa. 
So far I haven't come across a situation 
that generating functions method fails to work.&lt;/p&gt;</summary><category term="series"></category><category term="statistics"></category><category term="sequence"></category><category term="math"></category><category term="fun problems"></category><category term="generating function"></category></entry><entry><title>Creative Use of Keepassx -- Odd Skills?</title><link href="http://lisafly.github.io/blog/creative-use-of-keepassx-odd-skills/" rel="alternate"></link><updated>2013-10-30T22:15:37-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/creative-use-of-keepassx-odd-skills/</id><summary type="html">&lt;p&gt;&lt;img src="http://legendu.net/media/logo/keepassx.jpeg"
width="200" height="160" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I had to schedule an event on Doodle.
I wanted to fill in all possible regular meeting times 
(starting at 8:00 am with 30 minutes interval).
I am such a lazy guy who never want to repeat the same thing for more than 3 times.
Typing all these time slots in Doodle was obvious a pain for me.
I immediately came out with the idea of simulating keyboard events. 
I started search in gooled for such a tool in Linux, 
then I immediately realized that I already had such a tool -- keepassx. 
Odd enough, keepassx is a tool for managing passwords!
That's right! 
keepassx allows one to send customized keys to windows.
This is what I wanted. 
Readers might think aloud: 
"Huh, 
so you transformed the work of repeated typing in Doodle into repeated typing in keepassx?"
The answer is letting R 
(or any script language you're familiar with) 
to generate the string for you!
Another advantage of this way is that you work is saved in keepassx.
Scheduling events with the same time slots in future is greatly simplified.
Though I might have used less time to get the work done 
by just typing in Doodle,
I enjoyed getting my worked done creatively. 
And as mentioned above, 
my work is saved. 
I have killed many birds (scheduling similar events in future) with one stone.&lt;/p&gt;</summary><category term="skills"></category><category term="Linux"></category><category term="software"></category><category term="fun problems"></category></entry><entry><title>Inverse of a Special Class of Matrices with High Dimensions</title><link href="http://lisafly.github.io/blog/inverse-of-matrix/" rel="alternate"></link><updated>2013-10-30T22:12:02-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/inverse-of-matrix/</id><summary type="html">&lt;p&gt;&lt;img src="http://legendu.net/media/math/matrix-inverse.png"
width="200" height="160" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;One day, my officemate Tieming asked me about a problem that she met in her research. 
Suppose $\boldsymbol{B}$ is a symmetric matrix of huge dimension 
and $\boldsymbol{D}$ is a diagonal matrix with nonnegative diagonal elements. 
The inverse of $\boldsymbol{B}$ is already known, 
how can we calculate the inverse of $\boldsymbol{B}+\boldsymbol{D}$ efficiently? 
I thought for a while and found a good way to solve the problem. 
See solution in &lt;a href="http://dclong.github.io/media/inverse-of-matrix.pdf"&gt;Inverse of Matrix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I haven't implemented the algorithm yet, 
but a roughly estimate of the complexity of this algorithm tells me that even R can handle it. 
I will write a R function to do this later when I have time.&lt;/p&gt;</summary><category term="inverse"></category><category term="fun problems"></category><category term="matrix"></category><category term="math"></category><category term="statistics"></category><category term="R"></category><category term="high dimension"></category></entry><entry><title>What are the Two Integers?</title><link href="http://lisafly.github.io/blog/Find-the-two-indivisible-numbers/" rel="alternate"></link><updated>2013-10-30T22:11:39-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/Find-the-two-indivisible-numbers/</id><summary type="html">&lt;p&gt;I met a friend majored in math on a bus home today. 
He held a piece of paper with a question 
(probably an interview question since he is trying to find a job recently).
He asked the question to me and I found it to be an interesting one. &lt;/p&gt;
&lt;p&gt;A very large positive integer is divisible by all 
but two of the integers &lt;/p&gt;
&lt;p&gt;$$1, 2, 3, \dots, 10000,$$&lt;/p&gt;
&lt;p&gt;and the two excepted numbers are consecutive integers.
What are the two integers?&lt;/p&gt;
&lt;p&gt;I did not get the answer before my friend get off the bus. 
However, as soon as arriving home I get the key to the questions. 
The outline of my thoughts leading to the answer is as follows.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Assume the question is valid, 
i.e., there is a unique answer to this problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both of the two numbers (indivisible to the large integer) 
have prime factorization of the form: $a^b$,
where $b$ is the largest possible value. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since one of two consecutive integers is even, 
one of the two numbers (indivisible to the large integer) has
the form $2^b$ and thus is $2^{13}=8192$. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other number must be either &lt;code&gt;8193&lt;/code&gt; or &lt;code&gt;8191&lt;/code&gt;. 
Since &lt;code&gt;8193&lt;/code&gt; is divisible to &lt;code&gt;3&lt;/code&gt; but not &lt;code&gt;9&lt;/code&gt; 
(&lt;code&gt;8 + 1 + 9 + 3 = 21&lt;/code&gt; is a multiple of &lt;code&gt;3&lt;/code&gt; but not &lt;code&gt;9&lt;/code&gt;), 
it does not have the form mentioned in step 2.
So the other number is &lt;code&gt;8191&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="puzzle"></category><category term="fun problems"></category><category term="number"></category></entry><entry><title>Probability to Lose All Money</title><link href="http://lisafly.github.io/blog/probability-lose-all-money/" rel="alternate"></link><updated>2013-10-30T21:36:20-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/probability-lose-all-money/</id><summary type="html">&lt;p&gt;&lt;img src="http://legendu.net/media/object/money-1.jpeg"
width="240" height="200" align="right" /&gt;&lt;/p&gt;
&lt;p&gt;A few days ago I found someone asking an interview questions on &lt;a href="http://www.mitbbs.com/"&gt;mitbbs&lt;/a&gt;.
The question is as follows. 
A gambler plays a fair game and bet \$1 each time. 
If he lose all his money, 
the game stops. 
Suppose he has \$10 and is only allowed to play 50 rounds at most, 
what is the probability that he lose all his money?&lt;/p&gt;
&lt;p&gt;This is a problem of random work. 
I am pretty sure that there are very neat solutions to 
this problem using &lt;em&gt;reflection&lt;/em&gt;. 
However, 
as I mentioned in my book &lt;em&gt;Statistics Thinkings&lt;/em&gt;, 
there is a universal way to solve this kind of problems. 
The key is to find a recursive forumula using conditional expectation/probability. 
First, 
we can generalize the problem to the following one. 
A gamber palys a fire game and bet \$1 each time. 
If he lose all his money, 
the game stops. 
Suppoe he has \$$m_0$ and is only allowed to play $k$ rounds at most,
what is the probability that he end up with \$$m$?&lt;/p&gt;
&lt;p&gt;Let's use $P_{n,m}$ to stand the probability 
that the player end up with \$$m$ after $n$ steps. 
Conditioning on step $n-1$, 
we have
    $$
        P_{n,m} = 0.5 P_{n-1,m+1} + 0.5 P_{n-1,m-1} I(m&amp;gt;1)
    $$
with initial condition 
    $$
        P_{0,m} = I(m=m_0),
    $$
where $I$ is the indicator function. 
As I mentioned in my book &lt;em&gt;Statistics Thinkings&lt;/em&gt; and other similar posts on my blog,
there are several ways (e.g., moment generating function) to solve for $P_{n,m}$. 
A pratical way is write a program to do this. &lt;/p&gt;
&lt;p&gt;I recently learned C++11, so I wrote a program in C++11 to solve this problem just for practice. 
The core code is just a recursive function. 
Though recursive algorithms are convenient, they are usually not efficient. 
A simple way to improve the speed of recursive algorithm is to use cache. 
In my code, I used a ordered map to store previous calculated probabilities 
to avoid duplicated computations. Since the code uses the standard library of C++11, 
it has to be compiled with option &lt;code&gt;-std=c++0x&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;final_money&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;final_money&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;double&lt;/span&gt; &lt;span class="nx"&gt;hit_probability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;final_money&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;hp_table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;hp_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;final_money&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hp_table.find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hp_key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nx"&gt;hp_table.end&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;step&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;final_money&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nx"&gt;init_money&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;hp_table&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hp_key&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = 1;
            return 1;
        }
        hp_table&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hp_key&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = 0;
        return 0;
    }
    double p = 0.5 * hit_probability(init_money, step - 1, final_money + 1);
    if(final_money&amp;gt;1){
        p += 0.5 * hit_probability(init_money, step - 1, final_money - 1);
    }
    hp_table&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hp_key&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = p;
    return p;
}

double lose_probability(int init_money, int step){
    double p = 0;
    for(int i=0; i&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;=step; ++i){
        p += hit_probability(init_money,i,0);
    }
    return p;
}

int main(){
    int init_money;
    int step;
    double p;
    cout&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;quot;Please type in the initial amount of money:&amp;quot;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;cin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt;init_money;
    cout&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;quot;Please type in the stop step:&amp;quot;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;cin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt;step;
    p = lose_probability(init_money,step);
    cout&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;quot;The probablity to lose all money is: &amp;quot;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="cache"></category><category term="C++"></category><category term="simulation"></category><category term="statistics"></category><category term="map"></category><category term="probability"></category><category term="recursive"></category><category term="condition"></category><category term="fun problems"></category><category term="hash table"></category></entry><entry><title>Basketball Player</title><link href="http://lisafly.github.io/blog/basketball-player/" rel="alternate"></link><updated>2013-10-30T15:40:01-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/basketball-player/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/basketball-player/basketball.jpg" 
height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose a basketball player make $N$ shots,
and we know that in the first $n(\le N)$ shots he sinked $m(\le n)$ shots.
If from the $(n+1)^{th}$ shot, 
his ratio of sink a shot is his accumulative ratio before the shot,
e.g., suppose he sinked 40 shots in the first 50 shots,
then his ratio of sink the next shot is 80%.
What's the probability that he will make $M$ shots finally?&lt;/p&gt;
&lt;p&gt;Using the knowledge of permutation and combination, we can solve this problem directly.
Let $E_{m,n}$ be the event that $m$ success in the first $n$ shots.
It turns out to be that&lt;/p&gt;
&lt;p&gt;$$
P\left( E_{M,N}\mid E_{m,n}\right)
=\frac{ {N-M-1 \choose n-m-1} }{ {N-1 \choose n-1} } ,\ m\le M\le N-(n-m).
$$&lt;/p&gt;
&lt;p&gt;Notice that&lt;/p&gt;
&lt;p&gt;$$
P\left( E_{M,N}\mid E_{1,2}\right)=\frac{1}{N-1},\ 1\le M\le N-1.
$$&lt;/p&gt;
&lt;p&gt;i.e., the number of sinked shots $M$ is uniformly distributed on its support
given that the player only sinked 1 shot in the first 2 shots.&lt;/p&gt;
&lt;p&gt;Let $X_k, n\le k\le N$ be the number of shots the player sinks in the first $k$ shots,
then the distribution of $X_{k+1}$ conditioning on $X_{k}$ is given in &lt;a href="http://dclong.github.io/media/basketball-player/table.pdf"&gt;Table 1&lt;/a&gt;.
Using the similar method as we've done in the first 3 problems,
we can easily find the first and second moment of $X_k$ which are given below:&lt;/p&gt;
&lt;p&gt;$$
E(X_k\mid E_{m,n})=k\frac{m}{n},\ n\le k\le N;
$$&lt;/p&gt;
&lt;p&gt;$$
E(X_k^2)=(k+1)k\frac{(m+1)m}{(n+1)n}-k\frac{m}{n},\ n\le k\le N.
$$&lt;/p&gt;
&lt;p&gt;So the variance of $X_k$ is&lt;/p&gt;
&lt;p&gt;$$
Var(X_k)=EX_k^2-\left( E X_k\right)^2=k(k-n)\frac{m(n-m)}{n^2(n+1)},\ n\le k\le N.
$$&lt;/p&gt;
&lt;p&gt;From the above formulas, we can know that the expectation and variance
of the number of sinked shots are linear quadratic functions of $k$ respectively,
and both of them increase as $k$ increases.
This makes it hard for us to predict $X_k$ when $k$ is big.
The 2-$\sigma$ intervals for $X_k$ is shown in the follow figure. &lt;/p&gt;
&lt;p&gt;&lt;img src="http://legendu.net/media/basketball-player/interval.png" 
height="200" width="240" align="middle"/&gt;
&lt;!---
&lt;img alt="a picture" src="http://legendu.net/media/basketball-player/interval.png" /&gt; 
--&gt;&lt;/p&gt;
&lt;p&gt;Since we know the distribution of the number of sinked shots 
given that the player sinked $m$ shots in the first $n$ shots,
we can calculate the first and second moments directly, 
which yields the following equations:&lt;/p&gt;
&lt;p&gt;$$
\sum_M \frac{ {N-M-1 \choose n-m-1} }{ {N-1 \choose n-1} }=1;
$$&lt;/p&gt;
&lt;p&gt;$$
\sum_M M\frac{ {N-M-1 \choose n-m-1} }{ {N-1 \choose n-1} }=N\frac{m}{n};
$$&lt;/p&gt;
&lt;p&gt;$$
\sum_M M^2\frac{ {N-M-1 \choose n-m-1} }{ {N-1 \choose n-1} }=(k+1)k\frac{(m+1)m}{(n+1)n}-k\frac{m}{n}.
$$&lt;/p&gt;</summary><category term="statistics"></category><category term="condition"></category><category term="probability"></category><category term="fun problems"></category></entry><entry><title>Which One Is the Best Strategy? (continued)</title><link href="http://lisafly.github.io/blog/best-strategy-2/" rel="alternate"></link><updated>2013-10-30T15:13:01-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/best-strategy-2/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pattern/coin.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose we flip a coin which has probability 0.7 to be head again 
and again and two people choose two different sequences of length 3 (e.g., THH). 
The people whose sequence appears first wins. 
If you are allowed to choose first, which sequence will you choose?&lt;/p&gt;
&lt;p&gt;I discussed about the following interesting probability problem in my post 
&lt;a href="http://dclong.github.io/en/blog/best-strategy/"&gt;Which One is the Best Strategy?&lt;/a&gt; before.
I mentioned that there are better ways to solve this problem. 
I will talk about these methods here. &lt;/p&gt;
&lt;p&gt;In this problem, we have to calculate the probabilities for two given sequences to come out first. 
There are at least two ways to do this. 
The first way is to use Markov Chain, which is simple and direct. 
As long as we can write down the transition matrix,
we can calculate the limiting probabilities in various ways.
Since this process is similar to Example ??, I will just skip it here. 
The other way is by introducing a new random variable $M = min{X_1 , X_2 }$, 
where $X_1$ and $X_2$ are the steps needed for the two patterns to first come out. 
Conditioning on the event $E_1 \equiv \text{pattern 1 comes out first}$, 
we get an equation involves $P_1 \equiv P (E_1 )$, $E(M )$ 
and the expected time for some patterns (pattern 1, pattern 2 and probably some new patterns) to occur. 
Similarly, conditioning on the event $E_2 \equiv \text{pattern 2 comes out first}$, 
we get an equation involves $P_2 \equiv P (E_2 )$, $E(M )$
and the expected time of some patterns (pattern 1, pattern 2 and probably
some new patterns) to occur. 
In addition, we have the constraint $P_1 + P_2 = 1$. 
I have already talked about how to calculate the expected time for a sequence to occur 
in the post &lt;a href="http://dclong.github.io/en/blog/how-long-observe-pattern/"&gt;How Long Does It Take to Observe a Sequence?&lt;/a&gt;,
so what we have to do is just to solve a group of linear equations. &lt;/p&gt;
&lt;p&gt;Before doing any calculation, I guess many people will choose pattern "HHH". 
However, this pattern is beaten by "THH". 
There's an easy way to show this. 
Suppose we first observe sequence HHH at step $n(&amp;gt;3)$, 
then the outcome must be "T" at step $n − 3$,
which means that we have observed "THH" at step $n − 1$. 
So for "HHH" to win against "THH", it must appear at step 3. 
So the probability for "HHH" to beat "THH" is $0.7^3 = 0.343 &amp;lt; 0.5$, 
i.e. "HHH" is not as good as "THH".
This method is very neat, but unfortunately it does not work for all pairs of patterns. 
To compare other pairs of patterns, 
we can use function "PatternFirstComeOurProbability" in the code of the post 
&lt;a href="http://dclong.github.io/en/blog/how-long-observe-pattern/"&gt;How Long Does It Take to Observe a Sequence?&lt;/a&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;343&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;657&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the above result we can see that the chance for pattern "HHH" to beat
pattern "THH" is $343/1000 = 0.343 &amp;lt; 0.5$ which matches the results I got
before.&lt;/p&gt;
&lt;p&gt;Now we already know that pattern "HHH" is beaten by pattern "THH". 
A nature question people might ask is that cannot pattern "THH" beat all other
patterns? The answer is no, and actually there's no pattern which can beat all
other patterns in this problem. 
The following Mathematica code will help us
to calculate the probability for a pattern to come our first when compared to
some other pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;patterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tuples&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;ProbMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]]},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}];&lt;/span&gt;
        &lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
        &lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;AppendTo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
    &lt;span class="n"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Drop&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
    &lt;span class="n"&gt;Flatten&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;]]]]]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringJoin&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;IntegerString&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;TableForm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TableHeadings&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;AppendTo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Min&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result of the above code is presented in 
&lt;a href="http://dclong.github.io/media/pattern/pattern-first-out-probability.pdf"&gt;Table 1&lt;/a&gt;. 
From Table 1, we can see
that none of the 8 rows has values that're all at least 0.5, which means that none
of the 8 patterns can beat all other patterns. 
Though we cannot find a pattern
which can always give you a higher chance to win against other patterns, we still
have to make a decision. Suppose we have to let our competitor know which
pattern we choose , and he/she is smart enough (which means that he/she will
always make the best choice based the pattern we choose), we want to choose
the pattern which yields highest winning probability. So we have to choose
the pattern which is the best (yields the highest winning probability) in the
worst situation. This is kind of like the Mini-Max rule in decision theory. The
following Mathematica code help us find the right pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;Flatten&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;All&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ProbMatrix&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;All&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]]]]]]&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if the other player is smart enough, we should choose pattern "THH".
Though in this problem we only compare two patterns at a time, function
"PatternFirstComeOurProbability" can handle the case when multiple patterns
are involved. For example, suppose 3 people are in this game and they choose
pattern "THH", "HHH" and "TTT" respectively. Running function 
"PatternFirstComeOurProbability" in Mathematica yields the following result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;30441&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;418509&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;727000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;343&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5913&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;72700&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;4.18721&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.575666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.343&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0813343&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is the probabilities for the 3 people to win are about 0.576, 0.343 and 0.081
respectively.
Indeed function "PatternFirstComeOurProbability" is powerful, but it also
has a limitation. It might give us wrong results when patterns with different
lengths are compared with function PatternFirstComeOurProbability. 
For example, pattern "HT" will definitely appear before pattern "HHTH", however,
function PatternFirstComeOurProbability doesn't give us the right answer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These kind of situations are easy to handle. A always safe way compare patterns
with differen lengths is to change the problem to one in which all patterns have
the same length. For example, instead of letting function PatternFirstComeOur-
Probability compare patterns "HH" and "HTH", we can let it compare patterns
"HHT", "HHH" and "HTT".
Based on the above idea, it's easy to write a function which is able to handle
all situations, however, this is trivia and I don't think it's worth my time. Time
is finite while knowledge is infinite. We should spend time on more valuable
things.&lt;/p&gt;
&lt;p&gt;Actually we've killed multiple birds with one stone in this problem. We can
also calculate the expected time for a pattern to show up, given that some
other pattern has already occurred, 
see function PatternAdditionalExpected Time. 
However, this function have a similar issue as function PatternFirst-
ComeOurProbability has. And what's more, we have to carefully define what
"addition step needed" means.&lt;/p&gt;</summary><category term="Mathematica"></category><category term="pattern"></category><category term="Markov chain"></category><category term="statistics"></category><category term="probability"></category><category term="sequence"></category><category term="coin"></category><category term="fun problems"></category></entry><entry><title>Which One is the Best Strategy?</title><link href="http://lisafly.github.io/blog/best-strategy/" rel="alternate"></link><updated>2013-10-30T11:16:54-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/best-strategy/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pattern/coin.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Another interesting problem I met in statistic is: 
suppose we flip a coin which has probability 0.7 to be head again and again 
and two people choose two different sequences of length 3 (e.g. THH). 
The people whose sequence appears first wins. 
If you're allowed to choose first, which sequence will you choose?&lt;/p&gt;
&lt;p&gt;I guess most people will choose sequence HHH. 
However, this sequence is beaten by THH. 
Suppose we first observe sequence HHH at step $n(&amp;gt;3)$, 
then the outcome must be T at step $n-3$, 
which means that we have observed THH at step $n-1$. 
So for HHH to win against THH, 
it must appear at step 3. 
So the probability for HHH to beat THH is 0.7^3=0.343&amp;lt;0.5, 
i.e., HHH is not as good as THH.&lt;/p&gt;
&lt;p&gt;A nature question is that does there exist a best choice in this problem? 
The answer is no. 
I have done simulations in MATLAB to find the probability for a sequence to beat another. 
The simulation result shows that none of the 8 sequence can beat all other choices, 
which means that there is no benefit to choose a sequence first.&lt;/p&gt;
&lt;p&gt;Talking about the probability for one sequence to come out first against another one, 
there is a much better solution rather than simulation. 
I will make post about this good solution later.&lt;/p&gt;</summary><category term="pattern"></category><category term="Markov chain"></category><category term="statistics"></category><category term="sequence"></category><category term="coin"></category><category term="stochastic"></category><category term="martingale"></category><category term="fun problems"></category><category term="MATLAB"></category></entry><entry><title>The Sum and Product Puzzle</title><link href="http://lisafly.github.io/blog/the-sum-and-product-puzzle/" rel="alternate"></link><updated>2013-10-30T10:05:50-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/the-sum-and-product-puzzle/</id><summary type="html">&lt;p&gt;I talked about an interesting problem &lt;a href="http://legendu.net/en/blog/sun-bin-pang-juan/"&gt;in this post&lt;/a&gt;.
I had onsite-inteviews from Wolfram at the end of April this year,
and I decided to talk how to solve the problem using Mathematica.
I did some research and realized that the problem is a well-known one
which is called the &lt;em&gt;Sum and Product Puzzle&lt;/em&gt; (aka the &lt;em&gt;Impossible Puzzle&lt;/em&gt;). 
The &lt;em&gt;Sum and Product Puzzle&lt;/em&gt; has several different versions. 
I reframe the one mentioned in my previous post as follows.&lt;/p&gt;
&lt;p&gt;Two numbers (not necessarily unique) between 2 and 99 are chosen. 
The sum of them is told to Sam and the product of them is told to Peter .&lt;/p&gt;
&lt;p&gt;Sam: "Now I don't know what the 2 numbers are, 
but I'm sure you don't know either."&lt;/p&gt;
&lt;p&gt;Peter: "I have to thank you for the information, 
because I did have no idea of what the 2 numbers are, 
but now I already know."&lt;/p&gt;
&lt;p&gt;Sam: "Now the same here."&lt;/p&gt;
&lt;p&gt;Question: what are the two numbers?&lt;/p&gt;
&lt;h2&gt;Notations&lt;/h2&gt;
&lt;p&gt;R: range of the 2 numbers, which is {2,3,. . . ,99} in this case&lt;/p&gt;
&lt;p&gt;x0 , y0: a (the) solution to the Puzzle&lt;/p&gt;
&lt;h2&gt;Mathematical Information Hidden in Words&lt;/h2&gt;
&lt;p&gt;"Now I don't know what the 2 numbers are, 
but I'm pretty sure you don't know either." &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$\exists$ multiple pairs of $x, y\in R$ such that $x+y=x_0+y_0$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each pair of $x,y\in R$ such that $x+y=x_0+y_0$, 
$\exists$ multiple pairs of $x',y'\in R$ such that $x'\times y'=x \times y$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's called the above conditions set I.&lt;/p&gt;
&lt;p&gt;"I have to thank you for the information, 
because I did have no idea of what the 2 numbers are, 
but now I already know."&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$\exists$ multiple pairs of $x, y\in R$ 
such that $x\times y=x_0\times y_0$ (already in conditions set I). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Among all pairs $x,y\in R$ such that $x\times y=x_0\times y_0$, 
$\exists$ an unique pair satisfying conditions set I. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's called the above conditions set II.&lt;/p&gt;
&lt;p&gt;"Now the same here"&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$\exists$ multiple pairs of $x, y\in R$ 
such that $x+y=x_0+y_0$ (already in conditions set I). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Among all pairs $x,y\in R$ such that $x+y=x_0+y_0$, 
$\exists$ an unique pair satisfying conditions set II. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's called the above conditions set III.&lt;/p&gt;
&lt;h2&gt;Algorithm to Solve the Sum and Product Puzzle&lt;/h2&gt;
&lt;p&gt;A/The solution (pair of $x_0$ and $y_0$) 
must satisfies conditions set I, II and III at the same time. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Construct all possible combinations of $x,y\in R$. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select pairs (among all possible pairs) that satisfy conditions set I, II and III at the same time. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Code for the Sum and Product Puzzle&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TwoAddends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s_Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range_List&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
   &lt;span class="n"&gt;upper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
   &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]}]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;TwoFactors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p_Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range_List&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
   &lt;span class="n"&gt;upper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
   &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Divisors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sqrt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pair_List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range_List&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;candidates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwoAddends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Apply&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;And&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TwoFactors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Times&lt;/span&gt; &lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;P1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pair_List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range_List&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Times&lt;/span&gt; &lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;candidates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwoFactors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Boole&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pair_List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range_List&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;candidates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwoAddends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Boole&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;P1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt; &lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;SumProductPuzzle&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;range_List&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="n"&gt;lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
   &lt;span class="n"&gt;upper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
   &lt;span class="n"&gt;candidates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flatten&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;candidates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;P1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;Run the function &lt;code&gt;SumProductPuzzle&lt;/code&gt; to find a/the solution to the puzzle.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SumProductPuzzle&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Some Discussions about the Sum and Product Puzzle&lt;/h2&gt;
&lt;p&gt;It's of great interest to find all ranges of the form $[2, U]$
such that there's an unique solution to the puzzle in these ranges.&lt;/p&gt;
&lt;p&gt;Use the following code to do computation in parallel&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DistributeDefinitions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TwoAddends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TwoFactors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;P1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SumProductPuzzle&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;rr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ParallelSubmit&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;SumProductPuzzle&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}]],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="n"&gt;WaitAll&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;The solution depends on the range (can have no, unique or multiple answers).&lt;/li&gt;
&lt;li&gt;An unique solution exists for [2, 62] to [2, 500+].&lt;/li&gt;
&lt;/ol&gt;</summary><category term="puzzle"></category><category term="Mathematica"></category><category term="math"></category><category term="Work"></category><category term="fun problems"></category></entry><entry><title>Probability to Get a Complete Deck of Cards?</title><link href="http://lisafly.github.io/blog/chance-complete-decks-poker/" rel="alternate"></link><updated>2013-10-30T10:01:10-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/chance-complete-decks-poker/</id><summary type="html">&lt;p&gt;&lt;img src="http://legendu.net/media/poker/poker.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose a poker games requires 4 decks of poker.
After the game, the cards are put back into the 4 decks randomly.
Now there is another game which requires only 1 deck of poker,
so we want to open some decks of the poker and find a complete set of cards.
Since people are lazy, 
we do not want to open all the 4 decks of poker.
If we open 2 decks of cards, 
what is the probability that we can get a complete set of cards?&lt;/p&gt;
&lt;p&gt;It is hard to solve this specific problem directly.
The viewpoint of treating a deck of cards as a whole is especially a barrier for solving this problem.
Here is the fancy idea.
We can generalize this problem as follows.
Suppose there are $N$ distinct cards in a deck of poker.
Now $M$ decks of pokers are mixed together and then put back.
If we draw $n$ cards randomly,
what is the probability that we get $m$ types (cards of the same color and suit are consider to be the same type) of cards?
Now to answer the question that how much chance we can get a complete set of cards if we open $k$ decks of poker,
we just need to calculate the probability of getting $N$ types of cards,
if we draw $kN$ cards randomly from these mixed cards.&lt;/p&gt;
&lt;p&gt;Let's use $A_{n,m}$ to stand for the event of getting $m$ types of cards when $n$ cards are randomly drawn,
and $P_{n,m}\equiv P(A_{n,m})$.
Then conditioning on the number of types of cards we get in the first $n-1$ draws,
we have the following recursion formula
    $$
    P_{n,m}=P_{n-1,m}\frac{mM-n+1}{NM-n+1}+P_{n-1,m-1}\frac{(N-m+1)M}{NM-n+1}.
    $$
We can find a formula for general terms using method of generating functions.
Since there are two subscript changing at the same time,
it's much harder to solve this recursion formula.
However, as I mentioned before, we've actually solved the problem from
practical view because we have recursion formula and we know initial the values.
We can write a program to help us solve this problem.
Here is an implementation in &lt;a href="http://legendu.net/media/poker/pghyper.nb"&gt;Mathematica&lt;/a&gt;.
(You need Mathematica to open the file, 
if not you can check this &lt;a href="http://legendu.net/media/poker/pghyper.txt"&gt;text version of the code&lt;/a&gt;.)
And here is another implementation in &lt;a href="http://legendu.net/media/poker/pghyper.r"&gt;R&lt;/a&gt;.
The result from Mathematica are presented below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.19323&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0190881&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GeneralizedHyperGeometryProbability&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.820296&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the above result,
we can see that in the original problem the probability 
is only about $2\%$ for us to get a complete set of cards
if we only open 2 decks of pokers 
while the probability is about $82\%$ if we open one more deck of poker (i.e. open 3 decks of pokers).
So for a really lazy person, it seems that to open 3 decks of poker is a good choice.
Let $f(k)=P_{54k,54}, k=1,\ldots, 4$.
The above result also suggests us that function $f(k)$ is a very odd function.
It is small when $k$ is smaller and then suddenly increases to a (relative) very big value,
and then it increases mildly to 1.
Now suppose there are 20 decks of poker (each has 54 cards) involved,
let's see how function $f(k)=P_{54k,54}$, $k=1,\ldots, 20$, behaves.
The plot of the function $f(k)=P_{54k,54}$, $k=1,\ldots, 20$, 
is shown is in the following figure. 
We can see that for very small $k$, $f(k)$ is very small;
then $f(k)$ increase dramatically to a (relative) very big value and then it increase mildly to 1.
For other number of decks of poker, $f(k)$ has similar properties.
So in this kind of problems, definitely we will not have a big probability to success if open 1 or 2
decks of poker. However, we do not have to open too many decks of poker, e.g., 4 or 5 decks would
yield a remarkable success probability even if many (e.g., 100) decks of pokers are involved.
&lt;img alt="Probability" src="http://legendu.net/media/poker/probability.png" /&gt;&lt;/p&gt;</summary><category term="statistics"></category><category term="recursion"></category><category term="probability"></category><category term="Mathematica"></category><category term="fun problems"></category></entry><entry><title>Expected Gain of Tossing a Dice</title><link href="http://lisafly.github.io/blog/dice-expected-gain/" rel="alternate"></link><updated>2013-10-30T09:37:39-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-30:blog/dice-expected-gain/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/dice/dice.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose you toss a symmetric dice. 
You are allowed to quit the game and
get money which equals the total points you get at any time if 6 has never
showed up. Whenever 6 shows up, the game is over and you get nothing. For
example, if the first three tosses turn out to be 2, 3 and 5 you can quit the
game immediately and gain 10 dollars or you can choose to continue the game.
What is the expected gains of this game?&lt;/p&gt;
&lt;p&gt;First we have to decide how to play the game, i.e. when to quit the game.
Suppose $T$ is the total points we get now.
If we choose to continue the game, the distribution of our profit is presented in &lt;a href="http://dclong.github.io/media/dice/tables.pdf"&gt;Table 1&lt;/a&gt;.
So our net profit is $\frac{15-T}{6}$ if we choose to continue the game,
which suggests us quit the game when $T\ge15$.
Let's use $W$ to denote the final gain in this game,
then $W$ can be either 0 or some element in $A\equiv{15, 16, 17, 18, 19}$.
To find the expected gains,
we have to find the distribution of $W$,
i.e. we have to find $P(W=i)$, $i\in A$.
There're at least two ways to do this.
One of them is to use the powerful tool Markov Chain and the other is to use recursion formula.&lt;/p&gt;
&lt;h2&gt;Method I: Markov Chain&lt;/h2&gt;
&lt;p&gt;Let's use ${X_n}$, $n\in \mathbb{N}$ to stand for the total points we get at step $n$.
Let $X_0=0$; $X_k=s$ (just a symbol to avoid confusion with the other states of ${X_n}$) for $k\ge n$ if the tossing result turns out to 6 at step $n$;
$X_k=t$ for $k\ge n$ if $X_n=t\in A$.
It's easy to check that ${X_n}$ is a Markov Chain and its limiting distribution is what we are interested in.
The transition probability matrix of ${X_n}$ is given in &lt;a href="http://dclong.github.io/media/dice/tables.pdf"&gt;Table 1&lt;/a&gt;.
The probabilities that $W=i$ where $i\in A$,
are the probabilities that $X_n$ ends in the corresponding states,
i.e. $lim_n P(X_n=i)$, $i\in A$.
To find these limiting probabilities, we need to find the limit of $P^n$ (actually we only care about the limit property of the second row of the transition matrix since $X_0=0$).
With the help of R, we can easily find these probabilities which are given below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;         &lt;span class="mi"&gt;16&lt;/span&gt;         &lt;span class="mi"&gt;17&lt;/span&gt;         &lt;span class="mi"&gt;18&lt;/span&gt;         &lt;span class="mi"&gt;19&lt;/span&gt;
&lt;span class="mf"&gt;0.13128076&lt;/span&gt; &lt;span class="mf"&gt;0.10092009&lt;/span&gt; &lt;span class="mf"&gt;0.07407628&lt;/span&gt; &lt;span class="mf"&gt;0.04813533&lt;/span&gt; &lt;span class="mf"&gt;0.02337223&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the average gain of this game is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;%*%&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;
&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="mf"&gt;6.153738&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Method II: Recursion Formula&lt;/h2&gt;
&lt;p&gt;Let ${X_n}$, $n\in \mathbb{N}$ and $A$ be the same as in Method I.
Let $E_{t,n}$ be the event that $X_n=t, X_{n-1}&amp;lt;t$ 
and $P_{t,n}\equiv P(E_{t,n})$,
then $P_{t,n}$ stands for the probability that we first achieve total points $t$ at step $n$.
Specially for $t\in A$, $P_{t,n}$ stand for the probability that the game ends with total points at step $n$.
Let $P_t\equiv \sum_{n\ge0} P_{t,n}$, then $P_t$, $t\in A$ are what we're interested in.
Conditioning $E_{t,n}$ on the value $X_{n-1}$ takes, we have the following recursion formula
$$
P_{t,n}=\frac{1}{6}P_{t-1,n-1}+\frac{1}{6}P_{t-2,n-1} +\frac{1}{6}P_{t-3,n-1}\
    +\frac{1}{6}P_{t-4,n-1} +\frac{1}{6}P_{t-5,n-1},\text{ for } 0&amp;lt;t\le 15,\ n\ge1.&lt;br /&gt;
$$&lt;/p&gt;
&lt;p&gt;Because the game is over when $t\ge15$,
we have different formulas for $t&amp;gt;15$ and $n\ge1$&lt;/p&gt;
&lt;p&gt;$$
P_{16,n}=\frac{1}{6}P_{14,n-1}+\frac{1}{6}P_{13,n-1}+\frac{1}{6}P_{12,n-1}+\frac{1}{6}P_{11,n-1},
$$&lt;/p&gt;
&lt;p&gt;$$ P_{17,n}=\frac{1}{6}P_{14,n-1}+\frac{1}{6}P_{13,n-1}+\frac{1}{6}P_{12,n-1}, $$&lt;/p&gt;
&lt;p&gt;$$ P_{18,n}=\frac{1}{6}P_{14,n-1}+\frac{1}{6}P_{13,n-1},$$&lt;/p&gt;
&lt;p&gt;$$ P_{19,n}=\frac{1}{6}P_{14,n-1}.  $$&lt;/p&gt;
&lt;p&gt;It's obvious that $P_{t,0}=0$ for $t&amp;gt;0$.
Sum the above formulas over $n$ from 1 to $\infty$ we have
$$
P_{t}=\frac{1}{6}P_{t-1}+\frac{1}{6}P_{t-2}+\frac{1}{6}P_{t-3}
+\frac{1}{6}P_{t-4}+\frac{1}{6}P_{t-5},\text{ for } 0&amp;lt;t\le 15,
$$&lt;/p&gt;
&lt;p&gt;$$ P_{16}=\frac{1}{6}P_{14}+\frac{1}{6}P_{13}+\frac{1}{6}P_{12}+\frac{1}{6}P_{11}, $$&lt;/p&gt;
&lt;p&gt;$$P_{17}=\frac{1}{6}P_{14}+\frac{1}{6}P_{13}+\frac{1}{6}P_{12},$$&lt;/p&gt;
&lt;p&gt;$$P_{18}=\frac{1}{6}P_{14}+\frac{1}{6}P_{13},$$&lt;/p&gt;
&lt;p&gt;$$P_{19}=\frac{1}{6}P_{14}.$$&lt;/p&gt;
&lt;p&gt;To solve this system, we have to ascertain the initial values.
It's not hard to find values for $P_0,\ldots,P_4$, however,
we can make things even easier by extending the recursion formula forward to term
$P_{-4}$.
Under this extension, the initial conditions for this system are as follows&lt;/p&gt;
&lt;p&gt;$$ P_{-4}=P_{-3}=P_{-2}=P_{-1}=0 \text{ and } P_0=1.  $$&lt;/p&gt;
&lt;p&gt;Now we can find values for $P_t$, $t\in A$ easily.
One way is to use method of generating functions to find the general term for $P_t$ when $t\le15$ and then calculate $P_t$ for $t\in A$.
Another easier way and more practical way is use computer to find these values directly based on these formulas given above.
The implementation in Mathmatica and the corresponding result are as follows. 
Notice that their is a built-in function called &lt;code&gt;LinearRecurrence&lt;/code&gt; in Mathematica which 
does a similar job to the function &lt;code&gt;LinearRecursion&lt;/code&gt; here. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SmallOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The order of the linear recursive equation must be at least 2.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;NotMatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The length of argument &amp;#39;coef&amp;#39; doesn&amp;#39;t match the length of &amp;#39;initial&amp;#39;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ini_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coef_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;irev_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;crev_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;nmax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coefficient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initials&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SmallOrder&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;[]];&lt;/span&gt;
    &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coef&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="n"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;coefficient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
        &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;NotMatch&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
            &lt;span class="n"&gt;coefficient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;irev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;initials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;crev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coefficient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coefficient&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;nmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nmax&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;initials&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]]]];&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nmax&lt;/span&gt;&lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;}]]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;initials&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nmax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}]]].&lt;/span&gt;&lt;span class="n"&gt;coefficient&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;142&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="n"&gt;ini&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;coef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="n"&gt;c3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="n"&gt;c4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="n"&gt;c5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="n"&gt;p11&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;p12&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;p13&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;p14&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;p15&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearRecursion&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;p16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c5&lt;/span&gt; &lt;span class="n"&gt;p11&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c4&lt;/span&gt; &lt;span class="n"&gt;p12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c3&lt;/span&gt; &lt;span class="n"&gt;p13&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c2&lt;/span&gt; &lt;span class="n"&gt;p14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;p17&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c5&lt;/span&gt; &lt;span class="n"&gt;p12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c4&lt;/span&gt; &lt;span class="n"&gt;p13&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c3&lt;/span&gt; &lt;span class="n"&gt;p14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;p18&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c5&lt;/span&gt; &lt;span class="n"&gt;p13&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c4&lt;/span&gt; &lt;span class="n"&gt;p14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;p19&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c5&lt;/span&gt; &lt;span class="n"&gt;p14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;p15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p19&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;gain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;159&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="mi"&gt;2893395172951&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;470184984576&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The implementation in R and the corresponding result are as below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; @param n is the subscript of the array to be calculated&lt;/span&gt;
&lt;span class="s1"&gt;#&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="nx"&gt;ini&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;initial&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="nx"&gt;vector&lt;/span&gt; &lt;span class="nx"&gt;starting&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;term&lt;/span&gt;
&lt;span class="err"&gt;#&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;  &lt;span class="nx"&gt;coef&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;coefficients&lt;/span&gt; &lt;span class="nx"&gt;vector&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;linear&lt;/span&gt; &lt;span class="nx"&gt;recursion&lt;/span&gt; &lt;span class="nx"&gt;equation&lt;/span&gt;
&lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;irev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;crev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;the order of the difference equation must be at least 2.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;the lengths of the coefficents vector and the initial&lt;/span&gt;
&lt;span class="s2"&gt;    values vector must be the same.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nx"&gt;nmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nmax&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;irev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;crev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;nmax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;order&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;nmax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="na"&gt;-order&lt;/span&gt;&lt;span class="p"&gt;):(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;%*%&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;c1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;c3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;c4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;p11&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;p12&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;p13&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;p14&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;p15&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;coef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;p16&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p11&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p12&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p13&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p14&lt;/span&gt;
&lt;span class="nx"&gt;p17&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p12&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p13&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p14&lt;/span&gt;
&lt;span class="nx"&gt;p18&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p13&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p14&lt;/span&gt;
&lt;span class="nx"&gt;p19&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;c5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;p14&lt;/span&gt;
&lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;p16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;p17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;p18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;p19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;gain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="o"&gt;%*%&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;gain&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;6.153738&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can easily generalize this problem by assume the dice to be a nonsymmetric one with $f$ faces having arbitrary points on it.
Both of the two above methods can apply to the generalized problem,
however the second method is simpler for this kind of problems.&lt;/p&gt;</summary><category term="Mathematica"></category><category term="recursion"></category><category term="statistics"></category><category term="probability"></category><category term="Markov chain"></category><category term="fun problems"></category></entry><entry><title>Randomly Select an Integer?!</title><link href="http://lisafly.github.io/blog/integer-probability-measure/" rel="alternate"></link><updated>2013-10-29T17:23:24-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-10-29:blog/integer-probability-measure/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/number/numbers.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I found this "probability" problem when I read a person's blog. &lt;/p&gt;
&lt;p&gt;What's probability that two randomly chosen nature numbers are relatively prime?&lt;/p&gt;
&lt;p&gt;It is claimed that there is a very elegant solution for this problem. 
This problem reminds me another one. 
Some people asked for an example of a 0-probability event 
that is not impossible on &lt;a href="http://legendu.net/en/tag/fun-problems.html"&gt;COS&lt;/a&gt;. 
And a person said "randomly pick an integer from all integers".
While this example sounds like a neat one, 
it is invalid actually. 
The example assumes that there exists a probablity measure on all integers
such that the measure for each integer is that same. 
However, such a probabiliy measure does not exists. 
This is easy to see. 
Suppose the probability measure for each integer is 0, 
then from countable additivity the probability measure for all integers is 0, 
which is contrary to the fact that the probability measure for the whole set is 1. 
Suppose the probability measure for each integer is $\delta&amp;gt;0$, 
then from countable additivity the probability measure for all integers is $\infty$,
which is also contrary to the fact that the probability measure for the whole set is 1.
Coming back to the problem mentioned in the title, 
it essentially makes the assumption there there exists a probability measure on
nature numbers such that each the measure on each number is the same. 
From my previous argument we know such a probability measure does not exist, 
thus this problem is nonsense. 
Bummer! What is the ELEGANT solution? &lt;/p&gt;
&lt;p&gt;A reframed (valid) question is as follows.&lt;/p&gt;
&lt;p&gt;Let $n$ be a (large) positive integer. 
What's the probability that 2 randomly chosen integers 
between (inclusive) 1 and $n$ are relatively prime? 
And does the probability has a limit as $n$ goes to infinity?
If so, what's the limiting probability?&lt;/p&gt;
&lt;p&gt;I will think about how to solve this reframed (valid) question when I have time. 
Possibly the ELEGANT solution mentioned before is a solution to this problem.&lt;/p&gt;
&lt;p&gt;PS: Ask the question that randomly pick an number from all integers, what is the probability
that the number is even. 
I bet most people will answer 0.5.&lt;/p&gt;</summary><category term="random"></category><category term="statistics"></category><category term="nature number"></category><category term="probability"></category><category term="relatively prime"></category><category term="fun problems"></category></entry><entry><title>A Secure Way to Use Vino in Debian</title><link href="http://lisafly.github.io/blog/a-secure-way-to-use-vino-in-debian/" rel="alternate"></link><updated>2013-09-17T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-09-17:blog/a-secure-way-to-use-vino-in-debian/</id><summary type="html">&lt;p&gt;VNC on Linux is not secure. 
Most implementations of VNC servers for Linux allows password only up to 8 characters. 
Such a VNC server is very vulnerable to brute-force attack. 
This article discuss a secure way to use VNC.
The VNC (vino) server is started only when needed,
thus reduce the chance of your server to be hacked.&lt;/p&gt;
&lt;p&gt;First install the vino server in debian using the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wajig&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;vino&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever you want to use VNC on the server, 
follow the steps below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ssh into the server with X11 forwarding enabled. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;servername&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit vino server settings by typing the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vino&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;preference&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will prompt a window for you to edit vino settings. 
Close the window after you are done. 
This step only has to done once and can be skipped 
if you don't want to change the settings.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start the vino server using the following commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=:&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vino&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vino&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect to your server using Remmina.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lock the screen of you Debian/Linux server 
when you have finished using VNC on your server. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop/kill the vino server by hot keys &lt;code&gt;CTRL + C&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="vino"></category><category term="Linux"></category><category term="vnc"></category><category term="network"></category></entry><entry><title>File Name of Bash Script</title><link href="http://lisafly.github.io/blog/file-name-of-bash-script/" rel="alternate"></link><updated>2013-09-13T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-09-13:blog/file-name-of-bash-script/</id><summary type="html">&lt;p&gt;This post discusses the behavior of &lt;code&gt;$0&lt;/code&gt; and &lt;code&gt;BASH_SOURCE&lt;/code&gt; in bash using examples.
I created 3 executable bash files &lt;code&gt;a.sh&lt;/code&gt;, &lt;code&gt;b.sh&lt;/code&gt; and &lt;code&gt;c.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Content of &lt;code&gt;a.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo $0
echo $(readlink -f $0)
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
echo $(readlink -f &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;b.sh&lt;/code&gt; is a symbolic of &lt;code&gt;a.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Content of &lt;code&gt;c.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source a.sh
./a.sh
echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;./a.sh &lt;span class="c"&gt;# run a.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## ./a.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;span class="c"&gt;## ./a.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;a.sh &lt;span class="c"&gt;# source in a.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## bash&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/bash&lt;/span&gt;
&lt;span class="c"&gt;## a.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;./b.sh &lt;span class="c"&gt;# run b.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## ./b.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;span class="c"&gt;## ./b.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;b.sh &lt;span class="c"&gt;# source in b.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## bash&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/bash&lt;/span&gt;
&lt;span class="c"&gt;## b.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;./c.sh &lt;span class="c"&gt;# run c.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## ./c.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/c.sh&lt;/span&gt;
&lt;span class="c"&gt;## a.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;span class="c"&gt;## ./a.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;span class="c"&gt;## ./a.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;span class="c"&gt;## ./c.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;c.sh &lt;span class="c"&gt;# source in c.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## bash&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/bash&lt;/span&gt;
&lt;span class="c"&gt;## a.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;span class="c"&gt;## ./a.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;span class="c"&gt;## ./a.sh&lt;/span&gt;
&lt;span class="c"&gt;## /home/dclong/btsync/dclong/blog/en/knitr/13-09-13/a.sh&lt;/span&gt;
&lt;span class="c"&gt;## c.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="$0"></category><category term="BASH_SOURCE"></category><category term="bash"></category><category term="Linux"></category></entry><entry><title>Fix Microphone Problem of Skype in Debian</title><link href="http://lisafly.github.io/blog/fix-skype-microphone-problem-in-debian/" rel="alternate"></link><updated>2013-08-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-08-21:blog/fix-skype-microphone-problem-in-debian/</id><summary type="html">&lt;p&gt;Install Pulseaudio if you only have ALSA. 
ALSA alone does NOT work with skype whatever people 
on the #Debian channel might think and tell you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pulseaudio&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install pulseaudio volume control&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pavucontrol&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run Skype.&lt;/p&gt;
&lt;p&gt;Go to the Sound devices sections. 
Click on the Open PulseAudio Volume Control button. 
pavucontrol will open.&lt;/p&gt;
&lt;p&gt;In every tab maximize ALL the volume sliders.
Go to the configuration tab. Mine has two sections. 
One is called RV710/730. 
Turn this off in the dropdown menu below it.
The other one is called "Internal Audio". 
Choose "Analog Stereo Duplex" in the dropdown menu.
When you go back to the "Input Devices" tab now, 
you will see that there is an setting for "Internal Audio Analog Stereo". 
Crank this to 100%.
In the "Output Devices" tab, 
choose the "Analog Output" port from the dropdown menu. 
Crank the front left as well as front right channel to the max 100%.&lt;/p&gt;</summary><category term="audio"></category><category term="Software"></category><category term="Linux"></category></entry><entry><title>Ways To Download Files Using Selenium Webdrive</title><link href="http://lisafly.github.io/blog/ways-to-download-files-using-selenium-webdrive/" rel="alternate"></link><updated>2013-08-15T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-08-15:blog/ways-to-download-files-using-selenium-webdrive/</id><summary type="html">&lt;p&gt;Selenium WebDrive cannot have no control of system Dialog, 
so you have to avoid the Dialog when downloading files using WebDrive.&lt;/p&gt;
&lt;p&gt;The first way is to enable automatical download in the browser
that you use with Seleniu WebDrive. 
So when click a file link, 
the file is automatically downloaded to the directory that you set.
The second (and better way) is to export the cookie of the browser,
extract the download link and then use the command &lt;code&gt;wget&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt; to download it. 
Surely you have to use the cookie with &lt;code&gt;wget&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt; if authentication is required on the web.&lt;/p&gt;</summary><category term="Web"></category><category term="WebDrive"></category><category term="automation"></category><category term="Selenium"></category><category term="software"></category></entry><entry><title>Culture of My Summer Intern Team</title><link href="http://lisafly.github.io/blog/team-culture-of-Credit-portfolio-risk-analysis/" rel="alternate"></link><updated>2013-08-01T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-08-01:blog/team-culture-of-Credit-portfolio-risk-analysis/</id><summary type="html">&lt;p&gt;I work as a student intern in the Credit Portfolio Risk Analysis group 
in a bank this summer.
One Friday afternoon,
Jimmy, the manager of my manager, 
asked me to his office and talked about our team cultures.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ownership &lt;br /&gt;
Whenever you have a project, 
you are the ownner. 
Be proud of it, do your best, and make a difference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Teamwork&lt;br /&gt;
The bank wants a strong team rather than strong individuals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom Service&lt;br /&gt;
Custom service is the most important thing for the team.
We need to build good relationships with customs and earn their trust.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knowledge Sharing&lt;br /&gt;
Be willing to share your knowledge with other team members,
and be willing to learn from other team members.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continuous Learning &lt;br /&gt;
"Every night before you go to sleep, 
ask yourself, 
what have I learned today?"
&lt;p align="right"&gt;
-- Jimmy
&lt;/p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="work"></category><category term="office"></category><category term="team culture"></category></entry><entry><title>Missed $600 Ubuntu Edge Superphone</title><link href="http://lisafly.github.io/blog/missed-00-ubuntu-edge-superphone/" rel="alternate"></link><updated>2013-07-25T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-07-25:blog/missed-00-ubuntu-edge-superphone/</id><summary type="html">&lt;p&gt;Canonical is raising fund for Ubuntu Edge superphone. 
I missed the $600 option. 
What a shame! 
I used to read "OMG Ubuntu" every day. 
I'm currently doing intern and thus read Ubuntu news less frequently.&lt;br /&gt;
Again, what a shame!&lt;/p&gt;</summary><category term="Linux"></category><category term="phone"></category><category term="Ubuntu"></category><category term="canonical"></category></entry><entry><title>Ways to Make a Bootable Flash Drive in Linux</title><link href="http://lisafly.github.io/blog/ways-to-make-a-bootable-flash-drive/" rel="alternate"></link><updated>2013-07-13T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-07-13:blog/ways-to-make-a-bootable-flash-drive/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;path_to_linux_image&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;path_to_device&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;path_to_linux_image&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;path_to_device&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to write a hybird Linux image into a flash drive.
Note that you must use the whole device (e.g., /dev/sdb) not just a partition (e.g., /dev/sdb1)
on the device.
For a non-hybrid Linux image, 
you can make it hybid using the following command if it uses isolinux/syslinux technology.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;isohybird&lt;/span&gt; &lt;span class="n"&gt;path_to_linux_image&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Manually copying files to the USB stick.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;`zcat boot.img.gz &amp;gt; /dev/sdX&lt;/li&gt;
&lt;li&gt;Mount the USB stick and copy a iso image to it.&lt;/li&gt;
&lt;li&gt;Umount the USB stick.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the GUI tool &lt;a href="http://unetbootin.sourceforge.net/"&gt;UNetbootin&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the universal online booting tool &lt;a href="http://www.netboot.me/"&gt;netboot.me&lt;/a&gt;.
Note that you must have ethernet connection in order to use netboot.me. 
netboot.me is a fantastic tool for general purposes, 
but it has problems on some old computers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="bootable"></category><category term="flash drive"></category><category term="hybird"></category><category term="USB"></category><category term="Hardware"></category><category term="Linux"></category></entry><entry><title>Some Terminologies In Business Investment</title><link href="http://lisafly.github.io/blog/some-terminology-in-credit-portifolio-risk-management/" rel="alternate"></link><updated>2013-06-23T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-06-23:blog/some-terminology-in-credit-portifolio-risk-management/</id><summary type="html">&lt;h2&gt;Stock Ticker&lt;/h2&gt;
&lt;p&gt;A stock ticker is a report of the price for certain securities, 
updated continuously throughout the trading session by the various stock exchanges. 
A "tick" is any change in price, 
whether that movement is up or down. 
A stock ticker automatically displays these ticks, 
along with other relevant information, 
like volume, 
that investors use to stay informed about current market conditions.&lt;/p&gt;
&lt;p&gt;A limited number of stocks appear on the stock ticker during any particular period, 
due to the large number of stocks that are actually trading at the same time. 
Often, the stocks that have the greatest change in price from the previous day's trading session, 
or those that are trading under the highest volume appear on the stock ticker.&lt;/p&gt;
&lt;p&gt;You may have seen a stock ticker scrolling by at the bottom 
of any financial news networks on television. 
The ticker provides current information for certain stocks, 
including: the ticker symbol (the one to four letter code that represents a particular stock); 
quantity traded (volume for each transaction); 
price, a green "up" arrow if price is higher than the previous day's closing value, 
a red "down" arrow if price is lower than the previous day; 
and the net price change (either as a dollar amount or as a percentage) from the previous day's close. 
If the price is unchanged, 
the arrow may be gray in color or simply absent. 
Often, the ticker symbol and the net price change appear color-coded: 
green if the price is higher than the previous session, red if price is lower.&lt;/p&gt;
&lt;p&gt;Many of today's fully-electronic stock tickers display market data in real-time or with a small delay. 
You can watch stock tickers on a variety of financial news networks, 
and many trading platforms allow you to customize and view stock tickers 
that can be displayed at the bottom of your computer monitor. &lt;/p&gt;
&lt;h2&gt;Personal Consumption Expenditures - PCE&lt;/h2&gt;
&lt;p&gt;A measure of price changes in consumer goods and services. 
Personal consumption expenditures consist of the actual 
and imputed expenditures of households; 
the measure includes data pertaining to durables, non-durables and services. 
It is essentially a measure of goods and services targeted toward individuals and consumed by individuals.&lt;/p&gt;
&lt;p&gt;Also referred to as "consumption."
Investopedia Says &lt;br /&gt;
Investopedia explains 'Personal Consumption Expenditures - PCE'
Similar to the Consumer Price Index (CPI), PCE is a report (actually a part of the personal income report) put out by the Bureau of Economic Analysis of the Department of Commerce. &lt;/p&gt;
&lt;p&gt;There are two broad indexes of consumer prices in the United States: the CPI and the Chain Price Index for Personal Consumption Expenditures (PCEPI). They are similar in many respects, but there are some important differences that can lead to large gaps between CPI and PCEPI inflation rates. The PCEPI uses a chain index, which takes consumers' changing consumption due to prices into account; the CPI uses a fixed basket of goods with weightings that do not change over time.&lt;/p&gt;
&lt;p&gt;The PCE is a fairly predictable report that has little impact on the markets.&lt;/p&gt;
&lt;h2&gt;Beginning Market Value (BMV)&lt;/h2&gt;
&lt;p&gt;The valuation at which the property should exchange at the date of origin, 
and the beginning of each period. 
The beginning market value at the start of every period is equal to 
the ending market value of the previous period.&lt;/p&gt;
&lt;p&gt;The market value is based on what both the buyer and seller (effectively, the market), 
deem the true value of the property to be. 
Market value is similar to market price given that the market remains efficient 
and the players are rational.&lt;/p&gt;
&lt;h2&gt;Ending Market Value (EMV)&lt;/h2&gt;
&lt;p&gt;The value of an investment at the end of the investment period. 
Ending market value (EMV) is calculated by taking the beginning market value 
and adding the interest earned over the course of the investment. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Ending&lt;/span&gt; &lt;span class="n"&gt;Market&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Beginning&lt;/span&gt; &lt;span class="n"&gt;Market&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Interest&lt;/span&gt; &lt;span class="n"&gt;Rate&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt; 
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Beginning&lt;/span&gt; &lt;span class="n"&gt;market&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Interest&lt;/span&gt; &lt;span class="n"&gt;Rate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="n"&gt;EMV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is an important equation to consider when choosing an investment 
as the time value of money can be a valuable decision-making variable.&lt;/p&gt;
&lt;h2&gt;Fair Market Value (FMV)&lt;/h2&gt;
&lt;p&gt;The price that a given property or asset would fetch in the marketplace, 
subject to the following conditions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prospective buyers and sellers are reasonably knowledgeable about the asset; 
they are behaving in their own best interests and are free of undue pressure to trade.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A reasonable time period is given for the transaction to be completed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given these conditions, 
an asset's fair market value should represent an accurate valuation or assessment of its worth.&lt;/p&gt;
&lt;p&gt;Fair market values are widely used across many areas of commerce. 
For example, 
municipal property taxes are often assessed based on the fair market value of the owner's property. 
Depending upon how many years the owner has owned the home, 
the difference between the purchase price and the residence's fair market value can be substantial.&lt;/p&gt;
&lt;p&gt;Fair market values are often used in the insurance industry as well. 
For example, when an insurance claim is made as a result of a car accident, 
the insurance company covering the damage to the owner's vehicle will usually cover damages 
up to the fair market value of the automobile.&lt;/p&gt;
&lt;h2&gt;Capital Appreciation&lt;/h2&gt;
&lt;p&gt;A rise in the value of an asset based on a rise in market price. 
Essentially, 
the capital that was invested in the security has increased in value, 
and the capital appreciation portion of the investment includes all of the market value 
exceeding the original investment or cost basis. 
Capital appreciation is one of the two main sources of investment returns, 
with the other being dividend or interest income.&lt;/p&gt;
&lt;p&gt;For example, 
say you purchase a share for $10, 
which pays a dividend of a $1 per share each year, 
and is now trading at $15 per share a year later. 
Your capital appreciation in the investment is $5, 
or 50%, 
as the price of the share has increased $5 over your purchase price or cost basis. 
Your interest income return is $1, 
or 10%, 
for a total return on the shares is $6 or 60%.&lt;/p&gt;
&lt;p&gt;Capital appreciation is often a stated investment goal of many mutual funds. 
These funds look to find investments that will rise in value 
based on increased earnings or other fundamental metrics. 
Investments targeted for capital appreciation tend have more risk 
than assets chosen for capital preservation and income generation, 
such as government, municipal bonds, or dividend-paying stocks. 
Because of this, 
capital appreciation funds are considered appropriate for risk-tolerant investors.&lt;/p&gt;
&lt;h2&gt;Mutual Fund&lt;/h2&gt;
&lt;p&gt;An investment vehicle that is made up of a pool of funds 
collected from many investors for the purpose of investing in securities 
such as stocks, bonds, money market instruments and similar assets. 
Mutual funds are operated by money managers, 
who invest the fund's capital and attempt to produce capital gains and income 
for the fund's investors. 
A mutual fund's portfolio is structured and maintained to match the investment objectives 
stated in its prospectus.&lt;/p&gt;
&lt;p&gt;One of the main advantages of mutual funds is that they give small investors access 
to professionally managed, diversified portfolios of equities, bonds and other securities, 
which would be quite difficult (if not impossible) to create with a small amount of capital. 
Each shareholder participates proportionally in the gain or loss of the fund. 
Mutual fund units, or shares, are issued and can typically be purchased or redeemed 
as needed at the fund's current net asset value (NAV) per share, 
which is sometimes expressed as NAVPS.&lt;/p&gt;
&lt;h2&gt;Security&lt;/h2&gt;
&lt;p&gt;A financial instrument that represents: 
an ownership position in a publicly-traded corporation (stock), 
a creditor relationship with governmental body or a corporation (bond), 
or rights to ownership as represented by an option. 
A security is a fungible, negotiable financial instrument 
that represents some type of financial value. T
he company or entity that issues the security is known as the issuer. &lt;/p&gt;
&lt;p&gt;For example, 
the issuer of a bond issue may be a municipal government raising funds 
for a particular project. 
Investors of securities may be retail investors 
(those who buy and sell securities on their own behalf and not for an organization) 
and wholesale investors 
(financial institutions acting on behalf of clients or acting on their own account). 
Institutional investors include 
investment banks, pension funds, managed funds and insurance companies.&lt;/p&gt;
&lt;p&gt;Securities are typically divided into debt securities and equities. 
A debt security is a type of security that represents money that is borrowed 
that must be repaid, 
with terms that define the amount borrowed, 
interest rate and maturity/renewal date. 
Debt securities include government and corporate bonds, 
certificates of deposit (CDs), 
preferred stock and collateralized securities (such as CDOs and CMOs). &lt;/p&gt;
&lt;p&gt;Equities represent ownership interest held by shareholders in a corporation, 
such as a stock. 
Unlike holders of debt securities who generally receive only interest 
and the repayment of the principal, 
holders of equity securities are able to profit from capital gains. &lt;/p&gt;
&lt;p&gt;In the United States, 
the U.S. Securities and Exchange Commission (SEC) 
and other self-regulatory organizations 
(such as the Financial Industry Regulatory Authority) 
regulate the public offer and sale of securities.&lt;/p&gt;
&lt;h2&gt;Principal&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The amount borrowed or the amount still owed on a loan, separate from interest. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The original amount invested, separate from earnings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The face value of a bond.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The owner of a private company.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The main party to a transaction, 
acting as either a buyer or seller for his/her own account and risk. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Be sure to take into account the context in which this term is used, 
as the exact meaning of the term has many variations. &lt;/p&gt;
&lt;p&gt;Also referred to as "corpus."&lt;/p&gt;
&lt;h2&gt;Hedge Fund&lt;/h2&gt;
&lt;p&gt;An aggressively managed portfolio of investments 
that uses advanced investment strategies 
such as leveraged, long, short and derivative positions 
in both domestic and international markets 
with the goal of generating high returns 
(either in an absolute sense or over a specified market benchmark).&lt;/p&gt;
&lt;p&gt;Legally, hedge funds are most often set up as private investment partnerships 
that are open to a limited number of investors 
and require a very large initial minimum investment. 
Investments in hedge funds are illiquid 
as they often require investors keep their money in the fund for at least one year.&lt;/p&gt;
&lt;p&gt;For the most part, 
hedge funds (unlike mutual funds) are unregulated 
because they cater to sophisticated investors. 
In the U.S., laws require that the majority of investors in the fund be accredited. 
That is, 
they must earn a minimum amount of money annually 
and have a net worth of more than $1 million, 
along with a significant amount of investment knowledge. 
You can think of hedge funds as mutual funds for the super rich. 
They are similar to mutual funds in that investments are pooled and professionally managed, 
but differ in that the fund has far more flexibility in its investment strategies.&lt;/p&gt;
&lt;p&gt;It is important to note that hedging is actually the practice of attempting to reduce risk, 
but the goal of most hedge funds is to maximize return on investment. 
The name is mostly historical, 
as the first hedge funds tried to hedge against the downside risk of a bear market 
by shorting the market 
(mutual funds generally can't enter into short positions as one of their primary goals). 
Nowadays, 
hedge funds use dozens of different strategies, 
so it isn't accurate to say that hedge funds just "hedge risk". 
In fact, because hedge fund managers make speculative investments, 
these funds can carry more risk than the overall market.&lt;/p&gt;
&lt;h2&gt;Total Return&lt;/h2&gt;
&lt;p&gt;When measuring performance, 
the actual rate of return of an investment or a pool of investments 
over a given evaluation period. 
Total return includes interest, capital gains, dividends and distributions 
realized over a given period of time.&lt;/p&gt;
&lt;p&gt;Total return accounts for two categories of return: income and capital appreciation. 
Income includes interest paid by fixed-income investments, 
distributions or dividends. 
Capital appreciation represents the change in the market price of an asset.&lt;/p&gt;
&lt;h2&gt;Distribution&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When trading volume is higher than that of the previous day without any price appreciation. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The removal of assets from a retirement account. 
The assets are then paid to the retirement account owner or beneficiary. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A company's payment of cash, stock or physical products to its shareholders. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributions of income and capital gains 
that mutual funds make to their investors periodically during a calendar year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A market that is in distribution has already hit its apex and is expected to decline. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The retirement account owner (or beneficiary) may be required to pay income tax 
on distributions received during the year. 
Early-distribution penalties may also apply 
if the distribution occurs while the retirement account owner is under the age of 59.5. 
While distributions from IRAs can occur at any time, 
certain requirements must be met before distributions can occur from qualified plans, 
457 plans and 403(b) accounts. 
Participants must check with their employers regarding the rules of the plan. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The income that is generated from an investment trust is given 
to investors through monthly or quarterly distributions. 
In this manner, distributions are similar to stock dividends; 
however, they usually offer much higher yields of up to 10% a year. 
The distributions received reduce a trust's taxable income and, 
therefore, little or no income tax is paid. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutual funds pay out interest and dividend income received 
from their portfolio holdings as dividends (income distribution) to fund shareholders. 
In addition, capital gains from the portfolio's trading activities 
are generally paid out (capital gains distribution) at the end of the year.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Junk Bond (Speculative Investment)&lt;/h2&gt;
&lt;p&gt;A colloquial term for a high-yield or non-investment grade bond. 
Junk bonds are fixed-income instruments that carry a rating of 'BB' or lower 
by Standard &amp;amp; Poor's, 
or 'Ba' or below by Moody's. 
Junk bonds are so called because of their higher default risk 
in relation to investment-grade bonds. &lt;/p&gt;
&lt;p&gt;Junk bonds are risky investments, 
but have speculative appeal because they offer much higher yields than safer bonds. 
Companies that issue junk bonds typically have less-than-stellar credit ratings, 
and investors demand these higher yields as compensation for the risk of investing in them. 
A junk bond issued from a company that manages to turn its performance around for the better 
and has its credit rating upgraded will generally have a substantial price appreciation.&lt;/p&gt;
&lt;h2&gt;Investment Grade&lt;/h2&gt;
&lt;p&gt;A rating that indicates that a municipal or corporate bond has a relatively low risk of default. 
Bond rating firms, 
such as Standard &amp;amp; Poor's, 
use different designations consisting of upper- and lower-case letters 'A' 
and 'B' to identify a bond's credit quality rating. 
'AAA' and 'AA' (high credit quality) and 'A' and 'BBB' (medium credit quality) 
are considered investment grade. 
Credit ratings for bonds below these designations ('BB', 'B', 'CCC', etc.) 
are considered low credit quality, 
and are commonly referred to as "junk bonds" (or sometimes speculative investment). &lt;/p&gt;
&lt;p&gt;Investors should note that government bonds, 
or Treasuries, are not subject to credit quality ratings. 
These securities are considered to be of the very highest credit quality. 
In the case of municipal and corporate bond funds, 
fund company literature, 
such as the fund prospectus and independent investment research reports 
will report an "average credit quality" for the fund's portfolio as a whole. &lt;/p&gt;
&lt;p&gt;Investors should be aware that an agency 
downgrade of a company's bonds from 'BBB' to 'BB' 
reclassifies its debt from investment grade to "junk" status 
with just a one-step drop in quality. 
The repercussions of such an event can be highly problematic for the issuer 
and can also adversely affect bond prices for investors. 
Safety-conscious fund investors should pay attention to a bond fund's 
portfolio credit quality breakdown.&lt;/p&gt;
&lt;h2&gt;Loss Given Default (LGD)&lt;/h2&gt;
&lt;p&gt;The amount of funds that is lost by a bank 
or other financial institution 
when a borrower defaults on a loan. 
Academics suggest that there are several methods 
for calculating the loss given default, 
but the most frequently used method 
compares actual total losses to the total potential exposure at the time of default. &lt;/p&gt;
&lt;p&gt;Of course, most banks don't simply calculate the LGD for one loan. 
Instead, they review their entire portfolio 
and determine LGD based on cumulative losses and exposure.&lt;/p&gt;
&lt;p&gt;Institutions such as banks will determine their credit losses 
through an analysis of the actual loan defaults. 
While quantifying some losses may be simple, 
in some situations it may be quite difficult 
and require the analysis of multiple variables. 
For example, if Bank X loans $1 million to ABC Company 
and ABC defaults on the note, 
Bank X's loss isn't necessarily $1 million. 
This is because Bank X may hold substantial assets as collateral, 
and/or may use the courts in an effort to be made whole. 
When all of these variables are factored in, 
Bank X may have lost substantially less than the original $1 million loan. 
The process of analyzing all of these variables 
(as well as all of the other loans in Bank X's portfolio) 
is paramount to determining the loss given default.&lt;/p&gt;
&lt;p&gt;Generally speaking, Banks loses more on credit card loans.&lt;/p&gt;
&lt;h2&gt;Portfolio&lt;/h2&gt;
&lt;p&gt;A grouping of financial assets such as stocks, bonds and cash equivalents, 
as well as their mutual, exchange-traded and closed-fund counterparts. 
Portfolios are held directly by investors and/or managed by financial professionals.&lt;/p&gt;
&lt;p&gt;Prudence suggests that investors should construct an investment portfolio 
in accordance with risk tolerance and investing objectives. 
Think of an investment portfolio as a pie 
that is divided into pieces of varying sizes representing a variety of asset classes 
and/or types of investments to accomplish an appropriate risk-return portfolio allocation.&lt;/p&gt;
&lt;p&gt;For example, 
a conservative investor might favor a portfolio with large cap value stocks, 
broad-based market index funds, 
investment-grade bonds and a position in liquid, 
high-grade cash equivalents. 
In contrast, a risk loving investor might add some small cap growth stocks 
to an aggressive, large cap growth stock position, 
assume some high-yield bond exposure, and look to real estate, international, 
and alternative investment opportunities for his or her portfolio.&lt;/p&gt;
&lt;h2&gt;Comprehensive Capitial Analysis and Review (CCAR)&lt;/h2&gt;
&lt;p&gt;The Comprehensive Capital Analysis and Review (CCAR) is an annual exercise 
by the Federal Reserve to ensure that institutions have robust, 
forward-looking capital planning processes that account for their unique risks and sufficient capital 
to continue operations throughout times of economic and financial stress. 
As part of the CCAR, the Federal Reserve evaluates institutions' capital adequacy, 
internal capital adequacy assessment processes, and their plans to make capital distributions, 
such as dividend payments or stock repurchases. 
The CCAR includes a supervisory stress test to support the Federal Reserve's analysis 
of the adequacy of the firms' capital. Boards of directors 
of the institutions are required each year to review 
and approve capital plans before submitting them to the Federal Reserve.&lt;/p&gt;
&lt;h2&gt;Macroeconomic Factor&lt;/h2&gt;
&lt;p&gt;A factor that is pertinent to a broad economy at the regional or national level 
and affects a large population rather than a few select individuals. 
Macroeconomic factors such as economic output, unemployment, inflation, savings and investment 
are key indicators of economic performance 
and are closely monitored by governments, businesses and consumers. &lt;/p&gt;
&lt;p&gt;The interplay or relationship between various macroeconomic factors 
is the subject of a great deal of study in the field of macroeconomics. 
While macroeconomics deals with the economy as a whole, 
microeconomics is concerned with the study of individual agents 
such as consumers and businesses and their economic decision-making.&lt;/p&gt;
&lt;h2&gt;Commercial Real Estate (CRE)&lt;/h2&gt;
&lt;p&gt;Property that is used solely for business purposes. 
Examples of commercial real estate include malls, 
office parks, restaurants, gas stations, convenience stores and office towers. 
Commercial real estate is one of the three primary types of real estate. 
The other types are residential real estate, 
which is used for living purposes; 
and industrial real estate, 
which is used for manufacturing and production. 
The businesses that occupy commercial real estate usually lease the space. 
An investor usually owns the building and collects rent from each business that operates there. &lt;/p&gt;
&lt;p&gt;There are four primary types of commercial real estate leases, 
each requiring different levels of responsibility 
from the landlord and the tenant. 
In addition to rent, 
a single net lease makes the tenant responsible for paying property taxes; 
a double-net (NN) lease makes the tenant responsible for paying property taxes and insurance; 
and a triple-net (NNN) lease makes the tenant responsible for 
paying property taxes, insurance and maintenance. 
Under a gross lease, the tenant pays only rent; 
the landlord pays for the building's property taxes, insurance and maintenance.&lt;/p&gt;
&lt;p&gt;Investing in commercial real estate often requires 
a considerable amount of startup capital and extensive knowledge 
of the legal, financial and regulatory aspects of owning this type of property. 
Investors who don't want to deal with these hassles directly 
can gain exposure to commercial real estate through real estate investment trusts (REITs).&lt;/p&gt;
&lt;h2&gt;Quater Over Quater (QoQ)&lt;/h2&gt;
&lt;p&gt;A measuring technique that calculates the change between one financial quarter 
and the previous financial quarter. 
This is similar to the year-over-year measure, 
which compares the quarter of one year (Q1 2005) 
to the same quarter of the previous year (Q1 2004). 
The measure gives investors and analysts an idea of how a company is growing over each quarter.&lt;/p&gt;
&lt;p&gt;For example, 
the QOQ measure can be used to compare the earnings between quarters. 
Let's say that the ABC Company's first quarter earnings were $1.50 per share 
and its second quarter earnings were $1.75 per share. 
This means that the company has grown its earnings 
by 16.6% quarter-on-quarter (($1.75-$1.50)/$1.50), which is a good sign for investors.&lt;/p&gt;
&lt;h2&gt;Year Over Year (YoY)&lt;/h2&gt;
&lt;p&gt;A method of evaluating two or more measured events 
to compare the results at one time period 
with those from another time period (or series of time periods), 
on an annualized basis. 
Year-over-year comparisons are a popular way 
to evaluate the performance of investments. 
Any measurable events that recur annually 
can be compared on a year-over-year basis - from annual performance, to quarterly performance, to daily performance.&lt;/p&gt;
&lt;p&gt;Year-over-year performance is frequently used by investors 
seeking to gauge whether a company's financial performance is improving or worsening. 
For example, a business may report that its revenues have increased 
for the third quarter on a year-over-year basis for the last three years. 
This means that revenues at that company in the third quarter of year three 
were higher than revenues in the third quarter in year two, 
which were higher than revenues in the third quarter of year one.&lt;/p&gt;
&lt;p&gt;As another example, 
a mutual fund that returned 50% last year may have a YOY return of 12%, 
as the year-over-year return takes into account each annual return since the fund's inception.&lt;/p&gt;
&lt;h2&gt;Stress Testing&lt;/h2&gt;
&lt;p&gt;A simulation technique used on asset 
and liability portfolios to determine their reactions to different financial situations. 
Stress tests are also used to gauge how certain stressors will affect a company or industry. 
They are usually computer-generated simulation models that test hypothetical scenarios. 
This is also known as a "stress test".&lt;/p&gt;
&lt;p&gt;Stress testing is a useful method 
for determining how a portfolio will fare during a period of financial crisis. 
The Monte Carlo simulation is one of the most widely used methods of stress testing. &lt;/p&gt;
&lt;p&gt;A stress test is also used to evaluate the strength of institutions. 
For example, the Treasury Department could run stress tests on banks 
to determine their financial condition. 
Banks often run these tests on themselves. 
Changing factors could include interest rates, lending requirements or unemployment.&lt;/p&gt;
&lt;p&gt;Default Rate/Probability of Default (PD)/Expected Default Frequency (EDF)&lt;/p&gt;
&lt;p&gt;This rate can be used in reference to two main things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The rate of borrowers who fail to remain current on their loans. 
It is a critical piece of information used by lenders 
to determine their risk exposure and economists 
to evaluate the health of the overall economy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interest rate charged to a borrower 
when payments on a revolving line of credit are overdue. 
This higher rate is applied to outstanding balances in arrears 
in addition to the regular interest charges for the debt.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prior to passage of the Credit Card Accountability, 
Responsibility and Disclosure (CARD) Act of 2009, 
the language in some credit card agreements allowed credit card companies 
to hike the interest charged on the card balance to the default rate 
even if consumers were current on their account 
but had an outstanding balance on another credit card (a practice known as "universal default"). &lt;/p&gt;
&lt;p&gt;The law, 
which took effect in the fall of 2009 imposed sweeping new restrictions 
on the credit industry, including the elimination of the universal default rate.&lt;/p&gt;
&lt;h2&gt;Constant Default Rate (CDR)&lt;/h2&gt;
&lt;p&gt;An annualized rate of default on a group of mortgages, 
typically within a collateralized product such as a mortgage-backed security (MBS). 
The constant default rate represents the percentage 
of outstanding principal balances in the pool that are in default, 
which typically equates to the home being past 60-day 
and 90-day notices and in the foreclosure process. &lt;/p&gt;
&lt;p&gt;The constant default rate analysis assumes that 
if a home is in foreclosure (a process that can take 12 months or more to complete), 
the interest and principal payments 
are being advanced into the MBS by the mortgage servicing company. &lt;/p&gt;
&lt;p&gt;The CDR method for evaluating losses is one of several methods 
used by analysts and company controllers 
to determine the current market value or asset value of a mortgage-backed security. 
The CDR method can account for both fixed-rate and adjustable-rate mortgages. &lt;/p&gt;
&lt;p&gt;Another method is the Standard Default Assumption (SDA) model 
created by the Bond Market Association, 
but this is more suited to standard 30-year fixed mortgages. 
In the mortgage crisis of 2007-2008, 
the SDA model proved to have vastly underestimated the true rate of default; 
foreclosure rates hit multi-decade highs during that period.&lt;/p&gt;
&lt;h2&gt;Commercial and Industrial (C&amp;amp;I) Loan&lt;/h2&gt;
&lt;p&gt;Any type of loan made to a business or corporation 
and not to an individual. 
Commercial and industrial loans can be made 
in order to provide either working capital or to finance major capital expenditures. 
This type of loan is usually short-term in nature 
and is almost always backed with some sort of collateral.&lt;/p&gt;
&lt;p&gt;Commercial loans usually charge flexible rates of interest 
that are tied to the bank prime rate or else to the LIBOR. 
Many borrowers must also file regular financial statements, 
usually at least annually. 
Lenders also usually require proper maintenance of the loan collateral property.&lt;/p&gt;
&lt;h2&gt;Capital Commitment&lt;/h2&gt;
&lt;p&gt;Future capital expenditures that a company has committed 
to spend on long-term assets over a period of time. 
Capital commitment also refers to securities inventory carried by a market maker. 
The term may also refer to investments in blind pool funds by venture capital investors, 
which they contribute over time when requested to do so by the fund manager.&lt;/p&gt;
&lt;p&gt;A company has to exercise the ultmost care in structuring its capital commitments, 
since an inordinately high amount will put undue strain on its finances. 
It would need to ensure that operating cash flow is sufficient to meet capital expenditures, 
and if it is not, 
make arrangements to ensure that it can raise the additional funds on the capital markets. 
Capital commitments are generally the highest for companies in capital-intensive industries 
such as power generation.&lt;/p&gt;
&lt;h2&gt;Loan Commitment&lt;/h2&gt;
&lt;p&gt;A loan amount that may be drawn down, 
or is due to be contractually funded in the future. 
Loan commitments are found at commercial banks 
and other lending institutions and consist of both open-end and closed-end loans. 
Open-end loan commitments act like revolving credit lines, 
whereby if a portion of the loan is paid off, 
the principle repayment amount is added back to the allowable loan limit. 
Closed-end loans are reduced once any repayments are made. &lt;/p&gt;
&lt;p&gt;Banks and investment shops must account for the value of 
outstanding loan commitments so that funds are available should the borrower request them. 
They represent a future obligation in full, 
even though a percentage of the notional loan amounts 
will never be utilized by the borrowers themselves. 
Also known as "unfunded loan commitments," 
because the total capital outlay is not provided by the lender up front. &lt;/p&gt;
&lt;p&gt;The aggregate loan commitments of commercial banks, 
savings &amp;amp; loans and investments banks registered in the United States 
must be disclosed on quarterly financial reports to regulators at the FDIC. 
These reports are known as the "Call Reports" 
and can be found either through the FDIC or the lender's corporate website.&lt;/p&gt;
&lt;p&gt;Loan commitments get increased attention during times of economic weakness, 
as more borrowers delay making repayments 
and may draw down the max on their revolving credit lines. 
This decreases the return the bank can earn on the capital deployed. 
The same is true for many construction loans, 
which are typically classified as closed-end loan commitments.&lt;/p&gt;
&lt;h2&gt;Committed Capital&lt;/h2&gt;
&lt;p&gt;A contractual agreement between an investor and a venture-capital fund 
that obligates the investor to contribute money to the fund. 
The investor may pay all of the committed capital at one time, 
or make contributions over a period of time. 
This often takes place over a number of years.
Also known as "commitments".&lt;/p&gt;
&lt;p&gt;When an investor commits capital to a venture capital fund, 
the investor typically has many years to satisfy the agreement. 
Often, contributions will be made over a period of three to five years after the fund is formed. &lt;/p&gt;
&lt;p&gt;The private equity market can be viewed as riskier than the public equity market, 
as returns in the private market tend to have higher dispersion of returns 
than the public market. 
Therefore, 
investing in the right business ventures can offer substantial rewards for top tier funds.&lt;/p&gt;
&lt;h2&gt;Commitment Fee&lt;/h2&gt;
&lt;p&gt;A fee charged by a lender to a borrower for an unused credit line or undisbursed loan. 
A commitment fee is generally specified as a fixed percentage of the undisbursed loan amount. 
The lender charges a commitment fee as compensation for keeping a line of credit open 
or to guarantee a loan at a specific date in future. 
The borrower pays the fee in return for the assurance that the lender 
will supply the loan funds at the specified future date 
and at the contracted interest rate, 
regardless of conditions in the financial and credit markets. &lt;/p&gt;
&lt;p&gt;A commitment fee is different from interest; 
although, the two are often confused. 
A commitment fee is separate from the interest rate that is charged by the lender on the loan. 
A key distinction is that the commitment fee is charged on the undisbursed loan amount, 
while interest is charged on the disbursed amount of the loan. &lt;/p&gt;
&lt;h2&gt;Forward Commitment&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A contract pertaining to the future sale or purchase of a security. 
Price and date are specified in the contract. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A formal promise to make a loan sometime in the future. 
It typically refers to a mortgage-backed security 
where the funds are usually needed at a later date. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A formal commitment in the form of a future security sale or purchase 
allows both parties to omit the risk pertaining to stock price volatility. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A formal commitment can provide the borrower 
with the security of knowing they will have the funds 
when they need them as well as give the lender the ability to forecast future business.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Take-Out Commitment&lt;/h2&gt;
&lt;p&gt;A specific type of mortgage purchase agreement. 
Under a take-out commitment, 
a long-term investor agrees to buy a mortgage from a mortgage banker 
at a specific date in the future. 
Take-out commitments are enforced once a project reaches a particular stage 
where long-term, rather than short-term, financing is the preferred alternative.&lt;/p&gt;
&lt;p&gt;There are a few specific types of investors 
that purchase take-out commitments. 
In most cases, 
these are insurance companies or other financial institutions. 
They are known as "take-out lenders."&lt;/p&gt;
&lt;h2&gt;Average Outstanding Balance (AOB)&lt;/h2&gt;
&lt;p&gt;The unpaid, 
interest-bearing balance of a loan or loan portfolio averaged over a period of time, 
usually one month. 
The average outstanding balance refers to any term, 
instalment, revolving or credit card debt on which interest is charged.&lt;/p&gt;
&lt;p&gt;The average outstanding balance on credit cards and loans 
is a critical factor in a consumer's credit rating. 
Average outstanding balances on credit cards 
are reported to credit agencies monthly on active accounts, 
along with any amounts that are past due.&lt;/p&gt;
&lt;h2&gt;Outstanding Shares&lt;/h2&gt;
&lt;p&gt;Stock currently held by investors, 
including restricted shares owned by the company's officers and insiders, 
as well as those held by the public. 
Shares that have been repurchased by the company are not considered outstanding stock. &lt;/p&gt;
&lt;p&gt;This number is shown on a company's balance sheet under the heading "Capital Stock" 
and is more important than the authorized shares or float. 
It is used to calculate many metrics, 
including market capitalization and earnings per share (EPS).&lt;/p&gt;
&lt;h2&gt;Net Debt&lt;/h2&gt;
&lt;p&gt;A metric that shows a company's overall debt situation 
by netting the value of a company's liabilities and debts with its cash 
and other similar liquid assets. &lt;/p&gt;
&lt;p&gt;When investing in a company, 
one of the most important factors you need to consider 
is how much debt the company is carrying. 
Here are some questions to ask yourself when analyzing a company's debt: 
How much debt really exists? 
What kind of debt is it (long/short-term maturities)? 
What is the debt for (repay or refinance old debts)? 
Can the company afford the debt if it runs into financial trouble? 
And, finally, how does it compare to the debt levels of competing companies?&lt;/p&gt;
&lt;h2&gt;Net Worth&lt;/h2&gt;
&lt;p&gt;The amount by which assets exceed liabilities. 
Net worth is a concept applicable to individuals and businesses 
as a key measure of how much an entity is worth. 
A consistent increase in net worth indicates good financial health; 
conversely, net worth may be depleted by annual operating losses 
or a substantial decrease in asset values relative to liabilities. 
In the business context, 
net worth is also known as book value or shareholders' equity.&lt;/p&gt;
&lt;p&gt;Consider a couple with the following assets - primary residence valued at $250,000, 
an investment portfolio with a market value of $100,000 
and automobiles and other assets valued at $25,000. 
Liabilities are primarily an outstanding mortgage balance of $100,000 
and a car loan of $10,000. 
The couple's net worth would be therefore be 
$265,000 ([$250,000 + $100,000 + $25,000] - [$100,000 + $10,000]). 
Assume that five years later, 
the couple's financial position is as follows - residence value $225,000, 
investment portfolio $120,000, 
savings $20,000, 
automobile and other assets $15,000; 
mortgage loan balance $80,000, 
car loan $0 (paid off). 
The net worth would now be $300,000. 
In other words, the couple's net worth has gone up by $35,000 
despite the decrease in the value of their residence and car, 
because this decline is more than offset by increases 
in other assets (such as the investment portfolio and savings) 
as well as the decrease in their liabilities. &lt;/p&gt;
&lt;p&gt;People with a substantial net worth are known as high net worth individuals, 
and form the prime market for wealth managers and investment counselors. 
Investors with a net worth (excluding their primary residence) of 
at least $1 million - either alone or together with their spouse - 
are considered as "accredited investors" by the Securities and Exchange Commission, 
for the purpose of investing in unregistered securities offerings. 
A company that is consistently profitable will have a rising net worth or book value, 
as long as these earnings are not fully distributed to shareholders 
but are retained in the business. 
For public companies, 
rising book values over time may be rewarded by an increase in stock market value. &lt;/p&gt;
&lt;h2&gt;Exposure At Default (EAD)&lt;/h2&gt;
&lt;p&gt;A total value that a bank is exposed to at the time of default. 
Each underlying exposure that a bank has is given an EAD value 
and is identified within the bank's internal system. 
Using the internal ratings board (IRB) approach, 
financial institutions will often use their own risk management default models 
to calculate their respective EAD systems.&lt;/p&gt;
&lt;p&gt;Exposure at default (along with loss given default (LGD) and probability of default (PD)) 
is used to calculate the credit risk capital of financial institutions. 
The expected loss that will arise at default 
is often measured over one year. 
The calculation of EAD is done by multiplying each credit obligation by an appropriate percentage. 
Each percentage used coincides with the specifics of each respective credit obligation.&lt;/p&gt;
&lt;h2&gt;Public Company/Firm&lt;/h2&gt;
&lt;p&gt;A company that has issued securities through an initial public offering (IPO) 
and is traded on at least one stock exchange or in the over the counter market. 
Although a small percentage of shares may be initially "floated" to the public, 
the act of becoming a public company allows the market 
to determine the value of the entire company through daily trading. &lt;/p&gt;
&lt;p&gt;Public companies have inherent advantages over private companies, 
including the ability to sell future equity stakes 
and increased access to the debt markets. 
With these advantages, 
however, 
comes increased regulatory scrutiny 
and less control for majority owners and company founders.&lt;/p&gt;
&lt;p&gt;Once a company goes public, 
it has to answer to its shareholders. 
For example, 
certain corporate structure changes and amendments must be brought up 
for shareholder vote. 
Shareholders can also vote with their dollars by bidding up the company 
to a premium valuation or selling it to a level below its intrinsic value. &lt;/p&gt;
&lt;p&gt;Public companies must meet stringent reporting requirements set out 
by the Securities and Exchange Commission (SEC), 
including the public disclosure of financial statements 
and annual 10-k reports discussing the state of the company. 
Each stock exchange also has specific financial 
and reporting guidelines that govern whether a stock is allowed to be listed for trading.&lt;/p&gt;
&lt;h2&gt;Private Company/Firm&lt;/h2&gt;
&lt;p&gt;A company whose ownership is private. 
As a result, 
it does not need to meet the strict Securities 
and Exchange Commission filing requirements of public companies.&lt;/p&gt;
&lt;p&gt;Private companies may issue stock and have shareholders. 
However, their shares do not trade on public exchanges 
and are not issued through an initial public offering. 
In general, 
the shares of these businesses are less liquid 
and the values are difficult to determine.&lt;/p&gt;
&lt;h2&gt;Private Equity&lt;/h2&gt;
&lt;p&gt;Equity capital that is not quoted on a public exchange. 
Private equity consists of investors and funds 
that make investments directly into private companies 
or conduct buyouts of public companies that result in a delisting of public equity. 
Capital for private equity is raised from retail and institutional investors, 
and can be used to fund new technologies, 
expand working capital within an owned company, 
make acquisitions, or to strengthen a balance sheet. &lt;/p&gt;
&lt;p&gt;The majority of private equity consists of institutional investors 
and accredited investors who can commit large sums of money for long periods of time. 
Private equity investments often demand long holding periods 
to allow for a turnaround of a distressed company 
or a liquidity event such as an IPO or sale to a public company.&lt;/p&gt;
&lt;p&gt;The size of the private equity market has grown steadily since the 1970s. 
Private equity firms will sometimes pool funds together 
to take very large public companies private. 
Many private equity firms conduct what are known as leveraged buyouts (LBOs), 
where large amounts of debt are issued to fund a large purchase. 
Private equity firms will then try to improve the financial results 
and prospects of the company in the hope of reselling the company 
to another firm or cashing out via an IPO.&lt;/p&gt;
&lt;h2&gt;Gross Domestic Product (GDP)&lt;/h2&gt;
&lt;p&gt;The monetary value of all the finished goods and services produced 
within a country's borders in a specific time period, 
though GDP is usually calculated on an annual basis. 
It includes all of private and public consumption, 
government outlays, 
investments and exports less imports that occur within a defined territory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="n"&gt;GDP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;NX&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where:&lt;/p&gt;
&lt;p&gt;$C$ is equal to all private consumption, or consumer spending, in a nation's economy;
$G$ is the sum of government spending;
$I$ is the sum of all the country's businesses spending on capital;
$NX$ is the nation's total net exports, 
calculated as total exports minus total imports. ($NX = Exports - Imports$).&lt;/p&gt;
&lt;p&gt;GDP is commonly used as an indicator of the economic health of a country, 
as well as to gauge a country's standard of living. 
Critics of using GDP as an economic measure 
say the statistic does not take into account the underground economy 
(transactions that, for whatever reason, are not reported to the government). 
Others say that GDP is not intended to gauge material well-being, 
but serves as a measure of a nation's productivity, which is unrelated.&lt;/p&gt;
&lt;h2&gt;Credit Spread&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The spread between Treasury securities 
and non-Treasury securities that are identical in all respects except for quality rating. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An options strategy where a high premium option is sold 
and a low premium option is bought on the same underlying security.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For instance, 
the difference between yields on treasuries and those on single A-rated industrial bonds. 
A company must offer a higher return on their bonds 
because their credit is worse than the government's. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An example would be buying a Jan 50 call on ABC for $2, 
and writing a Jan 45 call on ABC for $5. 
The net amount received (credit) is $3. 
The investor will profit if the spread narrows. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Can also be called "credit spread option" or "credit risk option".&lt;/p&gt;
&lt;p&gt;(For my intern at Union Bank: Defined as the differeence 
between the interest of Moody's BAA rate cooperate bond and that of the US 10-year treausy.)&lt;/p&gt;
&lt;h2&gt;House Price Index (HPI)&lt;/h2&gt;
&lt;p&gt;A broad measure of the movement of single-family house prices in the U.S. 
Apart from serving as an indicator of house price trends, 
the House Price Index (HPI) provides an analytical tool for estimating changes 
in the rates of mortgage defaults, 
prepayments and housing affordability. 
The HPI is published by the Federal Housing Finance Agency (FHFA) 
using data supplied by Fannie Mae and Freddie Mac.&lt;/p&gt;
&lt;p&gt;The HPI is based on transactions involving conventional 
and conforming mortgages (only on single-family properties) 
that have been purchased or securitized by Fannie Mae or Freddie Mac. 
It is a weighted, repeat-sales index, 
which means that it measures average price changes in repeat sales 
or refinancings on the same properties. 
A comprehensive HPI report is published every quarter, 
while a monthly report has been published from March 2008. &lt;/p&gt;
&lt;p&gt;The HPI differs from the well-known S&amp;amp;P/Case-Shiller Home Price Indexes 
in a number of ways. 
For example, 
while the Case-Shiller indexes only use purchase prices, 
the all-transactions HPI also includes refinance appraisals. &lt;/p&gt;
&lt;h2&gt;Dow Jones Industrial Average (DJIA)&lt;/h2&gt;
&lt;p&gt;The Dow Jones Industrial Average is a price-weighted average 
of 30 significant stocks traded on the New York Stock Exchange and the Nasdaq. 
The DJIA was invented by Charles Dow back in 1896. &lt;/p&gt;
&lt;p&gt;Often referred to as "the Dow," the DJIA is one of the oldest 
and single most watched index in the world. 
The DJIA includes companies like General Electric, Disney, Exxon and Microsoft. 
When the TV networks say "the market is up today," they are generally referring to the Dow.&lt;/p&gt;
&lt;h2&gt;Standard &amp;amp; Poor's 500 Index - S&amp;amp;P 500&lt;/h2&gt;
&lt;p&gt;An index of 500 stocks chosen for market size, 
liquidity and industry grouping, among other factors. 
The S&amp;amp;P 500 is designed to be a leading indicator of U.S. equities 
and is meant to reflect the risk/return characteristics of the large cap universe. &lt;/p&gt;
&lt;p&gt;Companies included in the index are selected by the S&amp;amp;P Index Committee, 
a team of analysts and economists at Standard &amp;amp; Poor's. 
The S&amp;amp;P 500 is a market value weighted index 
(each stock's weight is proportionate to its market value).&lt;/p&gt;
&lt;p&gt;The S&amp;amp;P 500 is one of the most commonly used benchmarks for the overall U.S. stock market. 
The Dow Jones Industrial Average (DJIA) was at one time the most renowned index for U.S. stocks, 
but because the DJIA contains only 30 companies, 
most people agree that the S&amp;amp;P 500 is a better representation of the U.S. market. 
In fact, many consider it to be the definition of the market.&lt;/p&gt;
&lt;p&gt;Other popular Standard &amp;amp; Poor's indexes include the S&amp;amp;P 600, 
an index of small cap companies with market capitalizations 
between $300 million and $2 billion, 
and the S&amp;amp;P 400, 
an index of mid cap companies with market capitalizations of $2 billion to $10 billion.&lt;/p&gt;
&lt;p&gt;A number of financial products based on the S&amp;amp;P 500 are available to investors. 
These include index funds and exchange-traded funds. 
However, it would be difficult for individual investors to buy the index, 
as this would entail buying 500 different stocks.&lt;/p&gt;
&lt;h2&gt;West Texas Intermediate (WTI)&lt;/h2&gt;
&lt;p&gt;Light, sweet crude oil commonly referred to as "oil" in the Western world. 
WTI is the underlying commodity of the New York Merchantile Exchange's oil futures contracts.&lt;/p&gt;
&lt;p&gt;WTI is considered a "sweet" crude because it is about 0.24% sulfur, 
a lower concentration than North Sea Brent crude. 
WTI is high quality oil that is easily refined.&lt;/p&gt;
&lt;h2&gt;Brent Blend&lt;/h2&gt;
&lt;p&gt;A type of sweet crude oil that is used as a benchmark for the prices of other crude oils. 
Brent blend is most often found in parts of the North Sea off the coast of the U.K. 
and Norway. 
Brent blend makes up more than half of the world's globally traded supply of crude oil, 
which is why it makes an obvious choice for the benchmark of crude oil.&lt;/p&gt;
&lt;p&gt;As previously mentioned, 
the brent blend is a mix of crude oil from several facilities 
in the Ninian and Brent fields on the North Sea. 
Much like the other internationally recognized benchmark for crude oil, 
West Texas Intermediate, 
the Brent blend is a light and sweet crude oil, 
though not as light or sweet as WTI. 
Brent futures are traded on both the ICE and NYMEX exchanges, 
with delivery dates for all 12 months of the year.&lt;/p&gt;
&lt;h2&gt;Index&lt;/h2&gt;
&lt;p&gt;A statistical measure of change in an economy or a securities market. 
In the case of financial markets, 
an index is an imaginary portfolio of securities 
representing a particular market or a portion of it. 
Each index has its own calculation methodology 
and is usually expressed in terms of a change from a base value. 
Thus, the percentage change is more important than the actual numeric value. &lt;/p&gt;
&lt;p&gt;Stock and bond market indexes are used to construct index mutual funds 
and exchange-traded funds (ETFs) whose portfolios mirror the components of the index.&lt;/p&gt;
&lt;p&gt;The Standard &amp;amp; Poor's 500 is one of the world's best known indexes, 
and is the most commonly used benchmark for the stock market. 
Other prominent indexes include the DJ Wilshire 5000 (total stock market), 
the MSCI EAFE (foreign stocks in Europe, Australasia, Far East) 
and the Lehman Brothers Aggregate Bond Index (total bond market).&lt;/p&gt;
&lt;p&gt;Because, technically, you can't actually invest in an index, 
index mutual funds and exchange-traded funds (based on indexes) 
allow investors to invest in securities 
representing broad market segments and/or the total market.&lt;/p&gt;
&lt;h2&gt;Compound Annual Growth Rate (CAGR)&lt;/h2&gt;
&lt;p&gt;The year-over-year growth rate of an investment over a specified period of time.
The compound annual growth rate is calculated by taking the nth root 
of the total percentage growth rate, 
where n is the number of years in the period being considered.&lt;/p&gt;
&lt;p&gt;This can be written as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="n"&gt;CAGR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Ending&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;}}{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Begining&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CAGR isn't the actual return in reality. 
It's an imaginary number that describes the rate 
at which an investment would have grown if it grew at a steady rate. 
You can think of CAGR as a way to smooth out the returns.&lt;/p&gt;
&lt;p&gt;Don't worry if this concept is still fuzzy to you.
CAGR is one of those terms best defined by example. 
Suppose you invested $10,000 in a portfolio on Jan 1, 2005. 
Let's say by Jan 1, 2006, 
your portfolio had grown to $13,000, 
then $14,000 by 2007, and finally ended up at $19,500 by 2008.&lt;/p&gt;
&lt;p&gt;Your CAGR would be 
    $$
    (\frac{19500}{10,000})^{\frac{1}{3}} - 1 = 0.2493
    $$
Thus, your CAGR for your three-year investment is equal to 24.93%, 
representing the smoothed annualized gain you earned over your investment time horizon.&lt;/p&gt;
&lt;h2&gt;Average Annual Growth Rate (AAGR)&lt;/h2&gt;
&lt;p&gt;The average increase in the value of an individual investment or portfolio 
over the period of a year. 
It is calculated by taking the arithmetic mean of the growth rate over two annual periods. 
The average annual growth rate can be calculated for any investment, 
but will not include any measure of the investment's overall risk, 
as measured by its price volatility.&lt;/p&gt;
&lt;p&gt;For example, 
if your portfolio grows 10% one year and 20% the next, 
your AAGR would be 15%. 
To this end, 
fluctuations in the portfolio's rate of return 
between the beginning of the first year and the end 
of the year are not included in the calculations, 
which may lead to some measurement error. &lt;/p&gt;
&lt;p&gt;To reduce any possible measurement error, 
an analyst can simply take the average price at the beginning 
and end of the two measurement periods, 
and use those average prices to determine each year's return, 
and then the AAGR.&lt;/p&gt;
&lt;p&gt;Moody's&lt;/p&gt;
&lt;p&gt;An independent, 
unaffiliated research company that rates fixed income securities. 
Moody's assigns ratings on the basis of risk 
and the borrower's ability to make interest payments. 
Moody's backs its ratings with exhaustive financial research 
and unbiased commentary and analysis.&lt;/p&gt;
&lt;p&gt;Many bond investors pay close attention to the rating Moody assigns to bonds 
and preferred stock. 
Moody's ratings are ranked as follows:&lt;/p&gt;
&lt;p&gt;Aaa - highest grade, best quality issuer, lowest risk
Aa
A
Baa - medium grade, moderate risk
Ba
B
Caa - Poor grade, high risk
Ca
C &lt;/p&gt;
&lt;h2&gt;Financial Statements&lt;/h2&gt;
&lt;p&gt;Records that outline the financial activities of a business, 
an individual or any other entity. 
Financial statements are meant to present the financial information 
of the entity in question as clearly 
and concisely as possible for both the entity and for readers. 
Financial statements for businesses usually include: 
income statements, balance sheet, statements of retained earnings 
and cash flows, as well as other possible statements.&lt;/p&gt;
&lt;p&gt;It is a standard practice for businesses to present financial statements 
that adhere to generally accepted accounting principles (GAAP), 
to maintain continuity of information and presentation across international borders. 
As well, financial statements are often audited 
by government agencies, accountants, firms, etc. 
to ensure accuracy and for tax, financing or investing purposes. 
Financial statements are integral to ensuring accurate 
and honest accounting for businesses and individuals alike.&lt;/p&gt;
&lt;h2&gt;Income Statement&lt;/h2&gt;
&lt;p&gt;A financial statement that measures a company's financial performance 
over a specific accounting period. 
Financial performance is assessed by giving a summary 
of how the business incurs its revenues and expenses through 
both operating and non-operating activities. 
It also shows the net profit or loss incurred over a specific accounting period, 
typically over a fiscal quarter or year.&lt;/p&gt;
&lt;p&gt;Also known as the "profit and loss statement" or "statement of revenue and expense."&lt;/p&gt;
&lt;p&gt;The income statement is the one of the three major financial statements. 
The other two are the balance sheet and the statement of cash flows. 
The income statement is divided into two parts: the operating and non-operating sections.&lt;/p&gt;
&lt;p&gt;The portion of the income statement that deals with operating items 
is interesting to investors and analysts alike 
because this section discloses information about revenues and expenses 
that are a direct result of the regular business operations. 
For example, if a business creates sports equipment, 
then the operating items section would talk about the revenues 
and expenses involved with the production of sports equipment.&lt;/p&gt;
&lt;p&gt;The non-operating items section discloses revenue 
and expense information about activities that are not tied directly 
to a company's regular operations. 
For example, 
if the sport equipment company sold a factory 
and some old plant equipment, 
then this information would be in the non-operating items section.&lt;/p&gt;
&lt;h2&gt;Debt-Service Coverage Ratio (DSCR)&lt;/h2&gt;
&lt;p&gt;In corporate finance, 
it is the amount of cash flow available to meet annual interest 
and principal payments on debt, including sinking fund payments. &lt;/p&gt;
&lt;p&gt;In government finance, 
it is the amount of export earnings needed to meet annual interest 
and principal payments on a country's external debts. &lt;/p&gt;
&lt;p&gt;In personal finance, 
it is a ratio used by bank loan officers in determining income property loans. 
This ratio should ideally be over 1. 
That would mean the property is generating enough income to pay its debt obligations. &lt;/p&gt;
&lt;p&gt;In general, it is calculated by: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="n"&gt;DSCR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt; &lt;span class="n"&gt;Operating&lt;/span&gt; &lt;span class="n"&gt;Income&lt;/span&gt;&lt;span class="p"&gt;}}{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;Debt&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A DSCR of less than 1 would mean a negative cash flow. 
A DSCR of less than 1, say .95, 
would mean that there is only enough net operating income to cover 95% of annual debt payments. 
For example, 
in the context of personal finance, 
this would mean that the borrower would have to delve into his 
or her personal funds every month to keep the project afloat. 
Generally, lenders frown on a negative cash flow, 
but some allow it if the borrower has strong outside income.&lt;/p&gt;
&lt;h2&gt;Debt-To-Income Ratio (DTI)&lt;/h2&gt;
&lt;p&gt;A personal finance measure that compares an individual's debt payments 
to the income he or she generates. 
This measure is important in the lending industry 
as it gives lenders an idea of how likely it is that the borrower will repay the loan.&lt;/p&gt;
&lt;p&gt;The higher this ratio, 
the more burden there is on the individual to make payments on his or her debts. 
If the ratio is too high, 
the individual will have a hard time accessing other forms of financing.&lt;/p&gt;
&lt;h2&gt;Gross Debt Service Ratio (GDS)&lt;/h2&gt;
&lt;p&gt;A debt service measure that financial lenders use 
as a rule of thumb to give a preliminary assessment 
about whether a potential borrower is already in too much debt. 
Receiving a ratio of less than 30% means that the potential borrower 
has an acceptable level of debt.&lt;/p&gt;
&lt;p&gt;Calculated as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="n"&gt;GDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Annual&lt;/span&gt; &lt;span class="n"&gt;Mortgage&lt;/span&gt; &lt;span class="n"&gt;Payments&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt; &lt;span class="n"&gt;Taxes&lt;/span&gt;&lt;span class="p"&gt;}}{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Gross&lt;/span&gt; &lt;span class="n"&gt;Family&lt;/span&gt; &lt;span class="n"&gt;Income&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, 
Jack and Jill, 
two law students, 
have a monthly mortgage payment of $1,000 (annual payment of $12,000), 
property taxes of $3,000 and a gross family income of $45,000. 
This would give a GDS of 33 %. 
Based on the benchmark of 30%, 
Jack and Jill appear to be carrying an unacceptable amount of debt.&lt;/p&gt;
&lt;p&gt;Keep in mind that this ratio is only a very rough benchmark. 
The acceptance of a loan application is not solely determined by this ratio. 
Since this is a very simple ratio, 
there are a lot of subsequent factors that lenders consider. 
For example, 
even though Jack and Jill's GDS is above the benchmark, 
a lender may still lend to Jack and Jill 
because of their future earning potential as lawyers. 
When combined with other personal information, 
GDS can be a good way for lenders to screen borrowers.&lt;/p&gt;
&lt;h2&gt;Total Debt Service Ratio (TDS)&lt;/h2&gt;
&lt;p&gt;A debt service measure that financial lenders use 
as a rule of thumb to give a preliminary assessment of 
whether a potential borrower is already in too much debt. 
More specifically, 
this ratio shows the proportion of gross income 
that is already spent on housing-related and other similar payments. &lt;/p&gt;
&lt;p&gt;Receiving a ratio of less than 40% means that the potential borrower 
has an acceptable level of debt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="n"&gt;TDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Annual&lt;/span&gt; &lt;span class="n"&gt;Mortgage&lt;/span&gt; &lt;span class="n"&gt;Payments&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Propety&lt;/span&gt; &lt;span class="n"&gt;Taxes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Other&lt;/span&gt; &lt;span class="n"&gt;Debt&lt;/span&gt; &lt;span class="n"&gt;Payments&lt;/span&gt;&lt;span class="p"&gt;}}{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Gross&lt;/span&gt; &lt;span class="n"&gt;Family&lt;/span&gt; &lt;span class="n"&gt;Income&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, 
Jack and Jill, 
two law students, 
have a monthly mortgage payment of $1,000 (annual payment of $12,000), 
property taxes of $3,000, 
credit card balances totaling $1,000 
and a gross family income of $45,000. 
This would give a TDS of around 36%. 
Based on the benchmark of 40%, 
Jack and Jill appear to be carrying an acceptable amount of debt.&lt;/p&gt;
&lt;p&gt;This ratio is very similar to the gross debt service ratio (GDS) except 
that the GDS does not account for non-housing related payments. 
TDS allows for a slightly more detailed view of a potential borrower's financial situation.&lt;/p&gt;
&lt;h2&gt;Leverage Ratio&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Any ratio used to calculate the financial leverage of a company 
to get an idea of the company's methods of financing 
or to measure its ability to meet financial obligations. 
There are several different ratios, 
but the main factors looked at include debt, equity, assets and interest expenses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A ratio used to measure a company's mix of operating costs, 
giving an idea of how changes in output will affect operating income. 
Fixed and variable costs are the two types of operating costs; 
depending on the company and the industry, the mix will differ.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The most well known financial leverage ratio is the debt-to-equity ratio. 
For example, 
if a company has $10M in debt and $20M in equity, 
it has a debt-to-equity ratio of 0.5 ($$10M/$20M$).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Companies with high fixed costs, 
after reaching the breakeven point, 
see a greater increase in operating revenue when output is increased compared 
to companies with high variable costs. 
The reason for this is that the costs have already been incurred, 
so every sale after the breakeven transfers to the operating income. 
On the other hand, 
a high variable cost company sees little increase in operating income 
with additional output, 
because costs continue to be imputed into the outputs. 
The degree of operating leverage is the ratio used 
to calculate this mix and its effects on operating income.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Leverage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The use of various financial instruments or borrowed capital, 
such as margin, 
to increase the potential return of an investment. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The amount of debt used to finance a firm's assets. 
A firm with significantly more debt 
than equity is considered to be highly leveraged. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Leverage is most commonly used in real estate transactions 
through the use of mortgages to purchase a home.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Leverage can be created through options, 
futures, margin and other financial instruments. 
For example, say you have $1,000 to invest. 
This amount could be invested in 10 shares of Microsoft stock, 
but to increase leverage, 
you could invest the $1,000 in five options contracts. 
You would then control 500 shares instead of just 10.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most companies use debt to finance operations. 
By doing so, a company increases its leverage 
because it can invest in business operations without increasing its equity. 
For example, 
if a company formed with an investment of $5 million from investors, 
the equity in the company is $5 million - 
this is the money the company uses to operate. 
If the company uses debt financing by borrowing $20 million, 
the company now has $25 million to invest in business operations 
and more opportunity to increase value for shareholders. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Leverage helps both the investor and the firm to invest or operate. 
However, it comes with greater risk. 
If an investor uses leverage to make an investment 
and the investment moves against the investor, 
his or her loss is much greater than 
it would've been if the investment had not been leveraged - 
leverage magnifies both gains and losses. In the business world, 
a company can use leverage to try to generate shareholder wealth, 
but if it fails to do so, the interest expense and credit risk 
of default destroys shareholder value.&lt;/p&gt;
&lt;h2&gt;Net Operating Income (NOI)&lt;/h2&gt;
&lt;p&gt;A company's operating income after operating expenses are deducted, 
but before income taxes and interest are deducted. 
If this is a positive value, it is referred to as net operating income, 
while a negative value is called a net operating loss (NOL). &lt;/p&gt;
&lt;p&gt;NOI is often viewed as a good measure of company performance. 
Some believe this figure is less susceptible than other figures to manipulation by management.&lt;/p&gt;
&lt;h2&gt;Charge-Off&lt;/h2&gt;
&lt;p&gt;A term describing an expense on a company's income statement. 
A charge-off will fall under one of the following categories: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A debt that is deemed uncollectible by the reporting firm 
and is subsequently written off. 
This type will be classified as 'bad debt expense' on the income statement, 
and removed from the balance sheet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A probable one-time extraordinary expense incurred 
by a company that negatively affects earnings 
and results in a write-down of some of the firm's assets. 
The write-down arises due to impairments of assets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bad debt expenses arise when a firm is unable to collect 
on some of its accounts receivable (AR). 
When this occurs, the firm has little recourse; 
it could either sell the probable bad debt to a collection agency 
(a sale will be recorded on the firm's books, but not as an expense), 
or it could just write-off the uncollectible amount as an expense on the income statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Companies often say something like: 
"we will take a one-time charge against earnings this quarter." 
This means that an extraordinary event has occurred and, 
altough it affects present earnings, 
it is unlikely to occur again. 
As a result, 
a company will usually provide an earnings per share (EPS) figure 
with and without this charge.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Net Charge Off (NCO)&lt;/h2&gt;
&lt;p&gt;The dollar amount representing the difference between gross charge-offs 
and any subsequent recoveries of delinquent debt. 
Net charge offs refer to debt owed to a company 
that is unlikely to be recovered by that company. 
This "bad debt" often written off and classified as gross charge-offs. 
If, at a later date, 
some money is recovered on the debt, 
the amount is subtracted from the gross charge-offs 
to compute the net charge-off value.&lt;/p&gt;
&lt;p&gt;Bad debt or poor credit quality loans are regularly charged off 
as bad debt and purged from the books, 
often on a monthly or quarterly basis. 
If, at a later date, 
the company find out it was wrong and part of the debt is actually repaid, 
the net charge-off can be calculated 
by finding the difference the gross charge-offs 
and the repaid debt. 
A negative value for net charge-offs indicates 
that recoveries are greater than charge-offs 
during a particular accounting period. Companies want this number to be low.&lt;/p&gt;
&lt;h2&gt;Scenario Analysis&lt;/h2&gt;
&lt;p&gt;The process of estimating the expected value of a portfolio 
after a given period of time, 
assuming specific changes in the values of the portfolio's securities 
or key factors that would affect security values, 
such as changes in the interest rate.&lt;/p&gt;
&lt;p&gt;Scenario analysis commonly focuses on estimating 
what a portfolio's value would decrease to if an unfavorable event, 
or the "worst-case scenario", were realized. 
Scenario analysis involves computing different reinvestment rates 
for expected returns that are reinvested during the investment horizon.&lt;/p&gt;
&lt;p&gt;There are many different ways to approach scenario analysis, 
but a common method is to determine what the standard deviation of daily 
or monthly security returns are, 
and then compute what value would be expected for the portfolio 
if each security generated returns two or three standard deviations 
above and below the average return.&lt;/p&gt;
&lt;p&gt;In this way, 
an analyst can have reasonable certainty 
that the value of a portfolio is unlikely to fall below (or rise above) 
a specific value during a given time period.&lt;/p&gt;
&lt;h2&gt;Financial Repression&lt;/h2&gt;
&lt;p&gt;A term that describes measures by which governments channel funds 
to themselves as a form of debt reduction. 
This concept was introduced in 1973 by Stanford economists Edward S. Shaw 
and Ronald I. McKinnon. Financial repression 
can include such measures as directed lending to the government, 
caps on interest rates, regulation of capital movement 
between countries and a tighter association between government and banks. 
The term was initially used in response to the emerging market financial systems 
during the 1960s, '70s and '80s.&lt;/p&gt;
&lt;p&gt;In 2011, economists Carmen M. Reinhart and M. Belen Sbrancia hypothesized 
in a National Bureau of Economic Research (NBER) 
working paper entitled "The Liquidation of Government Debt" 
that governments could return to financial repression 
to deal with debt following the 2008 economic crisis. 
Reinhart and Sbrancia indicate that financial repression features:&lt;/p&gt;
&lt;p&gt;Caps or ceilings on interest rates
Government ownership or control of domestic banks and financial institutions
Creation or maintenance of a captive domestic market for government debt
Restrictions on entry to the financial industry
Directing credit to certain industries&lt;/p&gt;
&lt;h3&gt;Credit Report&lt;/h3&gt;
&lt;p&gt;A detailed report of an individual's credit history prepared 
by a credit bureau and used by a lender 
to in determining a loan applicant's creditworthiness, including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Personal data (current and previous addresses, social security number, employment history)&lt;/li&gt;
&lt;li&gt;Summary of credit history (number and type of accounts that are past-due or in good standing)&lt;/li&gt;
&lt;li&gt;Detailed account information&lt;/li&gt;
&lt;li&gt;Inquires into applicant's credit history (number and type of inquiries into applicant's credit report)&lt;/li&gt;
&lt;li&gt;Details of any accounts turned over to credit agency (such as information about liens, wages garnishments via federal, state or county records)&lt;/li&gt;
&lt;li&gt;Information on how to dispute any of the above information.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once negative information appears on your credit report, 
there is little you can do to clear it up if the information is truthful and accurate. 
Generally such information remains for about seven years, 
while bankruptcy filings typically stay on the credit report for about 10 years. &lt;/p&gt;
&lt;h2&gt;Absorption Rate&lt;/h2&gt;
&lt;p&gt;The rate at which available homes are sold 
in a specific real estate market during a given time period. 
It is calculated by dividing the total number of available homes 
by the average number of sales per month. 
The figure shows how many months it will take to exhaust the supply of homes on the market. 
A high absorption rate may indicate that the supply of available homes will shrink rapidly, 
increasing the odds that a homeowner will sell a piece of property in a shorter period of time.&lt;/p&gt;
&lt;p&gt;For example, 
suppose that a city has 1,000 homes currently on the market to be sold. 
If buyers snap up 100 homes per month, 
the supply of homes will be exhausted in 10 months 
(1,000 homes divided by 100 homes sold per month). 
If a homeowner is looking to sell a piece of property, 
he knows that half of the market will be sold out in five months. 
This rate does not take in to account additional homes that enter the market. 
The absorption rate can also be a signal to developers to start building new homes. &lt;/p&gt;
&lt;h2&gt;Market Exposure&lt;/h2&gt;
&lt;p&gt;The amount of funds invested in a particular type of security 
and/or market sector or industry and usually expressed as a percentage 
of total portfolio holdings. 
Thus, it is the amount an investor has at risk or the amount he/she can lose.&lt;/p&gt;
&lt;p&gt;The exposure of a portfolio to particular securities/markets/sectors 
must be considered when determining asset allocation 
since it can greatly increase returns or, 
if properly done, minimizes losses. 
For example, a portfolio with both stocks 
and bonds holdings will typically have less risk 
than a portfolio with exposure only to stocks. &lt;/p&gt;
&lt;h2&gt;Basis Point (BPS)&lt;/h2&gt;
&lt;p&gt;A unit that is equal to 1/100th of 1%, 
and is used to denote the change in a financial instrument. 
The basis point is commonly used for calculating changes in interest rates, 
equity indexes and the yield of a fixed-income security.&lt;/p&gt;
&lt;p&gt;The relationship between percentage changes 
and basis points can be summarized as follows: 
1% change = 100 basis points, and 0.01% = 1 basis point.&lt;/p&gt;
&lt;p&gt;So, a bond whose yield increases from 5% to 5.5% 
is said to increase by 50 basis points; 
or interest rates that have risen 1% are said to have increased by 100 basis points. &lt;/p&gt;</summary><category term="terminology"></category><category term="business"></category><category term="Work"></category><category term="investment"></category></entry><entry><title>Prevent Linux Command From Being Interruptted</title><link href="http://lisafly.github.io/blog/prevent-linux-command-from-being-interruptted/" rel="alternate"></link><updated>2013-04-23T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-04-23:blog/prevent-linux-command-from-being-interruptted/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;screen&lt;/li&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;li&gt;nohup and &amp;amp;: before you run a command&lt;/li&gt;
&lt;li&gt;disown: useful when after you have started a command that takes a long time to run.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Shell"></category><category term="Terminal"></category><category term="Linux"></category><category term="remote"></category></entry><entry><title>Make Your Linux Server Securer</title><link href="http://lisafly.github.io/blog/make-your-linux-server-securer/" rel="alternate"></link><updated>2013-04-20T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-04-20:blog/make-your-linux-server-securer/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Define host access rules in &lt;code&gt;/etc/hosts.allow&lt;/code&gt; and &lt;code&gt;/etc/hosts.deny&lt;/code&gt;. 
Usually I only allow login to my private server from my home and work ip. 
If I have to login into my private server from some other network, 
I login to a computer at my workplace, 
login into my private server from the computer at my workplace,
editing the access rules on my private server,
and then login into my private server from the new network directly. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable root SSH login (edit the file &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;).
With root SSH login disabled, 
a hacker has to guess both your login name and password,
which is much harder than guessing the password alone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a non-default port for the SSH server (edit the file &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;).
With a non-default port set up,
a hacker has to also guess the port number,
which makes the brute-forth break-in even harder.
You can use the command `sudo nmap -sS -O 127.0.0.1' to scan open ports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the package &lt;code&gt;fail2ban&lt;/code&gt; to automatically ban ips which attemps to break into your server by brute-forth. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="security"></category><category term="Linux"></category><category term="server"></category></entry><entry><title>Tips for Using Dropbox</title><link href="http://lisafly.github.io/blog/tips-for-using-dropbox/" rel="alternate"></link><updated>2013-04-08T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-04-08:blog/tips-for-using-dropbox/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You'd better not store symbolic links in the Dropbox folder,
because the symbolic links will be replaced by the real files/folders when synchronized to other computers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is not a good idea to put git repository in Dropbox,
especially these repositories than generate lots of small files after compiling.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="synchronization"></category><category term="Dropbox"></category><category term="cloud"></category><category term="software"></category><category term="backup"></category></entry><entry><title>Aggregation</title><link href="http://lisafly.github.io/blog/aggregation/" rel="alternate"></link><updated>2013-03-22T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-03-22:blog/aggregation/</id><summary type="html">&lt;p&gt;The prediction error is a trade-off of bias and variance. 
In statistics, 
we often talk about unbiased estimators (especially in linear regression). 
In this case we restrict the estimators/predictors to be in a (small) class,
and find the optimal solution in this class (called BLUE or BLUP).&lt;/p&gt;
&lt;p&gt;Generally speaking, unbiased predictors are not ideas in prediction problems.
In many situations we can easily find predictors with small bias (usually very complexed predictors/models). 
To improve the performance of predictors, 
we often want to decrease their variance at the cost of increase bias. 
This is called decreasing the complexity of the predictors/models.
This can be done by variable/feature selection. 
This is discussed in &lt;a href=""&gt;the regularization post&lt;/a&gt;.
Here we talk about some aggregation/ensamble technic to decrease the complexity of predictors/models.
The is inspired by the simple fact that the variance of the mean of &lt;code&gt;n&lt;/code&gt; iid random variables (with finite variance)
is &lt;code&gt;1/n&lt;/code&gt; times the variance of any of them. 
This means that by combining (not strongly correlated) predictors,
e.g., linear combination or majority vote, 
we can get (much) better predictors. &lt;/p&gt;
&lt;h2&gt;Decrease Complexity&lt;/h2&gt;
&lt;h3&gt;Bagging&lt;/h3&gt;
&lt;p&gt;Bagging is short for Bootstrap Aggregation.
The basic idea is to build predictors based on bootstrap samples (sample with replacement) of the training data. 
Each time we get a different bootstrap sample,
so we have a different predictor.
Hopefully these predictors are not strongly correlated so that by averaging (unweighted) them we get a better predictor.
This idea is well used in random forest. 
To further decrease the correlation between trees, 
the random forest process also restricts the number of variables 
(usually square root of the total number of variables) used to build each tree.
The neuron network can also be considered as a way of Bagging,
since the input of a node is a linear combination of outcomes from last layer.&lt;/p&gt;
&lt;h3&gt;Stacking&lt;/h3&gt;
&lt;p&gt;Stacking is similar to Bagging. 
The difference is that Stacking uses weighted averages of predictors based on their performances. 
The weights are often chosen to minized the prediction error in leave-1-out cross validation. &lt;/p&gt;
&lt;h2&gt;Increase Complexity&lt;/h2&gt;
&lt;p&gt;An opposite approach to these discussed above is to start from a very simple predictor (big bias but small variance)
and then increase the complexity (decrease bias at cost of increase variance) of the predictor.
This is common in nature, e.g., the human brain is developped from simple to complex. 
This approach is called Boosting.
There are different version of Boosting, e.g., Gradient Boosting and AdaBoosting (Adaptive Boosting).
AdaBoosting is popular in face recognition problems.&lt;/p&gt;</summary><category term="statistics"></category><category term="ensamble"></category><category term="aggregation"></category><category term="data mining"></category><category term="machine learning"></category></entry><entry><title>Adjust Screen Brightness for Linux Desktops</title><link href="http://lisafly.github.io/blog/adjust-screen-brightness-for-linux-desktops/" rel="alternate"></link><updated>2013-03-10T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-03-10:blog/adjust-screen-brightness-for-linux-desktops/</id><summary type="html">&lt;p&gt;For many computers and laptops installed with Linux desktops, 
you can use shortcuts (usually Fn + Brightness_keys) to adjust screen brightness.
This does not work for some laptops. 
Another way to adjust screen brightness is to use the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;setpci&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;02.0&lt;/span&gt; &lt;span class="n"&gt;F4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;brightness_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The value is between 00 to ff. 
However, this is not a universal way either, 
i.e., it does not work on all laptops. 
As you see, 
you have to have root permission in order to run the command. 
Generally speaking,
you are not recommnend to use the latter way if the shortcuts works. &lt;/p&gt;</summary><category term="screen"></category><category term="Linux"></category><category term="brightness"></category></entry><entry><title>Dual Monitor For Linux Desktop</title><link href="http://lisafly.github.io/blog/dual-monitor-for-linux-desktop/" rel="alternate"></link><updated>2013-03-10T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-03-10:blog/dual-monitor-for-linux-desktop/</id><summary type="html">&lt;p&gt;Type &lt;code&gt;xrandr&lt;/code&gt; or &lt;code&gt;xrandr -q&lt;/code&gt; in terminal to dispaly information of all available output device.
Then you can use the following commands to set dual display.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;xrandr&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;VGA1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; 
    &lt;span class="n"&gt;xrandr&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;VGA1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;LVDS1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;
    &lt;span class="n"&gt;xrandr&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;VGA1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="n"&gt;x800&lt;/span&gt;
    &lt;span class="n"&gt;xrandr&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;VGA1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;off&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;VGA1&lt;/code&gt; and &lt;code&gt;LVDS1&lt;/code&gt; should be replaced by with appropriate device names. &lt;/p&gt;</summary><category term="DE"></category><category term="Linux"></category><category term="monitor"></category></entry><entry><title>General Tips For Linux</title><link href="http://lisafly.github.io/blog/general-tips-for-linux/" rel="alternate"></link><updated>2013-03-10T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-03-10:blog/general-tips-for-linux/</id><summary type="html">&lt;h2&gt;Terminal&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nautilus-open-terminal allow you to open a terminal in any directory 
via short menu.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A good backgroup color setting for terminal Hue: 85, Saturation: 36,
Value: 71, Red: 155, Green: 182 and Blue: 117. color name: #9BB675.
Cursor color: #B93A3A.
The theme goes well with this color setting is "Xterm".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Up&lt;/span&gt; &lt;span class="n"&gt;arrow&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;Down&lt;/span&gt; &lt;span class="n"&gt;arrow&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;Shift+PageUp&lt;/code&gt; and &lt;code&gt;Shift+PageDown&lt;/code&gt; to scroll up and down in
virtual console.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Shell&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;White spaces matters a lot in bash. To assign a string to a variable,
you can use &lt;code&gt;v=some_content&lt;/code&gt; but not &lt;code&gt;v = some_content&lt;/code&gt;. 
The reason is that space is used to separate bash commands and arguments. 
Bash will treat &lt;code&gt;v&lt;/code&gt; as a command instead of a variable. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To source in a bash file "a-bash-file" so that commands in the file
will be executed, you can use &lt;code&gt;source a-bash-file&lt;/code&gt;, or you can use a
period "." in place of "source", i.e., you can also use &lt;code&gt;.
a-bash-file&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;return&lt;/code&gt; returns a bash function and thus can only be used in a bash
function. The argument of &lt;code&gt;return&lt;/code&gt; must be a numeric number. &lt;code&gt;exit&lt;/code&gt;
exits the bash enviroment, i.e., terminate the terminal you're
using.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to add path to the "PATH" environment variable, use the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;path_to_add&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to add the path permanently, you can put the command
into the ".bashrc" file under your home directory. If you have to
add lots of paths into the PATH environment variable, you can put
them into a seperate file, and link it in the ".bashrc" file.&lt;/p&gt;
&lt;h2&gt;Path in Bash Script&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Full path of current directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;PWD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;base name of current directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PWD&lt;/span&gt;&lt;span class="c"&gt;##*/&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;basename&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;PWD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;cd&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;use - to go back to last directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use $CDPATH&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use pushd and popd&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;FTP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ftp transfer non-text use binary mode&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;File Association&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The user-specific file association information is save in the file \
&lt;code&gt;/.local/share/applications/mimeapps.list&lt;/code&gt;, and the global file
association information is saved in file &lt;code&gt;/etc/gnome/defaults.list&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Change Hostname&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To change hostname permanently, change the hostname to what you want
in files [] &lt;code&gt;/etc/hostname&lt;/code&gt; and [] &lt;code&gt;/etc/hosts&lt;/code&gt;, and then use the
following code to make the change in effect without restarting your
computer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Network&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To get the your external ip address, use the following simple command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;ifconfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To scan for all ips in a local network, you can use the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;arp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can specify an device to scan by øption&lt;code&gt;-I&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;arp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where "dev" is the device name of your net card. For example, if you
use wireless network, "dev" is probably "wlan0".&lt;/p&gt;
&lt;h2&gt;sudo&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To change the timeout of the sudo password, add the following line
to the end of the /etc/sudoers file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Defaults&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;your_username&lt;/span&gt; &lt;span class="n"&gt;timestamp_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SECONDS&lt;/span&gt;
&lt;span class="n"&gt;Defaults&lt;/span&gt; &lt;span class="n"&gt;syslog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;passwd_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;users and groups&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; displays information of a user.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Skills&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you select some text, right click on it but nothings happens
(i.e., no short menu poped up), it means that the selected text has
already been copied to the mouse buffer. This is one place that
Linux is different from Windows. Notice that no all selct and copy
process is like this. You still have to copy the selected text into
the buffer manually sometimes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hard drive related operations: &lt;a href="http://www.skullbox.net/newsda.php"&gt;http://www.skullbox.net/newsda.php&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check cpu information &lt;code&gt;cat /proc/cpuinfo&lt;/code&gt; and memory &lt;code&gt;cat /proc/meminfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux system support &lt;code&gt;true random number generator&lt;/code&gt;, which is
implemented by collecting the noise generate by hardwares. To use
generate &lt;code&gt;true random numbers&lt;/code&gt;, we can use command like
&lt;code&gt;head -1 /dev/random | od -i -N 10 | awk '{ print $2 }'&lt;/code&gt;. Note that
&lt;code&gt;/dev/random&lt;/code&gt; if the entropy pool in the machine is empty will block
until additional environmental noise is gathered. If you don't want
to be block, you can use &lt;code&gt;/dev/urandom&lt;/code&gt; to generate &lt;code&gt;random
numbers&lt;/code&gt;, which reuses the internal pool to produce more
pseudo-random bits when the entropy pool is empty. Though
&lt;code&gt;/dev/urandom&lt;/code&gt; might contain less entropy than &lt;code&gt;/dev/random&lt;/code&gt; does,
it's still valide for usual use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tips"></category><category term="Linux"></category></entry><entry><title>Tips for Installing Debian Series Linux Distributions</title><link href="http://lisafly.github.io/blog/tips-for-installing-debian/" rel="alternate"></link><updated>2013-03-02T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2013-03-02:blog/tips-for-installing-debian/</id><summary type="html">&lt;h2&gt;Before Installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can either create a boot CD/DVD or flash drive to install debian.
The way I prefer is to instal debian using a bootable flash drive 
because many laptops do not have CD/DVD trays. 
To write a debian image to flash drive, you can use the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;path_to_debian_image&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;path_of_device&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or can you also use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;path_to_debian_image&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;path_of_device&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where path of device is the path of the flash drive. 
Note that you must use the whole device (e.g., /dev/sdb) not just a partition (e.g., /dev/sdb1),
otherwise the flash drive is not bootable.
You have to aware that both the 2 commands above are dangerous as they can destory data on the device,
so you'd better be sure about what you are doing. 
For more information, see &lt;a href="http://www.debian.org/CD/faq/#write-usb"&gt;http://www.debian.org/CD/faq/#write-usb&lt;/a&gt;.
(The two simple ways for creating bootable falsh drives also applies to many other Linux distributions. 
It requires that the ISO image is hybrid. 
If not, you can use the following command to make it hybird if it uses isolinux/syslinux technology.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;isohybrid&lt;/span&gt; &lt;span class="n"&gt;path_to_linux_image&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then you can use either &lt;code&gt;dd&lt;/code&gt; or &lt;code&gt;cat&lt;/code&gt; to the write the image into a device.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You'd better have ethernet connection. 
The wireless support for Linux is still not perfect.
Depending on the brand of your laptop, 
you might need to connect to internet through ethernet network during installation.
What's more, 
the ethernet network is faster than a wireless network. 
So it is suggested that you alway use a ethernet network connection while installing debian.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure the power of your laptop is plugged in. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;During Installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is recommended that you use the text installation. 
The text installation of Debian actually is pretty intuitive and easy to follow.
The graphical installation of Debian did not work on any of my laptops.
I am not sure whether the problem has been fixed or not, 
but it does not hurt to use the text installation. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since Debian can keep data in the home directory during installation,
it is suggested that you do not use a separate home directory. 
Following this suggestion, 
you have to set the mount point of the disk to install debian as &lt;code&gt;/&lt;/code&gt; (root directory). 
You also have to use a swap partition. 
The size of the swap parition is controversial, 
generally speaking it should be 1 to 2 times the memory of the computer.
I often set the size of the swap partition to be 1.5 times the memory of the computer. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your network is not very fast, 
you can choose not to use network mirrors especially when your installation image is update to date. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you do not like the default desktop enviroment of Debian (currently Gnome),
you can deselect the desktop environment during installation. 
This also makes the installation faster.
You can install a desktop enviroment you like manually after installtion of Debian. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;After Installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The first thing to do after installtion is to edit the APT (advance package tool) configuration file &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;. 
By default, debian uses the installing media as a repository after installation.
However, the media is usually removed and thus unavailable after installation.
So, you probably want to delete or comment out the repository using the installing media.
Also, if you did not use a network mirror duing installation, 
you have to add a debian repository into the APT configuration file manually.
For example, you can add the following lines into the APT configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://ftp.us.debian.org/debian/&lt;/span&gt; &lt;span class="kp"&gt;wheezy&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt;
&lt;span class="k"&gt;deb&lt;/span&gt; &lt;span class="s"&gt;http://ftp.us.debian.org/debian/&lt;/span&gt; &lt;span class="kp"&gt;wheezy&lt;/span&gt; &lt;span class="kp"&gt;main&lt;/span&gt; &lt;span class="kp"&gt;contrib&lt;/span&gt; &lt;span class="kp"&gt;non-free&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is suggested that you include &lt;code&gt;contrib&lt;/code&gt; and &lt;code&gt;non-free&lt;/code&gt; in the repository.
This ensures that you can also use many non-open source but cost-free softwares.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The second thing to do after installation of Debian is to install the &lt;code&gt;sudo&lt;/code&gt; package and configure it.
You have to switch to root to install packages.
To switch to root, type in &lt;code&gt;su&lt;/code&gt; (super user) in the terminal. 
You will be asked for the password of root.
After authentication, you are in root user. 
Notice that the prompt character is &lt;code&gt;#&lt;/code&gt; (instead of &lt;code&gt;$&lt;/code&gt;) for the root user. 
You can type &lt;code&gt;apt-get install sudo&lt;/code&gt; in the terminal (as root) to install the package &lt;code&gt;sudo&lt;/code&gt;.
After installation of &lt;code&gt;sudo&lt;/code&gt;,
you have to give yourself the &lt;code&gt;sudo&lt;/code&gt; access. 
To do this, 
type &lt;code&gt;visudo&lt;/code&gt; in the terminal (as root). 
The &lt;code&gt;sudo&lt;/code&gt; configuration file will be open in the &lt;code&gt;nano&lt;/code&gt; editor (as root). 
You will see a line like this &lt;code&gt;root ALL(ALL:ALL) ALL&lt;/code&gt;.
Add a simlar line after this one with &lt;code&gt;root&lt;/code&gt; replaced with your user name. 
Save (CTRL+O) and exit (CTRL+X) nano. 
Now you have access to &lt;code&gt;sudo&lt;/code&gt; and you can use &lt;code&gt;sudo&lt;/code&gt; (instead of root user) to do operations that need root permission.
Type &lt;code&gt;exit&lt;/code&gt; in the terminal to exit the root user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The third thing to do after installation of Debian is to install the &lt;code&gt;wajig&lt;/code&gt; package.
To do this, 
type &lt;code&gt;sudo apt-get install wajig&lt;/code&gt; in the terminal (as your own user).
You will be prompt for your user password to install the package. 
Surely, you can install the &lt;code&gt;wajig&lt;/code&gt; package together with the &lt;code&gt;sudo&lt;/code&gt; package in the second step. 
To do this, 
you can use command &lt;code&gt;apt-get install sudo wajig&lt;/code&gt; as root. 
However, it is suggested that you avoid use th root user as much as possible. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The last step is to install and configure other necessary packages.
Now you have &lt;code&gt;sudo&lt;/code&gt; and &lt;code&gt;wajig&lt;/code&gt; installed, 
you can use &lt;code&gt;wajig&lt;/code&gt; to manage packages,
and you should use &lt;code&gt;sudo&lt;/code&gt; instead of the root user to operations need root permissions.
For example, 
to install other packages such as &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;eclipse&lt;/code&gt;, 
you can type &lt;code&gt;wajig install vim eclipse&lt;/code&gt; in the terminal (as your own user).
You will be prompt for your user password to continue. 
Notice that &lt;code&gt;wajig&lt;/code&gt; is a little special command, 
it automatically uses &lt;code&gt;sudo&lt;/code&gt; to install packages when necessary. 
For other operations that need root permission, 
you have to use &lt;code&gt;sudo&lt;/code&gt; before the command. 
For example, if you use &lt;code&gt;apt-get&lt;/code&gt; to install packages &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;eclipse&lt;/code&gt;,
you must use &lt;code&gt;sudo apt-get install vim eclipse&lt;/code&gt; manually.
However, in practice I avoid using &lt;code&gt;sudo&lt;/code&gt; as much as possible. 
I often use a command first without prefixing it with &lt;code&gt;sudo&lt;/code&gt;, 
if it fails because of permission, 
I then use command &lt;code&gt;sudo !!&lt;/code&gt; to run it using &lt;code&gt;sudo&lt;/code&gt; quickly.
Generally speaking, this is safer than abusing &lt;code&gt;sudo&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Wireless&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You might have to install wireless dirvers manually 
depending on the type of wireless card in your computer. 
You can use the following command to check the type of the wireless card in your computer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lspci&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;wireless&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then you can search for the driver/package that support your wireless card. 
For example, the result of the above command on my laptop is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;00.0&lt;/span&gt; &lt;span class="n"&gt;Network&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Intel&lt;/span&gt; &lt;span class="n"&gt;Corporation&lt;/span&gt; &lt;span class="n"&gt;PRO&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Wireless&lt;/span&gt; &lt;span class="mi"&gt;5100&lt;/span&gt; &lt;span class="n"&gt;AGN&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Shiloh&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Network&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This wireless card is supported by iwlwifi. 
If you have included non-free softwares in your debian repository 
(see the first step after installation),
you can type &lt;code&gt;wajig install firmware-iwlwifi&lt;/code&gt; in terminal to install it. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you have installed a desktop environment, 
you usually have a network manager to manager the wireless interface. 
In this case, 
it is strongly suggested that you comment everything out in the (or use an empty) configuration file &lt;code&gt;/etc/network/interface&lt;/code&gt;.
Otherwise, 
you might not be able to use the wireless network though the network manager shows that you have connected to it. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;sshfs and fuse&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you want to be able to mount remove Linux filesystem on you computer, 
you can install sshfs and fuse using the following command. &lt;/p&gt;
&lt;p&gt;wajig install sshfs fuse&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's suggested that you add you user name into the fuse group using the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;usermod&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;aG&lt;/span&gt; &lt;span class="n"&gt;fuse&lt;/span&gt; &lt;span class="n"&gt;user_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have to restart your computer to make the action take effect. &lt;/p&gt;
&lt;h2&gt;Suggestions for Other Debian Series Linux Distributions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you create a boot flash drive for Ubuntu in Windows using UNetbootin or other softwares, 
then you'd better format the flash drive as &lt;code&gt;FAT&lt;/code&gt; instead of &lt;code&gt;FAT32&lt;/code&gt;. 
Otherwise, 
you might get the error information: "BOOTMGR is missing".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, LMDE installs 486 on 32 bit computers.
If your computer has more than 1 cores/processors, 
you can upgrade to 686-pae manually by running the following command in terminal
and then reboot your computer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wajig&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.0.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;686&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pae&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</summary><category term="install"></category><category term="Linux"></category><category term="software"></category><category term="Debian"></category></entry><entry><title>Make Your Life Easier with Portable Applications</title><link href="http://lisafly.github.io/blog/portable-apps/" rel="alternate"></link><updated>2012-12-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-20:blog/portable-apps/</id><summary type="html">&lt;p&gt;Using portable applications is a good way to make your life easier. 
They do not eat up your disk nor do they mess up the registry of your Windows OS.
You can always copy these applications from one computer to another and use it out of box.
Or you can install portable applications on a flash drive and use it on any Windows OS.
There is an &lt;a href="http://www.portableapps.com/"&gt;English website&lt;/a&gt; for portable apps.
It offers a portable applications plotform 
which can automatically search for updates of portable apps, 
download portable apps and install them. 
There is also a &lt;a href="http://www.portableappc.com/"&gt;Chinese website&lt;/a&gt; 
offering portable apps compatible with the portable apps platform. &lt;/p&gt;</summary><category term="application"></category><category term="Chinese"></category><category term="software"></category><category term="portable"></category></entry><entry><title>Compile MATLAB Code</title><link href="http://lisafly.github.io/blog/compile-matlab-code/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/compile-matlab-code/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MATLAB code can be compile to C/C++ code or stand alone applications. 
Usually you can run the stand-alone application in Windows system directly, 
but for Linux system it is a little headachy. 
The stand-alone application usually takes less than 50% of the time 
that the original MATLAB code takes to run.
This depend on different situations. 
It can happen that the stand-alone application runs slower than the original MATLAB code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To compile MATLAB code to c code, 
you can use &lt;code&gt;mcc -mc mainfn sub1fn sub2fn&lt;/code&gt;, 
and to produce an stand alone executable file from c files,
you can use &lt;code&gt;mbuild mainfun sub1fn sub2fn&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To compile MATLAB code to c++ code 
and to create a corresponding stand-alone executable file 
you can use &lt;code&gt;mcc -p mainfn sub1fn sub2fn&lt;/code&gt;. 
To compile MATLAB code that contains Handle Graphics functions into C++ 
and to create a corresponding stand-alone executable file, 
you can use &lt;code&gt;mcc -B sglcppp mainfn sub1fn sub2fn&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To compile MATLAB code to c and to create corresponding stand-alone executable file, 
you can use &lt;code&gt;mcc -m mainfn sub1fn sub2fn&lt;/code&gt;. 
To compile MATLAB code that contains Handle Graphics functions into c 
and to crate a corresponding stan-alone executable file, 
you can use &lt;code&gt;mcc -B sgl mainfn sub1fn sub2fn&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use parallel computing, 
you will not be able to run the compiled application (at least before version 2010b) 
unless you have MATLAB Distributed Computing Server (MDCS) available on a computer cluster. 
If you have access to a MDCS, 
there is little necessary for you to compile your MATLAB parallel code to a stand-alone application, 
so just do not bother to compile your MATLAB parallel code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="compile"></category><category term="compiler"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Filesystem in MATLAB</title><link href="http://lisafly.github.io/blog/filesystem-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/filesystem-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;path&lt;/code&gt; can be used to either display or modify the search path of MATLAB. 
Its functionality in MATLAB is similar to the functionality of environment variable &lt;code&gt;PATH&lt;/code&gt; 
for DOS shell in Windows systems, 
and the use of them is also similar. 
&lt;code&gt;addpath&lt;/code&gt; can be used to add new folders to the search path. 
It is a more friendly and convenient way to modify the search path than &lt;code&gt;path&lt;/code&gt;. 
To add a folder and all its subfolders to the search path, 
you can use &lt;code&gt;addpath&lt;/code&gt; together with &lt;code&gt;genpath&lt;/code&gt; 
which can generate path strings for a folder and all its subfolders. 
To remove an existing path from the search path, 
you can use &lt;code&gt;rmpath&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;what&lt;/code&gt; can list the path for the current folder, 
and also files and folders relevant to MATLAB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;dlmread&lt;/code&gt; is helpful to read delimited files (e.g. Excel files), 
and &lt;code&gt;dlmwrite&lt;/code&gt; is helpful to write delimited files. 
However,
be careful with &lt;code&gt;dlmwrite&lt;/code&gt; when you want to write high accuracy data into a file, 
because by default &lt;code&gt;dlmwrite&lt;/code&gt; keeps only a few digits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To read data from or write data into a file, 
you must first use function &lt;code&gt;fopen&lt;/code&gt; to open it to get a file pointer, 
and then you can use all different kinds of ways to read from 
(e.g. &lt;code&gt;fread&lt;/code&gt;, &lt;code&gt;dlmread&lt;/code&gt;, &lt;code&gt;fscanf&lt;/code&gt; and &lt;code&gt;textread&lt;/code&gt;) 
or write into a file (e.g.  &lt;code&gt;fwrite&lt;/code&gt;, &lt;code&gt;dlmwrite&lt;/code&gt;, &lt;code&gt;fprintf&lt;/code&gt;). 
If you want to access a file randomly, 
you can use &lt;code&gt;fseek&lt;/code&gt; to move the file point to a specific position. 
Never forget to close the file pointer using function &lt;code&gt;fclose&lt;/code&gt; after you have done reading or writing. 
Usually it is much faster to read from or write into a binary file 
than to read from or write into a text file, 
and typically a binary file is smaller than a text file that contains the same data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are many ways to test the speed of code in MATLAB. 
The first way is to use &lt;code&gt;Profile&lt;/code&gt; button under &lt;code&gt;Desktop&lt;/code&gt; menu; 
the second way is to use function &lt;code&gt;tic&lt;/code&gt; and &lt;code&gt;toc&lt;/code&gt;; 
the third way is to record the time manually using function &lt;code&gt;now&lt;/code&gt; 
and then use function &lt;code&gt;etime&lt;/code&gt; to calculate the elapsed time; 
the last ways is similar to the third way, 
but you can record the cpu time using function &lt;code&gt;cputime&lt;/code&gt; instead of the system time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; can print out the current work directory of MATLAB, 
which is similar to the &lt;code&gt;pwd&lt;/code&gt; command in Linux shell.
Though it is mutable, 
you'd better not change it. 
Because even if you change it, 
the current working directory will not change. 
To change the current working directory to a new one, 
you can use function &lt;code&gt;cd&lt;/code&gt;. 
Whenever the working directory is changed, 
&lt;code&gt;pwd&lt;/code&gt; be change to the current working directory. 
Note that the current working directory is always in the search path of MATLAB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;save&lt;/code&gt; to save MATLAB workspace 
or selected variables into a file 
and &lt;code&gt;load&lt;/code&gt; to load data from a MAT file to MATLAB workspace. 
To display variables in the workspace, 
you can use &lt;code&gt;whos&lt;/code&gt;; 
to remove some variables from the workspace, 
you can use &lt;code&gt;clear&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To display files and sub-folders of a folder, 
you can use &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;dir&lt;/code&gt;, 
which is same to Linux terminal command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;exit&lt;/code&gt; or &lt;code&gt;quit&lt;/code&gt; to terminate current session of MATLAB,
but you'd better save the MATLAB workspace first if necessary. 
If you want MATLAB to do some tasks before quitting, 
you can put put the corresponding code into file &lt;code&gt;finish.m&lt;/code&gt; 
and place the file into the search path of MATLAB or into the current folder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To remove files or graphics objects, 
you can use &lt;code&gt;delete&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fileattrib&lt;/code&gt; can get and set attributes of files and folders in MATLAB.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="filesystem"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>General Tips For Matlab</title><link href="http://lisafly.github.io/blog/general-tips-for-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/general-tips-for-matlab/</id><summary type="html">&lt;h2&gt;Skills&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Matlab support profiling running time of code, 
so that you what to work on to optimize your code.s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is expensive to allocate a new block of memory (not only in Matlab
but also in other programming laguages), 
so you should avoid allocating new blocks of memory all the time. 
It is better to allocate a big block of memory once and forever 
if you know the actually size of memory that you have to use 
(e.g. usually you know the size of arrays and matrices that you are going to use) 
than to allocate small blocks of memory many times. 
If it is impossible to avoid allocating new blocks of memory, 
it is better to allocate a bigger memory than needed each time. 
In this way, you waste space but might save much time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use block &lt;code&gt;try ... catch ... end&lt;/code&gt; to handle code that might throw exception in matlab. 
You should be aware of the importance of handling exception. 
In many cases you just cannot afford to stop running code, 
for example the program written for a rocket should not stop running when exception happens. 
Even for statistician, 
it is very important to handle exceptions. 
For example, if you run a code which might takes 2 month, 
but your code throws out an exception after running a month. 
Do you want the program to the stop running after half the the long task has been done? 
So a better ways is always handle any exceptions that throws out. 
Some exceptions might result from hardware (e.g. no enough disk space). 
In this case, 
you can let your code notify you (e.g. via email or text message) 
and then wait for you fix the problem and then continue running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes you might want to write a user-defined function 
with variable (even unknown) number of arguments. 
There are some functions helpful for this in matlab. 
&lt;code&gt;nargin&lt;/code&gt; and &lt;code&gt;nargout&lt;/code&gt; returns the number of input variables and output variables; 
&lt;code&gt;nargcheck&lt;/code&gt; and &lt;code&gt;nargoutchk&lt;/code&gt; validate number of input and output arguments respectively; 
&lt;code&gt;varargin&lt;/code&gt; and &lt;code&gt;varargout&lt;/code&gt; stand for input and output argument lists respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;break, return goto and error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, matlab use "short" format to display out, 
which uses only four decimal digits for numbers. 
To change the display format, you can use &lt;code&gt;format&lt;/code&gt;. 
For example, you can use &lt;code&gt;format('longG')&lt;/code&gt; to make matlab give more readable outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can execute system command by invoke &lt;code&gt;system&lt;/code&gt;, 
which is similar to R. 
For example, 
to shutdown computer 1 hour after computing in matlab is done in Windows operating system, 
you can add &lt;code&gt;shutdown('shutdown/s /t 3600')&lt;/code&gt; at the end of your code 
or just type it into the console while the code is running. 
Similarly, 
you can invoke &lt;code&gt;dos&lt;/code&gt; to run dos command and &lt;code&gt;perl&lt;/code&gt; to execute perl script.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;computer&lt;/code&gt; to get information about the computer on which matlab is running.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Programming&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The programming style of Matlab is somehow similar to &lt;code&gt;Visual Basic&lt;/code&gt;. 
Its style is a mixing of &lt;code&gt;Basic&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;. 
Also it has its own features. 
To declare a used-defined function in Matlab, 
you must use keyword &lt;code&gt;function&lt;/code&gt; and then tell Matlab 
what results you want the function to return.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are two types of objects in Matlab: value object and handle object. 
A value object behaves like being passed by value 
while a handle object is passed by reference. 
By default objects (matrix, array and so on) in matlab are value objects. 
However, even if a value object behaves like being passed by value, 
if it is not modify inside a function when passed to the function, 
no copy will be made into the workspace of the function. 
This system is so called copy-on-write, 
which might save much memory if the matrices or arrays passed are huge. 
The famous statistical software R will always make a copy of a argument 
if it is passed by value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Matlab does not check the passing of parameters to functions. 
Whether the parameters passed to a function are illegal can only be decide at run time, 
which is the way that most interpret language use.
If your code takes lots of time to be run (e.g. a big simulation),
you'd better first downgrade the complexity of the problem and run a test code, 
otherwise you might find that there is in your code after you have run your code for a long time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, 
variables appear in a user-defined function 
and variables in the workspace are local variable, 
which means that you cannot use variables from the workspace in a user-defined function
nor can you use variables from a user-defined function in the workspace. 
To make a variable global, 
you can use command &lt;code&gt;global&lt;/code&gt;, e.g. to make variable &lt;code&gt;x&lt;/code&gt; global you can use &lt;code&gt;global x;&lt;/code&gt;. 
If a variable is global, 
you can use it everywhere if you have made the necessary declaration 
(e.g. you have to declare that a variable is global in a user-defined function, 
if you want to use it as global.), 
and its value will be the same everywhere 
(This is because no matter where you use it, 
it points to the same place in the memory).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To run a bunch of code, you can put the code into a M file or you can define a function. 
Sometimes, 
there are a few of small pieces of code that you use a lot 
but they are too short and will be used only in a single work 
that you hesitate to write them into M files or to write them as functions. 
What you can do is to define them as inline functions or function handles. 
Inline functions work only for very simple functions. 
Every symbol appear in a inline function string is treated as a variable, 
so you cannot pass data into a inline function except for constants. 
Function handle is more flexible way to deal with this situation. 
You can use any object in the workspace in a function handle. 
What's more, a function handle cannot be changed after it is defined. 
For example, if a function handle uses an object in the workspace, 
it remains the same even if you change the object or remove it from the workspace, 
which is usually what we expect. 
So generally speaking function handles are more flexible 
and useful than inline functions, 
but surely it is slower than inline functions. 
Function handles are usually used to wrap existing functions for convenient use. 
For example, 
in statistics data is usually passed to a likelihood function as a parameter 
because global variable is generally not a good idea. 
When you optimize a likelihood function, 
you do not want to optimize over the data parameter. 
To handle this situation, please refer to section &lt;code&gt;optimization&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; evaluate string containing matlab expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The passing of a function as an argument of another function 
is achieved through function handle in MATLAB. 
To get the function handle of an existing function (not a function handle), 
you can simply add a prefix &lt;code&gt;@&lt;/code&gt; to it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tips"></category><category term="skills"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Use MATLAB to Do Visualization</title><link href="http://lisafly.github.io/blog/graphics-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/graphics-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To display a new graph on on top of an old one, 
you can use command &lt;code&gt;hold on&lt;/code&gt;. 
In this way, 
you can create multiple plots in a same window. 
Though &lt;code&gt;plot&lt;/code&gt; can already do multiple plot, command &lt;code&gt;hold on&lt;/code&gt; 
can be very useful when you want to add some new points 
or curves to an existing graph (e.g. a histogram).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;subplot&lt;/code&gt; displays multiple plots in the same window,
which is similar to settings &lt;code&gt;par(mfrow=c(2,2))&lt;/code&gt; or &lt;code&gt;par(mfcol=c(2,3))&lt;/code&gt; in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;hist&lt;/code&gt; and &lt;code&gt;histc&lt;/code&gt; produces histograms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;staris&lt;/code&gt; produces step graph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;plot&lt;/code&gt; plots &lt;code&gt;2-D&lt;/code&gt; graph 
while function &lt;code&gt;surf&lt;/code&gt; plots &lt;code&gt;3-D&lt;/code&gt; graphs. 
Function &lt;code&gt;surf&lt;/code&gt; is usually used in conjugate with function &lt;code&gt;meshgrid&lt;/code&gt; 
which can create a matrix of points over which the surface is to be plotted. 
You can also use &lt;code&gt;ndgrid&lt;/code&gt; instead of &lt;code&gt;meshgrid&lt;/code&gt; to generate a matrix of points.
However, 
&lt;code&gt;ndgrid&lt;/code&gt; is usually higher dimensions and the usage is a little different from &lt;code&gt;meshgrid&lt;/code&gt;, 
so you have to be careful if you wan to use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After plotting figures using &lt;code&gt;plot&lt;/code&gt;, 
you can use &lt;code&gt;title&lt;/code&gt; to add titles for the figures, 
&lt;code&gt;axis&lt;/code&gt; to set configurations for the axies,
and &lt;code&gt;xlabel&lt;/code&gt; and &lt;code&gt;ylabel&lt;/code&gt; to set labels for the x and y axes. 
You can also use &lt;code&gt;set&lt;/code&gt; to set all configurations for the plots. 
To do this, 
you have to first get the handle of the elements in the plots that you want to modify, 
and then apply &lt;code&gt;set&lt;/code&gt; on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;inpolygon&lt;/code&gt; can check whether given points are inside a polygon or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spy&lt;/code&gt; visualizes sparse matrices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;image&lt;/code&gt; can not only display images but also make mosaic plot
(sometimes called heat plot or level plot) of a matrices. 
For example, to show the mosaic plot of matrix &lt;code&gt;x&lt;/code&gt;, 
you can use &lt;code&gt;image(x,'CDataMap','CDataMapping','scaled')&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="image"></category><category term="visualization"></category><category term="programming"></category><category term="plot"></category><category term="graphics"></category><category term="MATLAB"></category></entry><entry><title>Linear Algebra in MATLAB</title><link href="http://lisafly.github.io/blog/linear-algebra-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/linear-algebra-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike most other programming languages, 
to get elements of an array in MATLAB, 
you have to parentheses to specify index. 
See more information in &lt;a href="http://dclong.github.io/en/2012/05/containers-summary-in-popular-languages/"&gt;this post&lt;/a&gt;.
If you want to get or set elements of a cell in MATLAB, 
you have to use curly braces. 
If you use parentheses to extract elements of a cell,
the result will still be a cell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;vrrotmat2vec&lt;/code&gt; converts a rotation matrix to its axis-angle representation. 
Conversely, 
&lt;code&gt;vrrotvec2mat&lt;/code&gt; converts an axis-angle
(the axis do not have to be a unit one, as long as it is not a zero vector) 
representation of a rotation matrix to a matrix form.
There are also many other representations of a rotation matrix, 
e.g. Euler angle representation and quaternion representation.
&lt;code&gt;dcm2angle&lt;/code&gt; and &lt;code&gt;angle2dcm&lt;/code&gt; converts between a rotation matrix and its Euler angle representation; 
&lt;code&gt;quat2dcm&lt;/code&gt; and &lt;code&gt;dcm2quat&lt;/code&gt; converts between a rotation matrix and its quaternion representation;
&lt;code&gt;quat2angle&lt;/code&gt; and &lt;code&gt;angle2quat&lt;/code&gt; converts between the Euler angle representation 
and quaternion representation of a rotation matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;all&lt;/code&gt; to check whether the elements of a vector 
(either a column vector or a row vector) are all &lt;code&gt;true&lt;/code&gt; (or non-zero values). 
How ever if you apply &lt;code&gt;all&lt;/code&gt; on an matrix or a multi-dimensional array, 
you will get vectors or arrays of boolean values depending on the dimension you specified. 
To check whether all elements of a matrix or multi-dimensional array are &lt;code&gt;true&lt;/code&gt; 
(or non-zero values), 
you have use &lt;code&gt;all&lt;/code&gt; more than once. 
For example, 
if &lt;code&gt;bmat&lt;/code&gt; is a boolean matrix in MATLAB, 
you can use &lt;code&gt;all(all(bmat))&lt;/code&gt; to check whether all elements of &lt;code&gt;bmat&lt;/code&gt; are &lt;code&gt;true&lt;/code&gt;. 
&lt;code&gt;any&lt;/code&gt; works similarly to &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;size&lt;/code&gt; to get the dimensions of an array. 
You can specify more output variables than necessary for &lt;code&gt;size&lt;/code&gt;, 
and these redundant variables will have value &lt;code&gt;1&lt;/code&gt;. 
If you specify less output variables than the dimension of the array, 
then the last output variable is the product of these left dimensions. 
To get the $k^&lt;code&gt;th&lt;/code&gt;$ dimension of an array &lt;code&gt;a&lt;/code&gt;, 
you can simply use &lt;code&gt;size(a,k)&lt;/code&gt;. 
If you are just interested in the first two dimensions of a multi-dimensional array &lt;code&gt;a&lt;/code&gt;, 
then you can use $[n_1, n_2, \sim]$ to extract the first two dimensions, 
where $\sim$ means that the left dimensions will be ignored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To get the largest dimension of an array, 
you can use &lt;code&gt;length&lt;/code&gt;, 
which is different from R that uses &lt;code&gt;length&lt;/code&gt; to get the total number of elements in an array or list. 
To get the total number of elements of an array in MATLAB, you have to use &lt;code&gt;numel&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;arrayfun&lt;/code&gt; applies a given function to each element of an array,
which is similar to &lt;code&gt;apply&lt;/code&gt; in R. 
&lt;code&gt;arrayfun&lt;/code&gt; in MATLAB is not as convenient as &lt;code&gt;apply&lt;/code&gt; in R 
which can also apply a function to marginals of an arrays instead of only elements of the array,
however there are some functions (mostly statistical summary functions) 
in MATLAB that allows you to work on specified marginals of an array, 
e.g. &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt; and so on. 
Use these functions can avoid inconvenient loops in MATLAB. 
Sometimes, 
you might want to pass extra parameters to the function 
that is to be applied to each element of an array. 
&lt;To do this, please refer to ...&gt;
Similar to &lt;code&gt;arrayfun&lt;/code&gt;, &lt;code&gt;cellfun&lt;/code&gt; applies a given function to each element in a cell array. 
From my experience, &lt;code&gt;cellfun&lt;/code&gt; has advantage when its elements have different sizes (or even types), 
which make coding simpler. 
It does not seem to speed up the code compared to loops. 
There is also another &lt;code&gt;spfun&lt;/code&gt; which applies a given function to non-zero elements of a sparse matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;R&lt;/code&gt; a vectors is very flexible, 
and it can be a row vector or a column vector depends on different situations.
A vector in R is different from a matrix.
In MATLAB a vector is a matrix (either $1\times n)' or $n\times1)') 
and thus there are both column vectors and row vectors in MATLAB.
Function and operations usually behave differently on row vector and column vector in MATLAB. 
Since a vector in MATLAB is essentially a matrix, operations on vectors must
be compatible matrix operations. Since in Mathematics vectors are
column vectors by default, you'd better use column vectors in MATLAB
if both row and column vectors are OK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;isempty&lt;/code&gt; to check whether an array is empty in MATLAB, &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; calculates the null space of a matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;repmat&lt;/code&gt; replicates and tile array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eigs&lt;/code&gt; is frequently used to find the eigenvalues of sparse square
matrices. Because a sparse square matrix usually has a very large
dimension, it has a large amount (the same as its dimension) of
eigenvalues. Usually only a few of them are interesting. To
calculate the $k)' large eigenvalue of a sparse matrix &lt;code&gt;spm&lt;/code&gt;, you
can use &lt;code&gt;eigs(spm,k)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="algebra"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>How MATLAB is Different from Other Programming Languages</title><link href="http://lisafly.github.io/blog/matlab-different/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/matlab-different/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MATLAB support command style (like Linux terminal commands).
This means that you do not have to use parentheses when you call some
functions, instead, you can use spaces to separate a function and
its arguments.
And when an argument of a function is string, you
do not have to use single quotation mark when you call the function
using command style. When a function does not take any arguments,
you can call the function by parentheses with nothing in or you can
ignore the parentheses and just use the name function to call it.
For example, to generate a rand number between 0 and 1, you can use
&lt;code&gt;rand()&lt;/code&gt; or you can simply use &lt;code&gt;rand&lt;/code&gt;. This is much more convenient
compared to many other languages. e.g. R
However, the support not as seamless as Ruby (in which you can use 
command style and function style freely). Not all functions in MATLAB have 
command versions, and usually you
cannot use command version of functions in user-defined functions.
(not very sure whether you can use it in m file or not, check it
later.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In most languages (e.g. ,C++, Java, SAS, etc), 
it is required that you end a statement with &lt;code&gt;;&lt;/code&gt;. 
In some other languages (e.g., R), it does not matter much (if write multiple statements on a line in R, &lt;code&gt;;&lt;/code&gt; can be used to separate them). 
In MATLAB, you are not required to put a &lt;code&gt;;&lt;/code&gt; at the end of a statement. 
However, it is recommneded that you use &lt;code&gt;;&lt;/code&gt; at the end of each statement, 
otherwise the result of the statument will be printed out to the console.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The normal MATLAB statements are continued on new line by putting
three dots (&lt;code&gt;...&lt;/code&gt;), which is different from other popular languages.
Many programming languages allows you to start a new line freely, 
e.g. ,C++, Java, etc. R allows one to start a new line if no ambiguity is introduced. 
Three dots (&lt;code&gt;...&lt;/code&gt;) is often used in other languages (e.g., R and C++11) for variadic functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Though MATLAB support multiple styles of syntax, its
syntax is still more strict than the syntax of R, which make it more
efficient in the cost of convenience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MATLAB use $\sim$ to stand for logical &lt;code&gt;NOT&lt;/code&gt;, which is different
from most of other languages. Usually a programming language uses &lt;code&gt;NOT&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, or &lt;code&gt;$&amp;lt;&amp;gt;$&lt;/code&gt; to stand
for logical &lt;code&gt;NOT&lt;/code&gt;. See a summary on operators in different programming languages 
&lt;a href="http://dclong.github.io/en/2012/06/operators-popular-language/"&gt;in this post&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MATLAB uses &lt;code&gt;disp&lt;/code&gt; to display text of array to the console, which is
different from most other programming languages. 
Most programming languages use functions/routines/methods related
to words &lt;code&gt;print&lt;/code&gt; (printf, print, println, etc) and &lt;code&gt;write&lt;/code&gt; (write, writeln, etc) to print message to the standout put of a file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In other programming languages, you have &lt;code&gt;packages&lt;/code&gt; (e.g. Java,
Mathematica and R), &lt;code&gt;libraries&lt;/code&gt; (e.g. C). In MATLAB, a
similar concept which is called &lt;code&gt;toolbox&lt;/code&gt;, however, it is not exactly 
the same as &lt;code&gt;packages&lt;/code&gt; or &lt;code&gt;libraries&lt;/code&gt; in other languages. 
You can use functions in a toolbox as long as the toolbox is installed.
In R, you have to first load a package in order to use functions in it (or you have to full name of the function).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use strings in MATLAB, you must use single quotation marks,
which is different from many other languages.
For example, in C/C++ and Java, you have to use double quotation marks; 
in languages which have Linux blood (e.g., R, Python, Bash and so on),
you can use either double or single quotation marks (though there might be slight difference between single and double quotations).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MATLAB is not completely case sensitive. MATLAB is case sensitive
for variable names and built-in functions. For scripts and functions
stored in a MATLAB file with a .m extension, case sensitivity is
preserved on UNIX platforms but not on Windows platforms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loops in MATLAB is faster than loops in R.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C++"></category><category term="programming"></category><category term="Java"></category><category term="SAS"></category><category term="R"></category><category term="MATLAB"></category></entry><entry><title>MATLAB IDE</title><link href="http://lisafly.github.io/blog/matlab-ide/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/matlab-ide/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Command &lt;code&gt;help&lt;/code&gt; offers help on functions, classes, packages and so on, 
but it support command style only, 
i.e. it can only be used without parentheses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Shift+F1&lt;/code&gt; hot key in command window opens the function browser in MATLAB. 
The &lt;code&gt;F1&lt;/code&gt; hot key opens the help document for function
where the cursor is. 
The &lt;code&gt;Ctrl+SPACE&lt;/code&gt; hot key pop out parameter hint for the function where the cursor is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Ctrl+C&lt;/code&gt; hot key in command window halts the current execution if any. 
This is helpful if you want to stop a time-consuming evaluation, 
e.g. when you forget to put an semicolon 
after an expression which produces a very large output. 
Note that this can also be dangerous 
if you do want to run a time-consuming program in MATLAB. 
A safe way is to lock the computer 
if you do not have to use it while the code is running, 
or at least you should minimize the MATLAB command window 
so that it will not be interrupted by your misoperation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="IDE"></category><category term="software"></category><category term="MATLAB"></category></entry><entry><title>Numerical Analysis in MATLAB</title><link href="http://lisafly.github.io/blog/numerical-analysis-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/numerical-analysis-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fmincon&lt;/code&gt; finds minimum of constrained nonlinear multivariate function.
&lt;code&gt;fminunc&lt;/code&gt; finds minimum of unconstrained nonlinear multivariate function.
&lt;code&gt;fgoalattain&lt;/code&gt; solves multiobjective goal attainment problems; 
&lt;code&gt;fminimax&lt;/code&gt; solves minimax constraint problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you use one of these functions mentioned above to do optimizations, 
you might want to pass extra parameters to the objective function. 
You can do this directly in R, 
however, 
you have to this indirectly in MATLAB. 
To pass extra parameters to the objective function, 
there are 3 different ways: anonymous function, nested function and global variable. 
I think anonymous function is the best an most nature way to do it. 
Suppose you have defined an objective function &lt;code&gt;myObjFun(x,a,b,c)&lt;/code&gt;, 
and you want to do optimization for given &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;. 
You can first specify values for &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;, 
define a function handle &lt;code&gt;f=@(x)myObjFun(x,a,b,c)&lt;/code&gt;, 
and then optimize function handle &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;quadl&lt;/code&gt; can be used to numerically calculate integrals. 
To calculate integrals symbolically, 
you can use &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Parallel Computing in MATLAB</title><link href="http://lisafly.github.io/blog/parallel-computing-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/parallel-computing-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is very easy to do parallel computing in MATLAB. 
Usually what you have to do is to change &lt;code&gt;for&lt;/code&gt; to &lt;code&gt;parfor&lt;/code&gt; 
for the loop that you want to run in parallel. 
The parallel code can also be run on a single thread and you will not lose much efficiency, 
so you are always encouraged to write parallel code in MATLAB. 
However, to benefit from parallel computing, 
you must open pool of MATLAB sessions first either manually or automatically in your code. 
To open a pool of 4 MATLAB sessions manually, 
you can use the following code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;matlabpool&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To close a pool of MATLAB sessions manually, 
you can use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;matlabpool&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to make your MATLAB parallel code portable, 
you'd better open the pool of MATLAB sessions manually 
instead of open it automatically in your code, 
because different computers have different number of cores.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Though parallel computing in MATLAB is easy, 
it is hard to fix problems if there is any. 
Here is some strategies that you can use 
to avoid problems in parallel computing in MATLAB. 
If a reduced variable does not work well, 
you can use a sliced variable instead, 
and it is more efficient, generally speaking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MATLAB complains if your code is not written appropriately. 
To avoid variable problems in parallel computing in MATLAB, 
you can use the following strategies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a full copy of the array you want to use into each thread.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a sliced array instead of sum variables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="HPC"></category><category term="parallel"></category><category term="concurrency"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Error when Launching MATLAB in Linux</title><link href="http://lisafly.github.io/blog/problem-when-launching-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/problem-when-launching-matlab/</id><summary type="html">&lt;p&gt;See &lt;a href="http://www.mathworks.com/support/solutions/en/data/1-F68FSA/index.html?solution=1-F68FSA"&gt;here&lt;/a&gt;
for more information.&lt;/p&gt;</summary><category term="Linux"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Sending Email in MATLAB</title><link href="http://lisafly.github.io/blog/send-email-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/send-email-in-matlab/</id><summary type="html">&lt;p&gt;It is very easy to send emails in Matlab. 
To do this, you can just call &lt;code&gt;sendmail&lt;/code&gt;. 
However, 
usually you need to set preference for sending emails using &lt;code&gt;setpref&lt;/code&gt; first. 
Here is one example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;%%&lt;/span&gt;
&lt;span class="c"&gt;% Define these variables appropriately:&lt;/span&gt;
&lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;username@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;%Your GMail email address&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;%Your GMail password&lt;/span&gt;
&lt;span class="c"&gt;%%&lt;/span&gt;
&lt;span class="c"&gt;% Then this code will set up the preferences properly:&lt;/span&gt;
&lt;span class="n"&gt;setpref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Internet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;E_mail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;setpref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Internet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SMTP_Server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;setpref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Internet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SMTP_Username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;setpref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Internet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SMTP_Password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;props&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getProperties&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mail.smtp.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mail.smtp.socketFactory.class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;javax.net.ssl.SSLSocketFactory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mail.smtp.socketFactory.port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;465&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c"&gt;%%&lt;/span&gt;
&lt;span class="c"&gt;% Send email. The first argument is recipient.&lt;/span&gt;
&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;receiver@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Test from MATLAB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello! This is a test from MATLAB!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="MATLAB"></category><category term="programming"></category><category term="email"></category></entry><entry><title>Special Functions in MATLAB</title><link href="http://lisafly.github.io/blog/special-functions-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/special-functions-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sin&lt;/code&gt; calculates sine of arguments in radian 
while &lt;code&gt;sind&lt;/code&gt; calculates sine of arguments in degrees; 
&lt;code&gt;asin&lt;/code&gt; calculates inverse of sine resulting in radian 
while &lt;code&gt;asind&lt;/code&gt; calculates inverse of sine resulting in degrees. 
Other triangular functions behave similarly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The modified Bessel function of the first kind &lt;code&gt;$I_n(x)$&lt;/code&gt; 
is implemented as &lt;code&gt;besseli&lt;/code&gt; in matlab. 
Notice that for large value &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;$I_n(x)$&lt;/code&gt; is huge, 
so it is better to use scaled Bessel function for large &lt;code&gt;x&lt;/code&gt;. 
To do this, you just need specify an extra argument for &lt;code&gt;besseli&lt;/code&gt;. 
Notice that other kind of Bessel functions are also implemented in matlab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Incomplete Beta function is implemented as &lt;code&gt;betainc&lt;/code&gt; 
and incomplete Gamma function is implemented as &lt;code&gt;gammainc&lt;/code&gt; in matlab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The logarithm of Gamma function is implemented as &lt;code&gt;gammaln&lt;/code&gt; 
and the logarithm of Beta function is implemented as &lt;code&gt;betaln&lt;/code&gt; in matlab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cart2sph, cart2pol, pol2crt, sph2cart, hsv2rgb&lt;/code&gt; and &lt;code&gt;rgb2hsv&lt;/code&gt; can
transform coordinates between different coordinate systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mfun&lt;/code&gt; can help evaluate special mathematica functions numerically,
but you should be aware of the fact that the result return by
calling &lt;code&gt;mfun&lt;/code&gt; is not as accurate as invoking these special function
directly in matlab, especially when a function is near its root and
its arguments are relatively large. Also &lt;code&gt;mfunlist&lt;/code&gt; can list special
functions for use with &lt;code&gt;mfun&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="function"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Matlab for Statisticians</title><link href="http://lisafly.github.io/blog/statistics-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/statistics-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are generally two ways to generate uniform and normal random numbers in matlab. 
One ways is to use [functions] &lt;code&gt;randu&lt;/code&gt; (for standard normal distribution) 
and &lt;code&gt;rand&lt;/code&gt; (for standard uniform distribution). 
The other way is to use [functions] &lt;code&gt;unirnd&lt;/code&gt; and &lt;code&gt;normrnd&lt;/code&gt; 
(there are also functions end with "rnd" for generating random numbers from other distributions). 
The difference between these two different kinds of functions is that 
the first group of functions generate only "standard" distributions 
while the second group of functions generate distribution with any parameters. 
So the group of functions end with "rnd" is recommended to use.
In old versions (2010a and earlier) of Matlab, 
these random number generating functions end with "rnd" might cause problems 
in parallel computing. 
Then you want to use these two basic functions &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;randu&lt;/code&gt;, 
and use all kinds of technics to generate random variables you want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;randsample&lt;/code&gt; generates a random sample 
from a given collection of data with or without replacement. 
It also support weighted sampling with replacement, 
but does not support weighted sampling without replacement. 
There is another very similar but more powerful function called &lt;code&gt;datasample&lt;/code&gt; 
which support weighted sampling (both with and without replacement). 
Note that both these two functions can generate random permutations 
which was frequently done using &lt;code&gt;randperm&lt;/code&gt; in matlab of older versions. 
For old versions (before 2011b) of matlab, 
you can use &lt;code&gt;randi&lt;/code&gt; to generate random indexes 
and extract corresponding elements of arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When matlab starts, 
it set the random number generator to the default one 
and set the seed to be the default seed. 
So if you run a simulation, 
reboot matlab and run the same simulation, 
you will get the same results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tabular&lt;/code&gt; counts the frequency of observations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;iqr&lt;/code&gt; calculates the interquartile range of given data.
There is a similar function called &lt;code&gt;IQR&lt;/code&gt; in R.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="statistics"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>String In Matlab</title><link href="http://lisafly.github.io/blog/string-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/string-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To display special characters (e.g. &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\t&lt;/code&gt; and so on),
you have to use &lt;code&gt;sprintf&lt;/code&gt; to format it first. 
&lt;code&gt;fprintf&lt;/code&gt; does the job of formatting and printing together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike R, 
numbers in matlab will not be silently converted to strings when needed.
You must use the function &lt;code&gt;num2str&lt;/code&gt; to convert numbers to strings manually.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="string"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Tricky Problems In Matlab</title><link href="http://lisafly.github.io/blog/tricky-problems-in-matlab/" rel="alternate"></link><updated>2012-12-04T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-04:blog/tricky-problems-in-matlab/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sometimes you might find that you can use some built-in function in
matlab at first, but later you cannot use it any. If so, you should
probably check whether you are doing parallel computing in matlab.
Parallel computing in Matlab can cause some problem. What you can do
is to use other functions that Matlab accept in parallel computing
to replace these which result in problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dlmwrite&lt;/code&gt; is convenient to write vector and matrix data to a file,
but it might lose accuracy especially when you do not specify the
accuracy attribute. So do not use &lt;code&gt;dlmwrite&lt;/code&gt; to write data into text
files when you works with high accuracy data, instead, you can use
binary data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; has priority over &lt;code&gt;:&lt;/code&gt; in matlab which is different from R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When matlab starts, it set the random number generator to the
default one and set the seed to be the default seed. So if you run a
simulation, reboot matlab and run the same simulation, you will get
the same results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since most arithmetic objects in matlab are matrices, arithmetic
operations in matlab are basically matric operations. So &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;,
&lt;code&gt;\*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; are matrix addition operator, matrix subtraction
operator, matrix multiplication operator and matrix division
operator respectively. 
Notice that &lt;code&gt;/&lt;/code&gt; is also called right matrix division operator. Suppose
&lt;code&gt;B/A=X&lt;/code&gt;, it means that &lt;code&gt;XA=B&lt;/code&gt;. There is also another matrix division
operator $\backslash$. Suppose $B\backslash A=X$, it means that
&lt;code&gt;AX=B&lt;/code&gt;.
If you want to perform element wise
operation rather than matrix operations, you have to put
an extra dot (i.e. &lt;code&gt;.&lt;/code&gt;) before the corresponding matrix
operators.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="trick"></category><category term="trap"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>General Tips For Java</title><link href="http://lisafly.github.io/blog/general-tips-for-java/" rel="alternate"></link><updated>2012-12-03T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-03:blog/general-tips-for-java/</id><summary type="html">&lt;h2&gt;Useful Skills&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Even if a method returns a value, you can use it as if it were a
void method. This means that it does not hurt for a method to return
a value. This can be very convenient sometimes. For example, if you
want to insert an element into a list in order, it is natural to
define a void method which does the operation for you. However, you
can also make the method return the location where the element is
insert to. This is what &lt;code&gt;add&lt;/code&gt; in &lt;code&gt;ArrayList&lt;/code&gt; does. You can use it
insert an element only, and you can also extract the location
information (where the element is inserted to) at the same time if
you like.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If even if you make an object &lt;code&gt;final&lt;/code&gt;, you might still be able to
mutate it. This is because &lt;code&gt;final&lt;/code&gt; describes the name of the object,
which means that the variable cannot point to a new address, but the
content of the address (where the variable points to) might still be
changed. For example, if you define &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;you cannot point &lt;code&gt;a&lt;/code&gt; to another address, but you are
still able to change the elements of &lt;code&gt;a&lt;/code&gt;, i.e., you're able to
change the value of &lt;code&gt;a[i]&lt;/code&gt; for $i=0,\ldots,9`). This is one reason
that defensive copy is preferred when you pass around a mutable
object. Generally speaking, defensive copy is preferred if it
doesn't affect performance badly. Also, if a getter method returns a
mutable object, you'd better make a defensive copy.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Always print some indicating information to the console when you
expect some input from the console. Otherwise, you when you run the
application, it waits for your input but you might think that it's
not running. Also if you do an intensive computing in Java, you'd
better print the progress (if you can) to the console. At least you
should print message to the console after the simulation is done!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There're many operators in C/C++ which makes which makes operations
faster and calculation faster, e.g. &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;–&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;\*=&lt;/code&gt;, and so
on. Similarly to C/C++, we can also use them in Java. Specially, for
the increase (&lt;code&gt;++&lt;/code&gt;) and decrease &lt;code&gt;–&lt;/code&gt; operator, we can use them both
before and after numerical variables in Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In many programming languages, we can print out more than one
variables (not necessarily the same type) at a time. In Java, the
method &lt;code&gt;println()&lt;/code&gt; (or other similar methods) of &lt;code&gt;System.out&lt;/code&gt; can
only accept one parameter. However, by concatenating different
variables (not necessarily the same type) we can print them out at a
time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use &lt;code&gt;break&lt;/code&gt; to stop current loop, however, sometimes there
might be nested loops and we want to stop all nested loops. To do
this, we can simply modify these loop variables so that all
conditions in the loops are not satisfied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To end a running Java program, we can throw out exceptions, or we
can use method &lt;code&gt;System.err.println()&lt;/code&gt; to print error information to
the console and end the program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To jump out a single loop, we can use statement &lt;code&gt;break;&lt;/code&gt;. However,
this doesn't work if there're nest loops. To jump out nested loops,
we can either use &lt;code&gt;goto&lt;/code&gt; (which is not a good code style) or we can
just modify the loop variables so that the conditions of all loops
are violated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes after being modified, the code is no longer tidy any more.
We can use &lt;code&gt;format&lt;/code&gt; button under &lt;code&gt;source&lt;/code&gt; menu to tidy the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For multi-threads programs in Java, it's hard to debug the whole
program directly. To make sure that the program works, we can test
each class in the program by writing a testing class for each of
them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We don't have &lt;code&gt;goto&lt;/code&gt; statement in Java, however we have several ways
to make the program in Java jump to other place.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; statements allow you to jump out of a
block in a loop or switch statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A labeled statement and &lt;code&gt;break label;&lt;/code&gt; allow you to jump out of
an arbitrary compound statement to any level within a given
method (or initializer block).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Throwing and catching exceptions allows you to (effectively)
jump out of many levels of method call. (However, exceptions is
relatively expensive, and are considered to be a bad way to do
"ordinary" control flow.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And of course, there is &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since we do not have to assign the returned value of method to any
object in Java, we can use any method as if it is a &lt;code&gt;void&lt;/code&gt; method.
This means that for any method that is &lt;code&gt;void&lt;/code&gt; it does not hurt to
declare it as a method that returns some object (or primitive type
value). Actually this might be very convenient sometimes, because by
doing so we can do the operation we want and at the time we have
extra information about the operation. For example, if we want to
insert a value to a sorted array, we can make the method return an
integer which is the index of the inserted place. This extra
information (the index of the inserted place) is highly useful in
may cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is expensive to allocating a new block of memory (not only in Java
but also in other languages), so we should avoid allocating new
block of memory all the time. If it is impossible to avoid allocating
memory, we can allocate a bigger memory than needed each time. In
this way, we waste some space, but might save much time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Method &lt;code&gt;getClass&lt;/code&gt; can return the class of an object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use &lt;code&gt;Arrays.fill&lt;/code&gt; to change all elements of an array at a
time, which is convenient.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we have an array of objects of some super class, we can cast the
whole array to sub class at a time. However, usually we cannot cast
all elements of an array at a time. For example, if we have an array
of &lt;code&gt;double&lt;/code&gt;, we cannot cast the whole array into &lt;code&gt;int&lt;/code&gt; at a time,
instead, we must cast each element one by one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want let the compiler know that a number you use in your code
is a double precision number you can add suffix &lt;code&gt;d&lt;/code&gt; to the number.
For example if you want to do double precision calculation for
&lt;code&gt;3/6&lt;/code&gt;, you can write it as &lt;code&gt;3/6d&lt;/code&gt; instead of casting integer to
double using &lt;code&gt;(double)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tips"></category><category term="programming"></category><category term="Java"></category></entry><entry><title>High Performance Computing In Java</title><link href="http://lisafly.github.io/blog/high-performance-computing-in-java/" rel="alternate"></link><updated>2012-12-03T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-03:blog/high-performance-computing-in-java/</id><summary type="html">&lt;h2&gt;Efficient Computing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Avoid resizing arrays and ArrayLists if the alternative does not cost
too much memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid creating unnecessary objects if possible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Parallel Computing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After you open a pool, the threads in the pool might still exist and
run outside the scope (the method in which the pool is created). To
ensure that the pool is destroyed before the end of its scope
(before the program leaves the method in which the pool is created),
you must wait for termination of pool manually. Notice that some
other packages in java or some other languages might have
implemented thread pool differently, but generaly speaking, what
java does is the nature way. Depends on what you want to do, you
must decide whether to manually wait for termination of the pool
carefully.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not all parallel code runs faster than serial code while parallel
code is almost surely much hard to develop, so you have to think
about your problem and decide whether it is worth writing parallel
code to solve your problem. Usually the process of generating random
numbers cannot be parallelized, so if the process of generating
random numbers is the bottleneck, it is no use to do parallel
computing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remember to use defensive copy for constructors and methods of
classes that implement &lt;code&gt;Runnable&lt;/code&gt;, except for these variables
through which threads communicate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Runtime&lt;/code&gt; in Java can help to find the number of processors that a
computer have. Notice that every Java application has a single
instance of class Runtime that allows the application to interface
with the environment in which the application is running. The
current runtime can be obtained from the &lt;code&gt;getRuntime&lt;/code&gt; method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use more threads than the number of processor of the machine
on which the Java application will be run on. With the help of
&lt;code&gt;Runtime&lt;/code&gt; we can write universal code for parallel computing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You should always synchronize shared objects among different threads
because of delay effect in parallel computing. If we can make
different threads independent, we'd do it because this not only make
the code easy and run faster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You should use thread pool to avoid the cost of creating new thread
if there are many different parts in parallel computing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="programming"></category><category term="thread"></category><category term="Java"></category><category term="HPC"></category><category term="parallel"></category><category term="concurrency"></category></entry><entry><title>IO In Java</title><link href="http://lisafly.github.io/blog/io-in-java/" rel="alternate"></link><updated>2012-12-03T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-03:blog/io-in-java/</id><summary type="html">&lt;h2&gt;Input and Output&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;System.out.println&lt;/code&gt; is super fast. Generally speaking, you do not
have worry much about the overheading of printing information to the
console in Java.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Reading and Writing Text File&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Scanner&lt;/code&gt; is convenient for parsing text data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PrintWriter&lt;/code&gt; is for writing text file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Reading and Writing Binary File&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;To read in binary data (through byte) from a file, you can use
&lt;code&gt;FileInputStream&lt;/code&gt;; to write binary data into a file, you can use
&lt;code&gt;FileOutputStream&lt;/code&gt;. To read in binary data into primitive types
from a file, you can wrap a FileInputStream in DataInputStream;
to write primitive types into a binary file directly, you can
wrap a FileOutputStream in DataOutputStream. Note that
DataInputStream and DataOutputStream is compatible, i.e., they
recognize the format of each other. However, DataInputStream is
not compatible with &lt;code&gt;writeBin&lt;/code&gt; in R; neither is DataOutputStream
compatible with &lt;code&gt;readBin&lt;/code&gt; in R. To communicate binary data
between Java and R, you can run Java code which do the right job
for you using &lt;code&gt;rJava&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="IO"></category><category term="programming"></category><category term="Java"></category></entry><entry><title>Java Packages</title><link href="http://lisafly.github.io/blog/java-packages/" rel="alternate"></link><updated>2012-12-03T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-03:blog/java-packages/</id><summary type="html">&lt;h2&gt;Appach CommonMath&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;StatUtils.varance is OK.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Colt&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sample&lt;/code&gt; of &lt;code&gt;RandomSample&lt;/code&gt; is OK.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Parallel Colt&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ParallelColt does not make RNG parallized.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Comparison of Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Colt is faster in random number generating than CommonMath,
especially for simple random number generation (e.g. normal random numbers), 
but Colt is no longer maintained.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The RNGs in Colt, Parallel Colt and CommonMath are all OK from statistical view.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="programming"></category><category term="package"></category><category term="Java"></category></entry><entry><title>Java Programming Style</title><link href="http://lisafly.github.io/blog/java-programming-style/" rel="alternate"></link><updated>2012-12-03T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-03:blog/java-programming-style/</id><summary type="html">&lt;h2&gt;Good Writing Style&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is recommend to always use &lt;code&gt;{}&lt;/code&gt; if even there is only one statement inside it. 
The reason is that you never know whether you are going to add more statements into it or not. 
And it will make the code more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feel free to declare the variable in the smallest &lt;code&gt;{}&lt;/code&gt; block possible. 
The compiler will optimize this kind of code for us. 
So it is better to make the code more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is always good to write code similar to how you would solve the problem naturely. 
It is easy to make mistakes when we try to make the code more concise. 
Unless you can dramatically improve the performance of the code, 
do not change the code for conciseness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid using a same name for a different types (instance, local and argument) of variables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="style"></category><category term="Java"></category><category term="programming"></category></entry><entry><title>Loops In Java</title><link href="http://lisafly.github.io/blog/loops-in-java/" rel="alternate"></link><updated>2012-12-03T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-03:blog/loops-in-java/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;As is known to all, a loop condition in a usual &lt;code&gt;for&lt;/code&gt; or
&lt;code&gt;while&lt;/code&gt; loop is checked before each iteration in almost all
programming languages. In Java, a loop condition is checked in each
iteration, i.e. the boolean value of the loop condition is
recalculated in each iteration. Not only the change of loop
variables but also other variables involved in the loop condition
affect the loop. While this true for most compiled languages, it's
not the case for most interpreted languages, e.g. R and Matlab. (...
see whether for each is as R and matlab ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use enhanced for loop in java almost any time you want. It
really beautifies your code. Unfortunately, you cannot use it
everywhere. Consider, for example, the expurgate method. The program
needs access to the iterator in order to remove the current element.
The for-each loop hides the iterator, so you cannot call remove.
Therefore, the for-each loop is not usable for filtering. Similarly
it is not usable for loops where you need to replace elements in a
list or array as you traverse it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On a computer support multithreading, multiple small loops runs a
little (not significant at all) faster than a big loop with the same
number of iterations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="loop"></category><category term="Java"></category><category term="programming"></category><category term="MATLAB"></category></entry><entry><title>Some Tricky Problems In Java</title><link href="http://lisafly.github.io/blog/some-tricky-problems-in-java/" rel="alternate"></link><updated>2012-12-03T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-12-03:blog/some-tricky-problems-in-java/</id><summary type="html">&lt;h2&gt;Confusion Clarification&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You cannot define an abstract static method. This is because
"abstract" means that no functionality is implemented while "static"
means that functionality exists enven there is no object. The two
conflict in concept.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently there is no way to make subclass level acess but no package
level access in Java.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tricky Problems&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If there is broken references (e.g. a imported jar file has been
deleted or moved to another place), eclipse cannot build proejects.
When you run code, you will probably get error message that some class
does not exist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;hasNextInt()&lt;/code&gt; method of &lt;code&gt;Scanner&lt;/code&gt; class test whether the next
parsed word is integer or not. Even if there is integer in the string
the method returns &lt;code&gt;false&lt;/code&gt; if it is not the first parsed word.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a &lt;code&gt;double&lt;/code&gt; number is casted to an &lt;code&gt;integer&lt;/code&gt;, only the integer
part is kept, i.e. the number will be rounded towards 0. When we use
method &lt;code&gt;Math.round()&lt;/code&gt;, we get the same result. However, the first
method is preferred, though it uses cast. Usually this kind of type
cast is very fast.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no power operator in Java, instead, method &lt;code&gt;Math.power&lt;/code&gt;
should be used. If you want the square or cubic of a number [] &lt;code&gt;x&lt;/code&gt;,
you can use &lt;code&gt;x\*x&lt;/code&gt; or [] &lt;code&gt;x\*x\*x&lt;/code&gt;, which is faster than
invoking the &lt;code&gt;Math.power&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Java (and also C++), you can access the instance variables of
objects with the same class in the definition of a class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a return a result in method using key word &lt;code&gt;return&lt;/code&gt;, the
parentheses are not required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike C/C++, we can only give &lt;code&gt;if&lt;/code&gt; statement a boolean expression
in Java, which means that &lt;code&gt;if(x=2)&lt;/code&gt; (which works in C/C++) will not
work in Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In C/C++, we can convert integer values to boolean values, vice
versa. While in Java, we cannot do this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To quit a program when error occurs in Java, we can use
&lt;code&gt;System.err.println()&lt;/code&gt;. This will print out the error message and
then quit the running program. !!!!!!!!!!!It will not stop running,
just print error message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can not call a non-static method inside a static method. So all
methods in the class which contains function &lt;code&gt;main&lt;/code&gt; (the start place
of all code) should be static. Similarly all instance variable in
this kind of classes must be static and (usually final).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be careful when you use &lt;code&gt;switch&lt;/code&gt; in Java. Do not forget to add code
&lt;code&gt;break;&lt;/code&gt; at the end of each branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use &lt;code&gt;==&lt;/code&gt; to check whether two objects are equal or not,
instead, use method &lt;code&gt;equals&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, the elements of an array of objects in Java have value
null. So we must either instantiate the elements or point them to
objects with the same type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The index of &lt;code&gt;arrays&lt;/code&gt; in Java must start from 0, however, it does not
have to be a regular array, i.e. the elements of the array do not
have to have the same length.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We know that many programming languages use lazy evaluation to
evaluate boolean expressions. However, sometimes we might want to
evaluate all conditions of an expression, which is mainly for side
effect and parallelism maintain concern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In java, &lt;code&gt;"\r"&lt;/code&gt; stands for return (i.e. put the cursor to the first
column) and &lt;code&gt;"\n"&lt;/code&gt; stand for new line, which is different from some
programming languages. For example, some programming language use
&lt;code&gt;"\n"&lt;/code&gt; to stand for return and new line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When overriding an existing method in a class, you must provide
different arguments for the overriding method. This is because the
name of a method and the number and type of arguments is how Java
can distinguish different methods. Notice that before executing a
method, Java does not know the type of return result, which means
that the return type of methods is not used to distinguish different
methods. For this reason, we cannot define two methods with the same
name and the same number and type of arguments with different return
types. And when we overwrite a method in a super class, we must keep
the same return type or a return type that is compatible with the
return type of the corresponding method in the super class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There can be both public and static method in a class in Java. To
call a public class, you must invoke a public method through an
object of the class; to call a static method, you can either invoke
it through an object of the class or we can invoke it using the name
of the class, however, the latter way is prefer for invoking a
static method, because it does not have to create a new object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you invoke the constructor of a super class in a sub class, it
must be the first line in the constructor of the sub class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can only extend a subclass from only one super class in Java
while you can implement class from more than one interface in Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Cast&lt;/code&gt; has lower priority than &lt;code&gt;.&lt;/code&gt; in Java, which means that you
have to use two pairs[^2] of parentheses when you want to first cast
an object and then invoke some method of the casted object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After reading or writing a file in Java, you have to close it in
order for Java to release the resource. If you use &lt;code&gt;Scanner&lt;/code&gt; to read
a file, you should also close it after reading. But if you use
&lt;code&gt;Scanner&lt;/code&gt; to read data from other place, e.g. a string or
&lt;code&gt;System.in&lt;/code&gt;, then you do not have to close it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a sub class extends from a super class which implements an
interface, then the sub class implements the interface
automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For parameter (some type) of generic types, we cannot use primitive
types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a state that is unique to an object of a class, you want to use
key word new to create an object for the state (if the state is a
not a primitive type). For a state that is shared among all objects
of a class (e.g. random number generators in a class usually should
be shared among all its object), never use key word new to create an
object for the state. Just point it to an object passed as argument
of the constructor of the class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For statistical simulations involving generating random numbers,
you'd better use a single base random number generator (RNG) for
generating random numbers. To do this in Java, you just need to
create a single random number generator and pass it by reference
(which is the default way) to objects that require a RNG. Also to
make your work repeatable, you'd better set seed(s) for your
simulations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String and Enum are immutable classes in Java ....&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be careful if an object is initialized based on another object of
the type, i.e. when some object is passed to the constructor for
initializing an object of the class. Be aware about whether you want
the state object to be shared or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For an object whose states might be changed by itself (i.e. states
can be changed by some other methods (either public or private)
rather than its setters), you'd better make it immutable. Generally
speaking, you do not have track of the inner states of this object,
and thus you might mis-predict its inner states. If you allow setter
methods to mutate the object, it can happen that you think you have
changed the states of the object to these you expect, but rather
they are not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="trick"></category><category term="Java"></category><category term="programming"></category></entry><entry><title>Copy between Different Sessions of Vim</title><link href="http://lisafly.github.io/blog/interact-between-different-vim-sessions/" rel="alternate"></link><updated>2012-11-22T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-22:blog/interact-between-different-vim-sessions/</id><summary type="html">&lt;p&gt;The following are ways for a Vim session to interact (copy/cut, paste) with other Vim sessions or other applications.&lt;/p&gt;
&lt;h2&gt;Use the System Clipboard&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Hold &lt;code&gt;SHIFT&lt;/code&gt; while you select text in Vim using mouse. 
You can then right click on the selection and choose &lt;code&gt;Copy&lt;/code&gt; to copy it to the system clipboard, 
or you can use &lt;code&gt;CTRL + SHFIT + C&lt;/code&gt; to copy the selection to the system clipboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can right click and choose &lt;code&gt;paste&lt;/code&gt; in Vim to pate from the system clipboard into vim, 
or you can use &lt;code&gt;CTRL + SHIFT + V&lt;/code&gt; to paste from the system clipboard into Vim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another way to copy from Vim to a text editor is to first select text in Vim with &lt;code&gt;SHFIT&lt;/code&gt; pressed, 
and then middle-click in the text editor.
Notice that &lt;code&gt;CTRL + V&lt;/code&gt; won't work, 
because you did not use &lt;code&gt;CTRL + SHFIT + C&lt;/code&gt; (or &lt;code&gt;right click -&amp;gt; paste&lt;/code&gt;) to copy the selection to the system clipboard.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Use a Temporary Buffer/File&lt;/h2&gt;
&lt;p&gt;It's very convenient to copy/cut and paste text between different buffers/files of a same Vim session. 
So you can use temporary buffer/file to interact with other Vim sessions or other applications.&lt;/p&gt;</summary><category term="Vim"></category><category term="software"></category><category term="Linux"></category></entry><entry><title>Schedule Task Using Crontab In Linux</title><link href="http://lisafly.github.io/blog/schedule-task-using-crontab-in-linux/" rel="alternate"></link><updated>2012-11-22T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-22:blog/schedule-task-using-crontab-in-linux/</id><summary type="html">&lt;p&gt;The information of scheuled tasks are saved in /etc/crontab. 
It contains schedules tasks of all users.
Though you can schedule tasks by editing this file directly,
it is not recommend to to do.
You are commended to use &lt;code&gt;crontab -e&lt;/code&gt; to schedule tasks.
The format of task is "minute", "hour", "dom" (day of month), m (month), dow (day of week), command. 
You should not use both "dom" and "dow".
You can also save the information of a scheduled task in a file (e.g. 'task.txt'),
and then run command &lt;code&gt;crontab task.txt&lt;/code&gt;.
To list all scheduled tasks, 
use command &lt;code&gt;crontab -l&lt;/code&gt;.
To remove a sheduled task,
use command &lt;code&gt;crontab -r&lt;/code&gt;.&lt;/p&gt;</summary><category term="task"></category><category term="crontab"></category><category term="schedule"></category><category term="linux"></category></entry><entry><title>Enumeration In Java</title><link href="http://lisafly.github.io/blog/enumeration-in-java/" rel="alternate"></link><updated>2012-11-21T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-21:blog/enumeration-in-java/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;You can associate values with enumeration elements.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="enum"></category><category term="programming"></category><category term="Java"></category></entry><entry><title>Exceptions In Java</title><link href="http://lisafly.github.io/blog/exceptions-in-java/" rel="alternate"></link><updated>2012-11-21T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-21:blog/exceptions-in-java/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can suppress warnings of unchecked exceptions by using &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SuppressWarnings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unchecked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;but generally speaking, 
you cannot suppress warnings of checked exceptions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can use more than one &lt;code&gt;catch&lt;/code&gt; blocks if necessary.
Starting from Java 7, 
you can catch more than one exceptions in a catch block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To guarantee that some code will be run eventually,
you can put the code into a &lt;code&gt;finally&lt;/code&gt; block.
Starting from Java 7, 
filesystem resources are managed automatically 
so that you do not have to release them manually in a &lt;code&gt;finally&lt;/code&gt; block.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="exception"></category><category term="programming"></category><category term="Java"></category></entry><entry><title>Extensions For Java</title><link href="http://lisafly.github.io/blog/extensions-for-java/" rel="alternate"></link><updated>2012-11-21T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-21:blog/extensions-for-java/</id><summary type="html">&lt;p&gt;&lt;a href="https://bitbucket.org/dclong/java_learn/src/1d6428249cae93dc7ad6ca61fa93479dcc7390fc/src/study/access?at=master"&gt;Here&lt;/a&gt; are some code examples for the following topics.&lt;/p&gt;
&lt;h2&gt;Java Native Interface&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You can call native code (typically C, C++ or Fortran) in Java using the Java Native Interface (JNI). 
For the code implemented in native code, 
you must use keyword "native" to tell the compiler that it is implemented outside Java. 
Also, 
you should surround the Java code which load the compile native code in &lt;code&gt;static{}&lt;/code&gt; 
(i.e. static initialized). 
This will get executed when Java load the class. 
For more information, please refer to Calling C library Routines from Java.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Java Native Access&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Java Native Access is a more convenient way to call native code than the Java Native Interface.
It is based on Java Native Interface.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="JNI"></category><category term="JNA"></category><category term="extension"></category><category term="Java"></category><category term="programming"></category></entry><entry><title>Input and Output in R</title><link href="http://lisafly.github.io/blog/io-in-r/" rel="alternate"></link><updated>2012-11-21T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-21:blog/io-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;All most all input/output functions in R support reading data 
from all kinds of source including files, console, clipboard and website.
For example, 
if you have copied a block of data from an Excel document, 
you can read it into R using the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clipboard&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is good and quick way to import part of the data from a Excel document into in R. 
If the data is on a website, 
you can just pass the URL to &lt;code&gt;read.table&lt;/code&gt; (or other input functions) to read it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Both &lt;code&gt;print&lt;/code&gt; prints an R object to the R console 
and &lt;code&gt;cat&lt;/code&gt; can print multiple objects to the R console, clipboard or files. 
There's some difference between the outputs generated by these two functions.
Generally speaking, 
if you want to see the content of an object in R scenario 
(keep special characters as they are), 
you want to use &lt;code&gt;print&lt;/code&gt;; 
if you want to see the content in human readable format
(special characters are translated), 
you want to use function &lt;code&gt;cat&lt;/code&gt;.
I have to mention that &lt;code&gt;cat&lt;/code&gt; doesn't work for all types of R objects 
(e.g. objects of &lt;code&gt;xtable&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;scan&lt;/code&gt; is extremely powerful and flexible. 
You can skip first &lt;code&gt;k&lt;/code&gt; lines using the option &lt;code&gt;skip = k&lt;/code&gt;.
For example, 
the following command skips the first 5 lines.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can skip lines starting with special characters using the option &lt;code&gt;comment.char&lt;/code&gt;.
For example, 
the following command skips lines starting with "#".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can decide which special strings are treated as missing values using the option &lt;code&gt;na.string&lt;/code&gt;.
For example,
the following command treats "NA" as missing values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;na&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;NA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can limit the number of data values/lines to be read in, etc.
Many input functions in R are based on the function &lt;code&gt;scan&lt;/code&gt;, 
for example, &lt;code&gt;read.table&lt;/code&gt;.
These functions inherits the powerfulness and flexibility of &lt;code&gt;scan&lt;/code&gt;. 
&lt;code&gt;scan&lt;/code&gt; is also helpful for interactive programming. 
For example, you can read a string into the variable &lt;code&gt;input&lt;/code&gt; using the following commmand.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, &lt;code&gt;scan&lt;/code&gt; is used to read in a vector, 
so the data to be read in &lt;em&gt;at the same time&lt;/em&gt; must be of the same type. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;read.table&lt;/code&gt; reads data into a data frame, 
so the data to be read in needs not to be of the same type, 
but it must be rectangular, 
i.e. each row in the data source must have the same number of values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function&lt;code&gt;write.table&lt;/code&gt; writes a data frame or a matrix into a file. 
Note that it can also append data into a file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;colnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;readBin&lt;/code&gt; reads in binary data 
and the function &lt;code&gt;writeBin&lt;/code&gt; writes binary data into files. 
Both of the two functions have limits on the size of data that they can deal at a time. 
For large binary data, 
you have to use &lt;code&gt;readBin/writeBin&lt;/code&gt; multiple times to read/write them from/to files.
&lt;code&gt;readBin&lt;/code&gt; and &lt;code&gt;writeBin&lt;/code&gt; are compatible with &lt;code&gt;fwrite&lt;/code&gt; and &lt;code&gt;fread&lt;/code&gt; in matlab. 
&lt;code&gt;fread&lt;/code&gt; and &lt;code&gt;fwrite&lt;/code&gt; are C style functions, ... (to be checked for compatible with c/c++). 
However, &lt;code&gt;readBin&lt;/code&gt; and &lt;code&gt;writeBin&lt;/code&gt; is not compatible with 
Java classes &lt;code&gt;DataOutputStream&lt;/code&gt; and &lt;code&gt;DataInputStream&lt;/code&gt;. 
To read binary data written using &lt;code&gt;DataOutputStream&lt;/code&gt; from Java, 
you can call Java code for reading binary data using &lt;code&gt;rJava&lt;/code&gt; in R; 
to write binary data that is recognized by &lt;code&gt;DataInputStream&lt;/code&gt; in Java, 
you can call Java code for writing binary data using &lt;code&gt;rJava&lt;/code&gt; in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are lots of ways to read data from and write data into Excel documents. 
For example, 
packages &lt;code&gt;xlsReadWrite&lt;/code&gt;, &lt;code&gt;xlsx&lt;/code&gt;, &lt;code&gt;RODBC&lt;/code&gt; 
(and many more) all offers ways to import data into and export data from Excel documents. 
Among these packages mentioned, 
&lt;code&gt;RODBC&lt;/code&gt; is recommended because it offers a universal way to deal with all kinds of databases 
(not just Excel spread sheet). 
However, 
I have to mention that none of the above packages work well with large Excel document 
(at least for these packages built in R 2.13.0). 
For large Excel document, 
you'd better deal with it through CSV document. 
If you want to read data from a large Excel document, 
save it as a CSV document and then read in data from the CSV document; 
if you want to write large amount of data into an Excel document, 
write it into a CSV document (and then save it as an Excel document if necessary).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="IO"></category><category term="programming"></category></entry><entry><title>R for Numerical Analysis</title><link href="http://lisafly.github.io/blog/r-for-numerical-analysis/" rel="alternate"></link><updated>2012-11-21T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-21:blog/r-for-numerical-analysis/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Usually when we check whether two double values equal or not, we
would check whether they're close enough or not. This is due to
possible information loss of double values stored in computer.
However, in R we can directly use &lt;code&gt;==&lt;/code&gt; to check whether two objects
(including double values) equal or not. This is because for double
values, R will automatically check whether they are close or not
instead of checking whether they are equal like other languages do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;optim&lt;/code&gt; and &lt;code&gt;optimize&lt;/code&gt; can be used to find the minimum and
maximum value of a function. By default these two functions find the
minimum value. But we can use control=list(fnscale=-1) in optim and
maximum=T in optimize to find the maximum value. Surely there are
some difference between these functions. First we give an original
value of the parameter for the function &lt;code&gt;optim&lt;/code&gt; while we give an
interval of the parameter for the function &lt;code&gt;optimize&lt;/code&gt;. Second and
also most important, the function &lt;code&gt;optimize&lt;/code&gt; can only do the
optimization over one variable while the function &lt;code&gt;optim&lt;/code&gt; can do the
optimization over multiple variables. However, when we use &lt;code&gt;optim&lt;/code&gt;
to do optimization over multiple variables, we must put these
variables into a single vector.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use function &lt;code&gt;uniroot&lt;/code&gt; to find the roots of a given function,
and we can use function &lt;code&gt;optim&lt;/code&gt; or &lt;code&gt;optimize&lt;/code&gt; to find the maximum or
minimum value of a function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="optimization"></category><category term="programming"></category><category term="numerical analyis"></category><category term="R"></category></entry><entry><title>R System and Configurations</title><link href="http://lisafly.github.io/blog/r-system-and-configurations/" rel="alternate"></link><updated>2012-11-21T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-21:blog/r-system-and-configurations/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To allow opening R from a directory in R in Windows system, we can
modify the registry. More specifically, we can add a command name
(to be appear in the right-click menu) under
&lt;code&gt;HKEY_CLASSES_ROOT\Directory\Backgroup\shell&lt;/code&gt;, and then
add a subkey &lt;code&gt;command&lt;/code&gt; under it. Last, we just need to change the
default value to be the command that we want to run each time we
click the menu item.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are many ways to change configurations of R. For example, to
change the default working directory of R in Windows, you can change
the properties of the shortcut of R software, which also applies to
other softwares in Windows. Another way is to put some code which
changes the default working directory into file &lt;code&gt;Rprofile.site&lt;/code&gt; 
(The code inside this file will be run on the startup of R.).
The latter way can also be used to set other configurations for R,
and it is preferred to other ways of setting configurations for R,
because it is a universal way and is guaranteed to work (If you set configurations for R in other ways and at the same
time, set configurations in file &lt;code&gt;Rprofile.site&lt;/code&gt;, these
configurations in file &lt;code&gt;Rprofile.site&lt;/code&gt; will be in effect.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;R.Version&lt;/code&gt; can display the version information of R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;args&lt;/code&gt; can show the arguments of functions in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use function &lt;code&gt;Sys.sleep&lt;/code&gt; to suspend execution of R for given
time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, function &lt;code&gt;ls&lt;/code&gt; returns non-hidden objects 
(By default, &lt;code&gt;ls&lt;/code&gt; does not return objects whose names start with a
dot. For this reason I call these objects whose name start with a
dot hidden objects.) in current
environment. For example if we use &lt;code&gt;ls()&lt;/code&gt; in a function, then it
only returns these non-hidden objects defined in the function. To
get non-hidden object in the top level environment (R workspace),
you can use &lt;code&gt;ls(pos=1)&lt;/code&gt;; to get non-hidden objects in a package, we
can use &lt;code&gt;ls(pos="package:pkgname")&lt;/code&gt;. Sometimes, you might want to
see all objects including these hidden ones in an environment. To do
so, you can use the option &lt;code&gt;all.anmes=T&lt;/code&gt;. Notice that &lt;code&gt;ls&lt;/code&gt; also support
regular expression (use the option &lt;code&gt;pattern&lt;/code&gt;), which enables you to find
objects in R workspace faster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In order to be convenient, usually we would like to specify short
names of executables. Sometimes this could lead to failure because
some functions in R do not accept short names of executables, e.g.
&lt;code&gt;shell.exec&lt;/code&gt;, which is really stupid. A good way to solve the
problem is to use function &lt;code&gt;Sys.which&lt;/code&gt; to find the full name of
executables. Conversely, function &lt;code&gt;basename&lt;/code&gt; can get the base name
of a path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;system&lt;/code&gt; calls invokes a system command, but the command passed to
it must be an executable (extensions &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.com&lt;/code&gt;) or a batch
file (extensions &lt;code&gt;.cmd&lt;/code&gt; or &lt;code&gt;.bat&lt;/code&gt;). Redirection, pipes, DOS internal
commands and so on cannot be used with &lt;code&gt;system&lt;/code&gt;. &lt;code&gt;shell&lt;/code&gt; is a more
user-friendly wrapper for &lt;code&gt;system&lt;/code&gt; which is more powerful (support
redirection, pipes, DOS internal commands and so on). If you want to
make use of Windows file association, use &lt;code&gt;shell.exec&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;search&lt;/code&gt; returns search path for R, which includes loaded
packages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;demo&lt;/code&gt; is helpful to show how to use a function or package,
however, it creates many global variables which is annoying. Using
function &lt;code&gt;example&lt;/code&gt; can solve this problem, but it seems that these
functions are not exactly the same. I'm a little confused about
these two functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R support partial matching on tags, which means that usually you
do not have to use full names for arguments of a R function. You can
use partial names for arguments. However, always be careful when a R
function takes &lt;code&gt;ldots&lt;/code&gt; as an argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;Sys.setenv&lt;/code&gt; and &lt;code&gt;Sys.unsetenv&lt;/code&gt; can set and unset
environment variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sys.info&lt;/code&gt; contains information about the operating system. Variable
&lt;code&gt;.Platform&lt;/code&gt; contains information about R system 
(Actually information related to R system are usually stored in
variables starting with dot).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Sys.time&lt;/code&gt; returns the system time, i.e. the time of the computer on
which the code is run. There is another function called &lt;code&gt;system.time&lt;/code&gt;
which can calculate how much time an evaluation takes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gc&lt;/code&gt; collect garbage. R is infamous for extensive memory using. If
you delete some big objects in R workspace, you'd better use &lt;code&gt;gc()&lt;/code&gt;
to manually trigger the garbage collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the good us of &lt;code&gt;source&lt;/code&gt; with local = TRUE ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;options&lt;/code&gt; allows one to get and set a variety of global options
which affect the way in which R computes and displays ints results.
For example, &lt;code&gt;options(width=40)&lt;/code&gt; forces R to format its output
results to have at most 40 characters (if possible). Notice that
this can be very helpful if you use Sweave. For example, if the
outputs of some R code in Sweave is too long, you can add a similar
command as above to format the R outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="configuration"></category><category term="programming"></category><category term="system"></category></entry><entry><title>Type Cast In Java</title><link href="http://lisafly.github.io/blog/type-cast-in-java/" rel="alternate"></link><updated>2012-11-21T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-21:blog/type-cast-in-java/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;You cannot cast between integer and boolean values. 
However it is trivia to convert data between integer and boolean. 
For example,
&lt;code&gt;int i = b ? 1 : 0;&lt;/code&gt; convert a boolean value &lt;code&gt;b&lt;/code&gt; into an integer value &lt;code&gt;i&lt;/code&gt;, 
and &lt;code&gt;boolean b = i != 0&lt;/code&gt; convert an integer value &lt;code&gt;i&lt;/code&gt; into a boolean value &lt;code&gt;b&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="cast"></category><category term="programming"></category><category term="Java"></category></entry><entry><title>Writing R Extensions</title><link href="http://lisafly.github.io/blog/writing-r-extensions/" rel="alternate"></link><updated>2012-11-21T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-21:blog/writing-r-extensions/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;The following are some tips for using the old fashioned way (using &lt;code&gt;.C&lt;/code&gt; and &lt;code&gt;.Call&lt;/code&gt;) 
to write R extensions. 
The state-of-art way to extend R via C/C++ is to use the &lt;code&gt;Rcpp&lt;/code&gt; package.
Check &lt;a href="http://dclong.github.io/en/2012/09/rcpp-rocks/"&gt;this post&lt;/a&gt; For tips on using &lt;code&gt;Rcpp&lt;/code&gt; package.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you want to call C code from R, the arguments of C functions
to be called by &lt;code&gt;.C&lt;/code&gt; must be pointers. 
This means that only simple data sturcture (primitive types and array) can be passed between 
R and C.
By default, &lt;code&gt;.C&lt;/code&gt; makes a copy of the arguments to be passed to 
C functions, and thus the corresponding variables/objects in R are unchanged . 
If a large array/vector is to be passed to C, 
you can suppress copying using the option &lt;code&gt;DUP=FALSE&lt;/code&gt; to increase performance.&lt;br /&gt;
However, the corresponding variables/objects in R will be changed if the C code mutates them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It's very annoying to work with pointer in C, however, you are
forced to work with pointer if you want to C functions for calling in R. 
One suggestions is to avoid using pointers in functions except
the call that you directly call from R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A matrix in R is essentially a vector with "dim" property, so when
you pass a matrix to a C function from R, you actually pass a
1-dimensional array to the C function . This is a place inviting
errors. Because of the way that a 2-D array is saved in C/C++, it's
more nature to stretch a 2-D array to a 1-D array by rows while a
matrix in R is stretched to a vector by columns by default. So you
have be careful that the matrix you passed to C/C++ is in the right
form that you want. If this is a problem, tranposing the matrix can
be an easy solutions many times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A good thing about interface with C in R is that the RNG in R can be
synced easily. To do this, you just have to call the C functions
that R supplies for generating random numbers, and surround them in
&lt;code&gt;GetRNGstate();&lt;/code&gt; and  &lt;code&gt;PutRNGstate();&lt;/code&gt;. For more details, please
refer to the R extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To call C++ code from R, 
you can write C wrapper functions/interfaces (surrounded by  &lt;code&gt;extern "C"{}&lt;/code&gt;) in your C++ code, 
and then call the C wrapper functions/interaces using the &lt;code&gt;.C&lt;/code&gt; function from R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When writing a R package which use external code, 
you don't have to compile it manually on different platforms. 
You just need to place the code into the "src" folder, 
and it will be automatically compiled 
(to the right type of library according to which platform you use) 
when you compile your package. 
What's more, 
&lt;code&gt;library.dynam&lt;/code&gt; helps you to automatically load the compiled code on differently platforms, 
i.e. you don't have to check the type of the platform and
use &lt;code&gt;dyn.load&lt;/code&gt; to load the compiled code accordingly. 
However, 
you must pass the name of the compiled code to &lt;code&gt;library.dynam&lt;/code&gt; without
extension.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="Rcpp"></category><category term="programming"></category></entry><entry><title>Convert Latex To Word</title><link href="http://lisafly.github.io/blog/convert-latex-to-word/" rel="alternate"></link><updated>2012-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-20:blog/convert-latex-to-word/</id><summary type="html">&lt;p&gt;&lt;code&gt;pandoc&lt;/code&gt; is a general purpose tool for converting between different type of documents, 
however, 
it is not good at converting Latex code to word.
&lt;code&gt;tex4ht&lt;/code&gt; is a better tool for converting Latex code to word. 
The following are instructions to use &lt;code&gt;tex4ht&lt;/code&gt; to convert Latex to word.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Compile your Latex code. 
Make sure that there are no error messages. 
Do not remove the temporary files produced when compiling your latex code, 
as they are required by the &lt;code&gt;tex4ht&lt;/code&gt; command. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert your Latex code to html document using the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mk4ht&lt;/span&gt; &lt;span class="n"&gt;mzlatex&lt;/span&gt; &lt;span class="n"&gt;you_latex_doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tex&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the html document using office tools (Microsoft Word, LibreOffice Writer, AbiWord, etc).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save a copy of the html document to the right format you want. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="html"></category><category term="Latex"></category><category term="Office"></category><category term="software"></category><category term="Word"></category></entry><entry><title>Convert PDF To EPS</title><link href="http://lisafly.github.io/blog/convert-pdf-to-eps/" rel="alternate"></link><updated>2012-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-20:blog/convert-pdf-to-eps/</id><summary type="html">&lt;p&gt;There are tons of tools for converting PDF pictures to EPS pictures in Linux. 
The &lt;code&gt;pdf2ps&lt;/code&gt; command is a good one.
It produces EPS pictures without losing much resolution. 
The general purpose tools &lt;code&gt;convert&lt;/code&gt; does not produce as good quality EPS figures.&lt;/p&gt;</summary><category term="Image"></category><category term="eps"></category><category term="Linux"></category><category term="PDF"></category><category term="software"></category><category term="Graphics"></category></entry><entry><title>Graphics In Latex</title><link href="http://lisafly.github.io/blog/graphics-in-latex/" rel="alternate"></link><updated>2012-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-20:blog/graphics-in-latex/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generally PDF figures are preferred for Latex code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are many useful commands in Linux for converting between different types of figures, e.g., &lt;code&gt;convert&lt;/code&gt;, &lt;code&gt;pdf2ps&lt;/code&gt;, etc. So it does not matter much which types of figures you produce. You can always convert them into other format when needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;psfrag&lt;/code&gt; package is useful for editing EPS figures.
If you use it in your Latex code, you have to compile your code using commands &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;dvi2ps&lt;/code&gt; and &lt;code&gt;ps2pdf&lt;/code&gt; in sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vector figures (EPS, PDF, etc) can be too big sometimes (e.g., if you do scatter plot). In this case, you'd better use non-vector pictures (e.g., png, jgp, etc).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To include figures in a frame in beamer, you must use the option &lt;code&gt;[fragile]&lt;/code&gt; for that frame. For example
\begin{frame}[fragile]
\begin{figure}
\includegraphics{graph1}
\caption{captiontext}
\label{figurelabel}
\end{figure}
\end{frame} &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="image"></category><category term="vector"></category><category term="Latex"></category><category term="graphics"></category><category term="programming"></category></entry><entry><title>Latex Commands for Compiling</title><link href="http://lisafly.github.io/blog/latex-commands/" rel="alternate"></link><updated>2012-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-20:blog/latex-commands/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;latex&lt;ul&gt;
&lt;li&gt;If your latex code contains only EPS figures, you can use the &lt;code&gt;latex&lt;/code&gt; command (also OK to use &lt;code&gt;pdflatex&lt;/code&gt;) to compile your code.   &lt;/li&gt;
&lt;li&gt;If you use bibtex, you have to compile your code using commands &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;latex&lt;/code&gt; and &lt;code&gt;latex&lt;/code&gt; in sequence.&lt;/li&gt;
&lt;li&gt;If you use the &lt;code&gt;psfrag&lt;/code&gt; package to edit EPS figures (only work for EPS figures), you have to compile your Latex code using commands &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;dvi2ps&lt;/code&gt; and &lt;code&gt;ps2pdf&lt;/code&gt; in sequence.&lt;/li&gt;
&lt;li&gt;To use the &lt;code&gt;tex4ht&lt;/code&gt; tool to convert Latex to other formats, you have to use the &lt;code&gt;latex&lt;/code&gt; command to compile. See &lt;a href=""&gt;this post&lt;/a&gt; for more information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pdflatex&lt;ul&gt;
&lt;li&gt;If you use non-EPS figures in your latex code, you have to use the &lt;code&gt;pdflatex&lt;/code&gt; command to compile your code.&lt;/li&gt;
&lt;li&gt;If you use bibtex, you have to compile your code using commands &lt;code&gt;pdflatex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;pdflatex&lt;/code&gt; and &lt;code&gt;pdflatex&lt;/code&gt; in sequence.&lt;/li&gt;
&lt;li&gt;Generally speaking the &lt;code&gt;pdflatex&lt;/code&gt; command is preferred to &lt;code&gt;latex&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xelatex&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For compiling Latex code containing CJK characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pdfTexify&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A command seen in WinEdt for compiling Latex code repeatedly until all issues are resolved. This can be a more convenient alternative to apply commands &lt;code&gt;pdflatex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;pdflatex&lt;/code&gt; and &lt;code&gt;pdflatex&lt;/code&gt; when you use bibtex in your Latex code. Surely one can write bash functions to simplify this process in Linux easily.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="compile"></category><category term="Latex"></category><category term="programming"></category></entry><entry><title>Latex For Chinese</title><link href="http://lisafly.github.io/blog/latex-for-chinese/" rel="alternate"></link><updated>2012-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-20:blog/latex-for-chinese/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;code&gt;xetex&lt;/code&gt; is the state-of-art way for dealing with Chinese type setting.
You can use command &lt;code&gt;xelatex&lt;/code&gt; to compile. 
The utf-8 format is preferred. 
If you work in Linux, 
usually you have to install some Chinese fonts,
e.g., &lt;code&gt;ttf-arphic-uming&lt;/code&gt;, &lt;code&gt;ttf-wqy-microhei&lt;/code&gt; and &lt;code&gt;ttf-wqy-zenhei&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Latex"></category><category term="Chinese"></category><category term="programming"></category></entry><entry><title>Scientific References</title><link href="http://lisafly.github.io/blog/scientfic-reference/" rel="alternate"></link><updated>2012-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-20:blog/scientfic-reference/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JabRef&lt;/code&gt; is an open-source cross-plotform software for managing scientific references.
&lt;code&gt;Mendeley&lt;/code&gt; is a good cost-free cross-platform software for managing scientific references.
It introduces the concept of social research.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use bibtex in your latex code, 
you have to compile your code using &lt;code&gt;pdflatex/latex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;pdflatex/latex&lt;/code&gt; and &lt;code&gt;pdflatex/latex&lt;/code&gt; in sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;natbib&lt;/code&gt; is a Latex package for citing references, and it is compatible with bibtex.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use author and date style references and there are duplicate
authors and years, &lt;code&gt;natbib&lt;/code&gt; print out the whole list of names and years
by default instead of using abbreviation for names. To avoid this
problem, you can add letters to the end of years. (not sure about this ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;\eqref&lt;/code&gt; command is convenient way to reference equations in Latex.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Latex"></category><category term="reference"></category><category term="research"></category><category term="Bibtex"></category><category term="software"></category></entry><entry><title>Set Line Space In Latex</title><link href="http://lisafly.github.io/blog/set-line-space-in-latex/" rel="alternate"></link><updated>2012-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-20:blog/set-line-space-in-latex/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;parskip&lt;/code&gt; command makes a skip between paragraphs. 
The length of skip can be set using the command &lt;code&gt;\setlength&lt;/code&gt;, e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;parskip&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;plus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt; &lt;span class="n"&gt;minus&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The command &lt;code&gt;\itemsep&lt;/code&gt; sets the space between items in lists, e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;itemize&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;itemsep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; 
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;itemize&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The command &lt;code&gt;\doublespace&lt;/code&gt; makes lines after this command double spaced. 
This is convenient to produce PDF document for review.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Latex"></category><category term="programming"></category><category term="spacing"></category></entry><entry><title>Sweave</title><link href="http://lisafly.github.io/blog/sweave/" rel="alternate"></link><updated>2012-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-11-20:blog/sweave/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do not use sweave unless you are sure that you have run to the same
code again and again on different data sets, and you want the report
to be generate automatically each time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You must start &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; at the beginning a line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to do simulation, you'd better set a seed for the random
number generator (RNG). In this way, you can reproduce your simulation
and the running result of the R code will always be the same. Sometime,
the result of R code will different every time you run it. For example,
if you want to test the speed of some algorithms, the time needed for
each algorithm will be different each time you run the code even if you
use the computer and use a same seed for RNG (if simulation used). For
this kind of output, you'd better not use Sweave. A better way is to
write the auto-write the result into a tex document, and then include
the file in your main tex file. In this way, you can still redo old work
easily but without worrying out having different outputs every time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Latex"></category><category term="programming"></category><category term="Sweave"></category></entry><entry><title>Containers In Java</title><link href="http://lisafly.github.io/blog/containers-in-java/" rel="alternate"></link><updated>2012-10-22T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-22:blog/containers-in-java/</id><summary type="html">&lt;h2&gt;ArrayList&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can point an element of &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;ArrayList&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;, 
but remember that a &lt;code&gt;null&lt;/code&gt; reference cannot invoke any method. 
For example, 
if you have an object &lt;code&gt;set&lt;/code&gt; of &lt;code&gt;ArrayList&amp;lt;ArrayList&amp;lt;Point&amp;gt;&amp;gt;&lt;/code&gt; whose first element is &lt;code&gt;null&lt;/code&gt;. 
Then you cannot add points (objects of Point) to the first element 
(which is of type &lt;code&gt;ArrayList&amp;lt;Point&amp;gt;&lt;/code&gt;) of &lt;code&gt;set&lt;/code&gt; by invoking &lt;code&gt;set.get(0).add&lt;/code&gt;. 
To achieve the goal, 
you have to first create a new object of &lt;code&gt;ArrayList&amp;lt;Point&amp;gt;&lt;/code&gt;, 
point the first element of &lt;code&gt;set&lt;/code&gt; to it, 
and then add points by invoking &lt;code&gt;set.get(0).add&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elements added into an &lt;code&gt;ArrayList&lt;/code&gt; or returned by &lt;code&gt;get&lt;/code&gt; from an
ArrayList are by reference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To insert an element into an &lt;code&gt;ArrayList&lt;/code&gt; with size &lt;code&gt;n&lt;/code&gt; (using the &lt;code&gt;add&lt;/code&gt; method), 
the legal range of index is &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;. 
The &lt;code&gt;add&lt;/code&gt; method without specifying location add the element to the end of the &lt;code&gt;ArrayList&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The capacity of an &lt;code&gt;ArrayList&lt;/code&gt; can be 0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;ArrayList&lt;/code&gt; in Java is essentially a sequence of addresses. 
Since an address can point to anything, 
&lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;ArrayList&lt;/code&gt; in Java can be used as container for anything. 
Specially, 
you can use an array as a container for &lt;code&gt;ArrayLists&lt;/code&gt; 
and you can also use an ArrayList as a container for &lt;code&gt;Arrays&lt;/code&gt;. 
For example &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; array;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;are both legal in Java.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;clear&lt;/code&gt; method of &lt;code&gt;ArrayList&lt;/code&gt; does not affect its capacity.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Array&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Arrays&lt;/code&gt; class contains many userful static methods for array operations,
but generally speaing, 
they can only be applied to 1-d array directly. 
To applied to multi-dimensional arrays, 
you have to iterate into the array until you have 1-d arrays. 
For example, 
if you want to compare whether two 1-d integer arrays are equal or not,
you can use the static &lt;code&gt;equals&lt;/code&gt; in the &lt;code&gt;Arrays&lt;/code&gt;. 
To compare whether two 2-d interger arrays are equal or not, 
you can compare whether the two arrays have the same length, 
and whether each corresponding elements (which are 1-d arrays) of the two arrays are equal 
(using the static &lt;code&gt;Arrays.equals&lt;/code&gt; method). 
Applying &lt;code&gt;Arrays.equals&lt;/code&gt; on a 2-d intger arrays directly compares whether the two 2-d arrays 
contain same references to 1-d arrays. 
The static &lt;code&gt;Arrays.equals&lt;/code&gt; method is overloaded for double arrays,
but it is no a good idea to compare whether two double arrays are equal using &lt;code&gt;Arrays.equals&lt;/code&gt;
because it does not allow an error tolerance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A 2-d array in java is just an array of arrays, 
so even if you define &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;you can still point &lt;code&gt;a[i]&lt;/code&gt; to another 1-d array. 
This means that you can change the
length of each element of the 2-d array&lt;code&gt;a&lt;/code&gt; whenever you want.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To copy arrays quicly, 
you can use &lt;code&gt;System.arraycopy&lt;/code&gt; which is implemented in native code. 
It is preferred to other ways such as &lt;code&gt;clone&lt;/code&gt;, 
user-defined method and so on. 
Notice that &lt;code&gt;System.arraycopy&lt;/code&gt; performs shallow copys for arrays of objects,
i.e., only references of objects will be copied. 
If you want to make a deep copy of an array of objects, 
you have to do it by yourself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A container in Java can be initialized using curly braces 
(similar to the universal initializer list in C++11), 
and in this case you do not have to specified the dimensions of the container. 
To initialized all elements of a 1-dimensional array to a single value, 
you can the static &lt;code&gt;Arrays.fill&lt;/code&gt; method.
Note that arrays in Java are automatically initialized to default values, 
so you need not to initialize an array if the default value is what you want.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="ArrayList"></category><category term="programming"></category><category term="Java"></category><category term="array"></category><category term="containers"></category><category term="vector"></category></entry><entry><title>Use Eclipse As Your IDE</title><link href="http://lisafly.github.io/blog/use-eclipse-as-your-ide/" rel="alternate"></link><updated>2012-10-22T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-22:blog/use-eclipse-as-your-ide/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are at least 3 ways to jump to errors quickly in Eclipse&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click these red icons on the right margin.&lt;/li&gt;
&lt;li&gt;Click the &lt;code&gt;Previous Annotation&lt;/code&gt; button or &lt;code&gt;Next Annotation&lt;/code&gt; buttons on the tool bar or under the &lt;code&gt;Navigation&lt;/code&gt; menu.&lt;/li&gt;
&lt;li&gt;Use hot keys (&lt;code&gt;Ctrl+.&lt;/code&gt; for &lt;code&gt;Next Annotation&lt;/code&gt; and &lt;code&gt;Ctrl+,&lt;/code&gt; for &lt;code&gt;Previous Annotation&lt;/code&gt; by default).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To tidy code, use the &lt;code&gt;Format&lt;/code&gt; button under the &lt;code&gt;Source&lt;/code&gt; menu.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To quickly comment selected code in Eclipse, 
you can use hot keys &lt;code&gt;Crtl+/&lt;/code&gt;. 
To uncomment selected code, 
simply press the hot keys again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To quickly import a package which has no &lt;code&gt;.jar&lt;/code&gt; files 
(i.e. you have available all source code) to an existing project, 
you can simply drag the package on the &lt;code&gt;src&lt;/code&gt; folder 
in the corresponding project in eclipse. 
Another way is to first create a new package with the same
name as the existing package, 
then right click on the newly created
package and choose &lt;code&gt;Import...&lt;/code&gt; in the short menu. 
In the prompt out,
you can choose either &lt;code&gt;Archive File&lt;/code&gt; or &lt;code&gt;File System&lt;/code&gt; under
the &lt;code&gt;General&lt;/code&gt; tab depending on whether there are &lt;code&gt;.jar&lt;/code&gt; files in the package
or not. 
Then you can choose which files you want to import into
the package and click finish after you have done.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To change a variable name, you'd better use refactor which will
automatically change all occurrences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;TODO&lt;/code&gt; to add task in eclipse.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To build projects manually, 
follow instructions 
&lt;a href="http://help.eclipse.org/helios/index.jsp?topic=%2Forg.eclipse.platform.doc.user%2Ftasks%2Ftasks-75.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="IDE"></category><category term="programming"></category><category term="Eclipse"></category><category term="software"></category></entry><entry><title>Boolean Values In C++</title><link href="http://lisafly.github.io/blog/boolean-values-in-cpp/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/boolean-values-in-cpp/</id><summary type="html">&lt;h2&gt;Boolean Values&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Boolean expressions are evaluated from left to right (the same in Java),
so it is totally OK to write code like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;where &lt;code&gt;x&lt;/code&gt; is a vector.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There is no &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; and &lt;code&gt;||=&lt;/code&gt; operators in C++,
instead you can use &lt;code&gt;&amp;amp;=&lt;/code&gt; and &lt;code&gt;|=&lt;/code&gt;.
Though &lt;code&gt;&amp;amp;=&lt;/code&gt; and &lt;code&gt;|=&lt;/code&gt; are not specially for boolean values, 
they work perfectly for boolean values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the numbers you work with support infinity or NaN, 
boolean expressions become tricky. 
For example, suppose &lt;code&gt;nan&lt;/code&gt; is a varialbe representing Nan,
both &lt;code&gt;2 &amp;lt; nan&lt;/code&gt; and &lt;code&gt;2 &amp;gt;= nan&lt;/code&gt; return &lt;code&gt;false&lt;/code&gt;,
which is not what we want. 
A safer way is to first check whether numbers involved are NaNs. 
Hopefully, ternary boolean type will be introduced into C++ in future. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="boolean"></category><category term="C/C++"></category><category term="programming"></category></entry><entry><title>Const And Static Varialbes In Cpp</title><link href="http://lisafly.github.io/blog/const-and-static-varialbes-in-cpp/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/const-and-static-varialbes-in-cpp/</id><summary type="html">&lt;h2&gt;Const Variables&lt;/h2&gt;
&lt;p&gt;but you can initialize a &lt;code&gt;static constexpr&lt;/code&gt; variable inside the defintion of a class.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt; means that the corresponding value can be dertermined at compile time. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Static Variables&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You cannot initialize a &lt;code&gt;static&lt;/code&gt; variable inside the definition of a class 
and you'd better not initialize it in a header file,
instead, 
you should initialize a &lt;code&gt;static&lt;/code&gt; variable in the source file. 
This is because if a &lt;code&gt;static&lt;/code&gt; variable is initialized in a header file 
and the header file is included multiples times,
the code cannot be compiled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java has the concept of static blocks while there is no such concept in C++. 
However, by calling a helper function/method (with code intended to be static) in 
a static statement you can achieve similar effect. 
You can also use lambda functions in a static statement to initialize complex objects such as vectors and so on.
For example you can use the following code to statically initialize an integer vector to be 0 to 10 (exclusive). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;(){
    vector&lt;span class="nt"&gt;&amp;lt;int&amp;gt;&lt;/span&gt; x;
    for(int i=0; i&lt;span class="nt"&gt;&amp;lt;n&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;++&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
        &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push_back&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static variables can be very useful sometimes, 
however, 
defining static variables inside non-static methods is potentially dangerous.
This is because these static variables are intialized once per program not once per instance,
so that every instances of the class shares the same copy of the variable. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="programming"></category><category term="C++"></category><category term="static"></category><category term="const"></category></entry><entry><title>Containers And Iterators In C++</title><link href="http://lisafly.github.io/blog/containers-and-iterators-in-cpp/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/containers-and-iterators-in-cpp/</id><summary type="html">&lt;h2&gt;Containers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prefer &lt;code&gt;std::deque&lt;/code&gt; to &lt;code&gt;std::vector&lt;/code&gt; when the size of the container is unknow. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Suppose set &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are two set with the same type
and set &lt;code&gt;C&lt;/code&gt; is another set with the same value type but a different comparison function,
then it is still valid to insert results of set operations 
(union, difference, intersection, symmetric difference and so on)
on A and B into set &lt;code&gt;C&lt;/code&gt;.
It is just that values in C are sorted according to 
the comparison function of &lt;code&gt;C&lt;/code&gt; not comparison function of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is known to all that a set is sorted (according to its comparison function). 
You cannot sort the set in place using &lt;code&gt;std::sort&lt;/code&gt; with another comparison function.
To sort elements in the set with another comparison function, 
you have to create a new container (e.g. a vector), copy the elements over and sort them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;std::set::count&lt;/code&gt; to check whether a set contains a value or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removing an element from a set/list/map only 
affects reference to the remove element not references to other elements.
However, 
removing an element from a vector affects references to elements after the removed elements. 
A good way to works with vector is to operate on it backwards. 
That is iterating a vector backwards, 
removing elements from a vector backwards, etc. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;std::map&lt;/code&gt; is similar to &lt;code&gt;std::set&lt;/code&gt; from many aspect. 
For example, 
&lt;code&gt;std::map&lt;/code&gt; contains values with unique and sorted keys while &lt;code&gt;std::set&lt;/code&gt; contains unique and sorted keys.;
both &lt;code&gt;std::map&lt;/code&gt; and &lt;code&gt;std::set&lt;/code&gt; have a &lt;code&gt;count&lt;/code&gt; method which helps to check whether a &lt;code&gt;map/set&lt;/code&gt; contains a key or not;
both &lt;code&gt;std::map&lt;/code&gt; and &lt;code&gt;std::set&lt;/code&gt; have a &lt;code&gt;find&lt;/code&gt; method which helps to find the position of a key in a &lt;code&gt;map/set&lt;/code&gt;.
Actually, 
a &lt;code&gt;std::set&lt;/code&gt; can be considered as a special case of &lt;code&gt;std::map&lt;/code&gt; where the value is of no interest. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;std::map::at&lt;/code&gt; method is preferred over the &lt;code&gt;std::map::operator[]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associative containers such as &lt;code&gt;std::map&lt;/code&gt; and &lt;code&gt;std::set&lt;/code&gt; have methods related binary search 
(e.g., &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;find&lt;/code&gt;) 
while sequence containers such as &lt;code&gt;std::vector&lt;/code&gt; and &lt;code&gt;std::list&lt;/code&gt; do not have these methods. 
If a sequence container is sorted (e.g., use &lt;code&gt;std::sort&lt;/code&gt;), 
you can apply functions &lt;code&gt;std::count&lt;/code&gt; and &lt;code&gt;std::find&lt;/code&gt; on it. 
Sequence containers have methods which can access and modify elements at the front and back of the containers 
(e.g., &lt;code&gt;std::front&lt;/code&gt;, &lt;code&gt;std::pop_front&lt;/code&gt;, &lt;code&gt;std::back&lt;/code&gt;, &lt;code&gt;std::pop_back&lt;/code&gt;) 
while associative containers do not have such methods. 
To access the first and last element of an associative container, 
you have to use iterators. 
For example, 
to get the last element of a set &lt;code&gt;x&lt;/code&gt;, 
you can use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rbegin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Iterator&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The difference between points/iterator is of type std::ptrdiff_t,
which is essentially a "signed" integer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The result of &lt;code&gt;std::reverse_iterator::base&lt;/code&gt; decreased 
by 1 is the corresponding (non-reversed) iterator. 
For example, 
if you want to erase the last element from a set &lt;code&gt;s&lt;/code&gt;, 
you can use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rbegin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C++"></category><category term="programming"></category><category term="list"></category><category term="set"></category><category term="map"></category><category term="iterator"></category><category term="container"></category><category term="C/C++"></category><category term="vector"></category></entry><entry><title>Common Mistakes in Writting C++ code and Ways to Debug</title><link href="http://lisafly.github.io/blog/cpp-common-mistakes-and-debug/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/cpp-common-mistakes-and-debug/</id><summary type="html">&lt;h2&gt;Debugging&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;gdb is a excellent command tool for debugging C/C++ code. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Syntax Mistakes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Missing "}". 
When this happens, 
you usually get lots of error message when you compile your code. 
And these error messages are often hard to understand and seems not related to your code. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Missing template arguments. 
This is relative easy to debug. 
The compiler will usually give clear enough error message. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using member types of template types without the &lt;code&gt;typename&lt;/code&gt; prefix. 
For example, 
instead of &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;InputIt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;InputIt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;value_type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(...){&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;it should be &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;InputIt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;InputIt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;value_type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(...){&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The g++ compiler is usually smart enough to detect a missing &lt;code&gt;typename&lt;/code&gt; and give you the right instruction
on how to fix the code. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Accessing members in a template base class without using &lt;code&gt;this&lt;/code&gt; pointer.
The compiler will tell you that these members are not found. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Logical Mistakes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Abuse of &lt;code&gt;auto&lt;/code&gt;. 
Tough &lt;code&gt;auto&lt;/code&gt; it a lot more convenient to work with template code, 
it is dangerous if an expression corresponds to several different types. 
For example, 
if you use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;then &lt;code&gt;x&lt;/code&gt; is of type &lt;code&gt;const char *&lt;/code&gt; not &lt;code&gt;std::string&lt;/code&gt;. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Passing invalid iterators to functions/methods that operate on containers.
This usually result in segmentation fault. 
For example, 
if you use the &lt;code&gt;erase&lt;/code&gt; method of a vector &lt;code&gt;x&lt;/code&gt; (of length 10) to erase a range of elements from it,
the second iterator must be no "smaller" than the first iterator.
The code &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;will result in an error message of segmentation fault when you compile it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Forgeting to return a value for a non-void function/method. 
This usually results in segmentation fault.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Compile Option Mistakes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Forgetting the &lt;code&gt;-lpthread&lt;/code&gt; option when compile code which uses the &lt;code&gt;&amp;lt;thread&amp;gt;&lt;/code&gt; header.
The compiler usually gives the following error message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;terminate&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;throwing&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;system_error&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Unknown&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="mi"&gt;4294967295&lt;/span&gt;
&lt;span class="n"&gt;Aborted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</summary><category term="debug"></category><category term="C++"></category><category term="mistake"></category><category term="programming"></category><category term="trap"></category></entry><entry><title>Initializing Varialbes in C++</title><link href="http://lisafly.github.io/blog/initializing-varialbes-in-cpp/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/initializing-varialbes-in-cpp/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;{}&lt;/code&gt; is more powerful than &lt;code&gt;()&lt;/code&gt; and thus is preferred over &lt;code&gt;()&lt;/code&gt;. 
You should use always use &lt;code&gt;{}&lt;/code&gt; except for a few cases where &lt;code&gt;()&lt;/code&gt; is necessary.
For example, 
if you want to create a vector of length 1000, 
you have to use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;instead of &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which create a vector with one element 1000.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Objects in C++ are intialized to have some value when they are created,
i.e., an object in C++ always have a valid value. 
This is different from Java. 
In Java, objects are essentially references. 
If an object in Java does not point to any memory when initializing, 
it is &lt;code&gt;null&lt;/code&gt;. 
In C++, 
it is impossible to have &lt;code&gt;null&lt;/code&gt; object. 
You can only have &lt;code&gt;null&lt;/code&gt; pointers in C++.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Universal initialization list &lt;code&gt;{}&lt;/code&gt; is very powerful and convenient,
especially when working with containers. 
However you cannot initialize non-const reference using &lt;code&gt;{}&lt;/code&gt;
using g++ 4.7, 
which seems to be a bug. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="initialization"></category><category term="C++"></category><category term="programming"></category></entry><entry><title>Input And Output In C++</title><link href="http://lisafly.github.io/blog/input-and-output-in-cpp/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/input-and-output-in-cpp/</id><summary type="html">&lt;p&gt;Check &lt;a href="https://github.com/dclong/cearn/tree/master/io"&gt;here&lt;/a&gt; 
for some illustrative examples for the following discussions. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can format output of numbers using functions 
&lt;code&gt;std::setpresicion&lt;/code&gt; and &lt;code&gt;std::setw&lt;/code&gt; in the &lt;imanip&gt; header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you read data from a file into an array or write data from an array to a file,
you can just use the address of the array.
However, 
if a vector (e.g., vector &lt;code&gt;x&lt;/code&gt;) is used instead of an array,
you have to use the address of the underlying data in the vector &lt;code&gt;x&lt;/code&gt; which is &lt;code&gt;&amp;amp;x[0]&lt;/code&gt;. 
Also, 
when you read/write data into/from a vector, 
you have use the size of the vector &lt;code&gt;x&lt;/code&gt; multiplied by the memory used by each element 
to calculate the total number of bytes, 
i.e. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or if &lt;code&gt;x&lt;/code&gt; is a vector of double values you can use &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You cannot use &lt;code&gt;sizeof(x)&lt;/code&gt;, 
because it is the size of the vector itself 
(without counting the underlying array) and is always the same (12). &lt;/p&gt;</summary><category term="C/C++"></category><category term="IO"></category><category term="C++"></category><category term="programming"></category></entry><entry><title>Lambda Function In C++11</title><link href="http://lisafly.github.io/blog/lambda-function-in-cpp11/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/lambda-function-in-cpp11/</id><summary type="html">&lt;h2&gt;Lambda Function&lt;/h2&gt;
&lt;p&gt;Check [here[(https://github.com/dclong/cearn/tree/master/lambda) 
for illustrative examples for the following discussions. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When capture variables, 
you can define new variables in the &lt;code&gt;[]&lt;/code&gt; of a lambda expression.
For example, 
if a lambda function need the sum of two double variable &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, 
you can use &lt;code&gt;[s=x+y]&lt;/code&gt; to capture the sum of 
these two variables (by value) instead of capture both of them. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently the &lt;code&gt;const&lt;/code&gt; keyword is not in the grammer for captures, 
so that if you cannot capture an object by const reference directly. 
A way to walk around this is to first make a const reference of that object, 
and then capture the const reference by reference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When an object is captured by value, 
it cannot be mutated by the lambda function. 
If you want the lambda function to be able to mutate the capture value, 
you should use the keyword &lt;code&gt;mutable&lt;/code&gt;, e.g., &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;&lt;span class="n"&gt;mutable&lt;/span&gt;&lt;span class="p"&gt;{...};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To capture a member variable &lt;code&gt;data&lt;/code&gt; in a class, 
you have to capture &lt;code&gt;this&lt;/code&gt; pointer,
i.e., 
you have to use either &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;](...){...};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;](...){...};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that the ways are different.
In the way, 
when you use &lt;code&gt;data&lt;/code&gt;, 
it is actually &lt;code&gt;this-&amp;gt;data&lt;/code&gt;.
This means that &lt;code&gt;data&lt;/code&gt; is alwasy accessed via &lt;code&gt;this&lt;/code&gt; pointer,
so you can consider it as capture by reference. 
The second way is capture by value. 
Surely you make it capture by reference by adding &lt;code&gt;&amp;amp;&lt;/code&gt; before &lt;code&gt;d&lt;/code&gt;. 
This is the preferred over the first way of capturing &lt;code&gt;this&lt;/code&gt; 
if you just want to capture &lt;code&gt;data&lt;/code&gt; not other member variables. &lt;/p&gt;</summary><category term="C++"></category><category term="lambda"></category><category term="programming"></category></entry><entry><title>Performance Tips For C++</title><link href="http://lisafly.github.io/blog/performance-tips-for-cpp/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/performance-tips-for-cpp/</id><summary type="html">&lt;h2&gt;Performance&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If there is some block of useless code, 
the compile is smart enough to ignore it and thus speed up the program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the option &lt;code&gt;-O2&lt;/code&gt; to generate optimized code when you are ready to publish your code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define variables only when needed to avoid the overhead of creating and deleting temporary variables.
It is suggested that you put variables into the smallest possible enclosing brace. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When shuffling data, it is better to shuffle in place 
if objects/data to be shuffled are not expensive to copy 
(e.g., when data are double or integers).
Otherwise, it is better to shuffle indexes/iterators of the container.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is STRONGLY suggested that you specify the size/capacity of a vector 
if you know it. 
Even if you do not know the exactly size of a vector, 
it is often a good idea to initialize the vector with an rough estimate of its final size. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tips"></category><category term="peformance"></category><category term="C++"></category><category term="programming"></category></entry><entry><title>Pointers in C++</title><link href="http://lisafly.github.io/blog/pointers-in-cpp/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/pointers-in-cpp/</id><summary type="html">&lt;h2&gt;Pointers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;No pointer, no polymorphism.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C/C++ is notorious for raw pointers. 
While pointers can boost up the speed of programs, 
it invites a trillion chances for making mistakes. 
You should avoid using raw pointers, 
instead, 
consider using &lt;code&gt;unique_ptr&lt;/code&gt;, &lt;code&gt;shared_ptr&lt;/code&gt; and &lt;code&gt;weak_ptr&lt;/code&gt;.
They are almost as efficient as raw pointers but much safer to use. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;p&lt;/code&gt; is a dynamically allocated array, 
you have to use &lt;code&gt;delete[] p&lt;/code&gt; to delete it when it is no longer required. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto_ptr&lt;/code&gt; objects cannot be stored in STL containers, 
because they are not copy-construable or assignable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C++"></category><category term="programming"></category><category term="pointer"></category></entry><entry><title>Template Meta Programming</title><link href="http://lisafly.github.io/blog/template-meta-programming/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/template-meta-programming/</id><summary type="html">&lt;p&gt;Illustrative examples for the following discussions can be found 
&lt;a href="https://github.com/dclong/cearn/tree/master/template"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do not use templated generic function/method unless necessary. 
Templated generic function are more useful generally speaking.
However, templated function/method are inconvenient to use sometimes,
and they are often error prone.
Always keep in mind the first programming rule "KISS" (keep it simple stupid).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A good design is essential in template meta programming. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you write templated class/function/method, 
it is suggested that you use as fewer template arguments as possible. 
Because it is often much harder and requires much more work to specialize a 
templated class/function/method with more template arguments. 
By using templated methods, one can often reduced the number of arguments 
required by a template class. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you call a template function,
the compile try to find the right version to call.
If a template function does not take any argument,
then there is no way for the compiler to know which version to call
if no template argument is offered.
So in this case, 
you have to supply the template argument manually.
If a template argument is supply manually,
then the argument passed to the template function are
casted to the right type (specified by the template argument) if necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a type depends on a template argument, 
then you have to use &lt;code&gt;typename&lt;/code&gt; before the type to let the compiler 
know that it is a template type. (This is not right ..., sometimes you need it sometimes not ...)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whenever you refer to a template class, 
you must specify the template arguemnts. 
If all template arguments have default values, 
then they can omitted, 
however, you still have to use &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; after the name of the class
to let the compiler know that it is a template class.
Forgetting template arguments is a common mistake when using template classes. 
When you implemente a template method outside the definition of its class,
you must start with &lt;code&gt;template&amp;lt;...&amp;gt;&lt;/code&gt;.
This is because the template arguments of the template class is only in effect
inside the scope of the class. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A specialization of a template class does not have access to members in the 
general version of the class if these members are not defined in the specialized class.
That is when you specialize a class, 
what you define in the specialized class is what is available to it.
Different specializations of a template class usually have members with same names. 
This make it convenient to write template functions which can 
handle different versions of the template class. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template functions/methods can only be "full" specialized. 
That is when you specialize a template function/method, 
you must specialize all template arguments. 
If a template method is inside a template class, 
then you must first specialize the template class so that
you can specialize the template method. 
On the contrary, you can specialize a class without specialize 
its template methods. 
"Partial" specialized member functions are achieved through specialization of class.
Relative to the specialized class, 
the "partial" specialized member function is still full specialized. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The implementations of specializations of a template method must be outside 
the definition of the class. 
Also the orer of specialization of template functions/methods
matters if one depends on another.
This is similar to the concept that the order of functions matters if one depends 
on another.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Except types, you can also use values that are essentially integers 
(e.g., values of long, int, char, bool and so on) as template arguments.
However, you cannot use values that are essentially float point types 
(e.g., values of float, double and so on) as template arguments. 
For example, &lt;code&gt;std::get&amp;lt;2&amp;gt;&lt;/code&gt; takes an integer as template argument. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specializing a template class is often tedious. 
There are some ways to avoid specializing template classes. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoid specializing template methods in template classes unless the template class has only one argument 
(in this case you can full specialize template methods), 
because specializing a template method in a template class often 
requires specialization of the template class. 
Instead, a better way is to use overloaded methods. 
Some examples using this trick can be found 
&lt;a href="https://github.com/dclong/cearn/tree/master/template/overload-vs-specialization"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If different versions of a template class requires different temporary variables, 
it is often good idea to group these temporary variables into a struct and specialize 
the small struct instead of the template class.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions operate on containers in STL often take iterators as arguments,
which is for the concern of writing more generic and easier-maintain code. 
However, this make it slightly inconvenient to use these functions and 
make the code insecure.&lt;br /&gt;
When you write your own functions/methods that operate on containers, 
keep them simple and use containers as arguments unless generic is necessary. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to member types of a template type, add &lt;code&gt;typename&lt;/code&gt; before it. 
For example, &lt;code&gt;template&amp;lt;class InputIt, class set&amp;lt;InputIt::value_type&amp;gt;&amp;gt; void f(...){...}&lt;/code&gt; won't compile, 
but &lt;code&gt;template&amp;lt;class InputIt, class set&amp;lt;typename InputIt::value_type&amp;gt;&amp;gt; void f(...){...}&lt;/code&gt; is OK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When inheritating a template base class, 
protected members in the base class is not directly available.
You have to use them by &lt;code&gt;this&lt;/code&gt; pointer. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A template method cannot be virtual. 
Template is sort of static polymorphism while virtual is sort of dynamic polymorphism.
They cannot be mixed together. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="overload"></category><category term="programming"></category><category term="TMP"></category><category term="specialization"></category><category term="C++"></category><category term="template"></category></entry><entry><title>Working With Class In C++</title><link href="http://lisafly.github.io/blog/working-with-class-in-cpp/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/working-with-class-in-cpp/</id><summary type="html">&lt;p&gt;Illustrative examples for the following discussions can be found 
&lt;a href="https://github.com/dclong/cearn/tree/master/class"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you also provide a default constructor if
you ever provide a user-defined constructor when writing a class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to allow deleting a derived class from a pointer of the base class,
you have to make the destructor of the base class public and virtual even if it does nothing. 
If you want to prevent deleting a derived class from a pointer of the base class, 
make the descturctor of the base class protected and virtual.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you derive a class from a base class, 
the destructor of the base class is called automatically 
so that you do not have to call it manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a derived class &lt;code&gt;D&lt;/code&gt; has a method with the name &lt;code&gt;fun&lt;/code&gt;, 
then all non-virtual methods with the name &lt;code&gt;fun&lt;/code&gt; (no matter what signature they have) in its 
base class &lt;code&gt;B&lt;/code&gt; are &lt;code&gt;hidden&lt;/code&gt; by the method &lt;code&gt;fun&lt;/code&gt; in &lt;code&gt;D&lt;/code&gt;.
Suppose &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are instances of the class &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; respectively,
and you invoke the method &lt;code&gt;fun&lt;/code&gt; throught these two instances, 
then everything works OK (in the sense that the &lt;code&gt;right&lt;/code&gt; method is invoked).
However, this is different from &lt;code&gt;overridding&lt;/code&gt;.
The problem is that &lt;code&gt;hidden&lt;/code&gt; does not support polymorphism. 
If you have a pointer of the base class &lt;code&gt;B&lt;/code&gt; pointing to an instance of the 
derived class &lt;code&gt;D&lt;/code&gt;, and you invoke the method via the pointer, 
then &lt;code&gt;fun&lt;/code&gt; of the base class &lt;code&gt;B&lt;/code&gt; will be called. 
To support polymophism, you have to &lt;code&gt;override&lt;/code&gt; the method &lt;code&gt;fun&lt;/code&gt; in the base class &lt;code&gt;B&lt;/code&gt;.
To do this, you have to mark &lt;code&gt;fun&lt;/code&gt; as virtual in the base class. 
To help the compiler (and also make your code more readable), 
you can use &lt;code&gt;override&lt;/code&gt; after the signature of method explicitly.
&lt;a href="https://github.com/dclong/cearn/tree/master/class/inheritance"&gt;Here&lt;/a&gt; is 
an example illustrating problems discussed above. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overriding method must have the same return type as the overrided method.
(not sure whether this is required in Java)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you write your own version constructor for a class, 
you'd better also provide the copy/move constructor and assignment operator. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'd better not use lvalue references in a class that point to an object outside the class.
A better way is to pass the object by lvalue reference to methods that need it.
If you ever decide to use a lvalue reference in a class that point to an object outside the class, 
you must initialize it in the initialization list of a constructor. 
This is because when you initialize a lvalue reference, 
you must point it to a valide object. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generally speaking, member variables should not be declared as public,
unless they are &lt;code&gt;static constant&lt;/code&gt;. 
Also you should not declare member variables as &lt;code&gt;protected&lt;/code&gt; unless 
you are sure that the derived classes want to access these member variables directly. 
If you define a proteced member &lt;code&gt;m&lt;/code&gt; in a base class &lt;code&gt;B&lt;/code&gt;, 
a derived class &lt;code&gt;D&lt;/code&gt; can access and modify (if &lt;code&gt;m&lt;/code&gt; is a data member) &lt;code&gt;m&lt;/code&gt; in its own class or throught its own instances
but not throught other arbitrary object.
For example, if &lt;code&gt;b&lt;/code&gt; is an object of the base class &lt;code&gt;B&lt;/code&gt;, 
you cannot access or modify &lt;code&gt;b.m&lt;/code&gt; directly in the definition of the derived class &lt;code&gt;D&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you provide a &lt;code&gt;to_string&lt;/code&gt; method, 
rather than overridding the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'd better not use overloading and default parameters at the same time. 
Because this might make compiler fail to find the right version of function/method to call. 
Generally speaking, overloading is more powerful and thus prefereed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inheritance works with template class, 
i.e., you can derive class from template classes. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;swap&lt;/code&gt; method can make the implementation of copy and move structor unified and thus more conveneint. 
It is suggested that you make the &lt;code&gt;swap&lt;/code&gt; function &lt;code&gt;public&lt;/code&gt; (at least &lt;code&gt;protected&lt;/code&gt;) if you provide one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a class have many variables to be initialized, 
you can think of intializing non-critical variables in the definition 
of the class and provide public method to access and modify them. 
This make it easier to implement constructors. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always mark a method as &lt;code&gt;const&lt;/code&gt; if it does not change the state of the object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is suggested that you intialize member variables in the constructor initializeing list 
(after &lt;code&gt;:&lt;/code&gt; before &lt;code&gt;{&lt;/code&gt;).
Surely you can achieve the same by assigning values to member variables in the body of constructors, 
but in this way these member variables are first initialized to default values and then assigned values,
which is not as efficient.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Virtuality&lt;/h2&gt;
&lt;p&gt;The following are some guidelines for virtuality from Herb Sutter.
The original article can be found &lt;a href="http://www.gotw.ca/publications/mill18.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prefer to make interfaces nonvirtual, using Template Method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefer to make virtual functions private.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only if derived classes need to invoke the base implementation of a virtual function, make the virtual function protected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A base class destructor should be either public and virtual, or protected and nonvirtual.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A few points to add:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A virtual method can be overridden by a derived class even if it is private.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A class without a public destructor cannot be used by itself. 
It servers as a base class only. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C++"></category><category term="destructor"></category><category term="programming"></category><category term="inheritance"></category><category term="override"></category><category term="class"></category><category term="hidding"></category><category term="constructor"></category></entry><entry><title>Write Portable C++ Code</title><link href="http://lisafly.github.io/blog/write-portable-cpp-code/" rel="alternate"></link><updated>2012-10-21T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-10-21:blog/write-portable-cpp-code/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Addresses on 64 and 32 OS are different, 
so you have to be careful when your program have to deal with address. 
For example, 
if you take the difference of two pointers/iterators, 
you should type &lt;code&gt;std::ptrdiff_t&lt;/code&gt; (which is essentially a singed integer type). 
Using an arbitrary integer type makes you code non-portable. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;std::size_t&lt;/code&gt; represents the unsigned native integer size 
on the current architecture (i.e. 16-bit, 32-bit or 64-bit) compiling the code. 
So, to make your code portable,
you should decare indexing variables in loops as &lt;code&gt;std::size_t&lt;/code&gt; instead of &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;unsigned int&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C++"></category><category term="programming"></category><category term="portable"></category></entry><entry><title>Useful Plugins For Eclipse</title><link href="http://lisafly.github.io/blog/useful-plugins-for-eclipse/" rel="alternate"></link><updated>2012-09-29T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-09-29:blog/useful-plugins-for-eclipse/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/eclipse/cdt.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;h2&gt;Terminal Plug-in&lt;/h2&gt;
&lt;p&gt;"Terminal Plug-in" is a fully-working command-line terminal for Eclipse.&lt;/p&gt;
&lt;h2&gt;EasyShell&lt;/h2&gt;
&lt;p&gt;"EasyShell" allows to open a shell window or file manager from the popup menu 
in the navigation tree or editor view.&lt;/p&gt;
&lt;h2&gt;Vrapper&lt;/h2&gt;
&lt;p&gt;Vrapper provides Vim-like scheme for Eclispe.
You can edit code similar as what you do in Vim 
plus that you can use mouse to copy and paste code. 
In my opinion, 
it is better than either Eclipse or Vim alone. &lt;/p&gt;
&lt;h2&gt;CodeInterview Plugin&lt;/h2&gt;
&lt;p&gt;"CodeInterview Plugin" allows you to write code in Eclipse instead of on CodeInterview directly. 
This is helpful if you will be interviewed for coding skills on CodeInterview.&lt;/p&gt;</summary><category term="Vim"></category><category term="Eclipse"></category><category term="shell"></category><category term="C/C++"></category><category term="IDE"></category><category term="software"></category></entry><entry><title>Install GSL Library</title><link href="http://lisafly.github.io/blog/install-gsl-library/" rel="alternate"></link><updated>2012-09-25T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-09-25:blog/install-gsl-library/</id><summary type="html">&lt;p&gt;GSL is an advance C/C++ library that is widely used. 
To install GSL, 
you can download the source file and 
following instruction in the included README and INSTALL document. 
For Unix/Linux users, 
the GSL library is often availabe in the repository. 
For example, you can use the following command to install the GSL library in Debian.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wajig&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libgsl0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install the GSL library to the default location, 
so that you do not have specify the &lt;code&gt;-I&lt;/code&gt; and &lt;code&gt;-L&lt;/code&gt; options for the GSL library. 
However, 
you still have to use the option &lt;code&gt;-lgsl&lt;/code&gt; and &lt;code&gt;-lgslcblas&lt;/code&gt; 
(can be replaced by other available BLAS libraries) in order to compile your code using GSL.&lt;/p&gt;</summary><category term="Debian"></category><category term="C/C++"></category><category term="Linux"></category><category term="programming"></category><category term="GSL"></category></entry><entry><title>Rcpp Rocks</title><link href="http://lisafly.github.io/blog/rcpp-rocks/" rel="alternate"></link><updated>2012-09-24T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-09-24:blog/rcpp-rocks/</id><summary type="html">&lt;p&gt;Please see &lt;a href="https://bitbucket.org/dclong/r_learn/src/c815d79db3ad2735f5f75a5a56d35eec1fdd7eb3/rcpp?at=master"&gt;here&lt;/a&gt; for some simple examples for learning Rcpp and related packages.&lt;/p&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Though you can overload functions in a Rcpp module,
it causes problems when you export these overloaded functions.
This is because currently Rcpp cannot distinguish them when exporting them.
It is suggested that you don't overload functions that are to be exported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Module&lt;/code&gt; function in the "Rcpp" package 
might fail to load modules even if the C++ code is compiled successfully.
If this happens, 
you can try the option &lt;code&gt;mustStart = TRUE&lt;/code&gt;.
It is suggested that you always use this option when you use the &lt;code&gt;Module&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not import the namespace &lt;code&gt;std&lt;/code&gt; when using Rcpp. 
This causes name conflict. 
It is also suggested that you always prefix functions with their namespace (even for Rcpp functions),
otherwise it's very error-prone.
For example, 
if you want to use the &lt;code&gt;std::abs&lt;/code&gt; function but you forget the namespace (&lt;code&gt;std::&lt;/code&gt;) prefix, 
the &lt;code&gt;Rcpp::abs&lt;/code&gt; will be used instead. 
Your code will probably compile without any error message,
but the results won't be right. 
This kind of bug is very trick.
You'd better avoid it at the first place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following operations might cause segmentation fault and 
thus forces R to quit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Calling&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;wrong&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Unhandled&lt;/span&gt; &lt;span class="nx"&gt;exceptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Use&lt;/span&gt; &lt;span class="nx"&gt;Rcpp&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="nx"&gt;workspace&lt;/span&gt; &lt;span class="nx"&gt;without&lt;/span&gt; &lt;span class="nx"&gt;compiling&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;again&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These operations are very dangerous, 
because you lose unsaved data in the R workspace when R is forced to quit. 
So you have to be very careful when you use C++ functions. 
It is recommended that you handle exceptions in C++ code. 
If you do not know how to handle exceptions in C++ code,
a safer way but a little tedious way is to always call C++ functions using the &lt;code&gt;try&lt;/code&gt; function in R.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In C++, methods for accessing elements of containers usually have both bound-checking 
and no-bound-checking versions. 
You should be aware that the no-bound-checking versions are more dangerous,
because your code might continue to run without any warning message after things to wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passing data between R and C++ is made easy. 
You can pass vectors, matrices and lists between R and C++ directly with the help of Rcpp. 
Rcpp takes care of the data converting automatically.
When you use the "RcppArmadillo" package, 
the converting between R objects and "Armadillo" matrices is also done automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A list in R (and thus in Rcpp) is essentially a generic vector. 
You must know the structure of the list in order to work on it in Rcpp.
Ech element of a &lt;code&gt;List&lt;/code&gt; in Rcpp is of type &lt;code&gt;SEXP&lt;/code&gt;. 
You have to first convert it to an Rcpp object and then work on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use reference of List in Rcpp, 
but a const reference of List is not allowed. 
Also though you can make a const reference of elements of a List,
I think it is misleading. 
Because a cast is usually need, 
I think a copy is often made. 
It is always good practice to transform a List object 
to a more type-strict data structure in C++ before you operate on it. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A vector in Rcpp can have names and you access an element by its name. 
However, different from R, error happens if you access element using a non-existing name. 
To avoid this, 
you can first use the &lt;code&gt;containsElementNamed&lt;/code&gt; method 
of the Vector class to query whether an element with a specified name exists. 
Note that the &lt;code&gt;containsElementNamed&lt;/code&gt; method accepts &lt;code&gt;const char *&lt;/code&gt; as argument
not &lt;code&gt;std::string&lt;/code&gt;. However, you can use the &lt;code&gt;c_str&lt;/code&gt; method to convert std::string
to &lt;code&gt;const char *&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no data structure in R corresponding to &lt;code&gt;std::set&lt;/code&gt; in C++. 
So when you &lt;code&gt;wrap&lt;/code&gt; a set to an R object, 
it becomes an array/vector in R.
If you want to convert, say, a vector in R to a &lt;code&gt;std::set&lt;/code&gt; in C++,
you have to first convert the vector in R to &lt;code&gt;std::vector&lt;/code&gt; or &lt;code&gt;Rcpp::NumericVector&lt;/code&gt; 
and then insert the vector into the set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is not convenient to get and operate on the names of a vector in Rcpp,
but you can pass the names of a vector/list to Rcpp as a vector from R. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use access R functions (in installed packages) easily in C++ code via Rcpp.
However, Rcpp is for extending R via C++, 
i.e., you have to come back to R. 
Trying to compile C++ code using Rcpp to and run binary code usually cause segmentation fault. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can pass R functions (including user-defined functions) to Rcpp as Function objects, 
which is really convenient. 
The following is a silly illustration example. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Function f(fun);&lt;/span&gt;
&lt;span class="s1"&gt;SEXP x = f();&lt;/span&gt;
&lt;span class="s1"&gt;int y = as&amp;lt;int&amp;gt;(x);&lt;/span&gt;
&lt;span class="s1"&gt;return wrap(y+1);&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;rwrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cxxfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nb"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Rcpp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++11 support is still experimental in most C++ compilers. 
To enable the support of C++11 in g++, you can add the option &lt;code&gt;-std=c++0x&lt;/code&gt; 
or &lt;code&gt;-std=c++11&lt;/code&gt; (depending on the version of the compiler). 
In Rcpp, support of C++11 can be done throught the &lt;code&gt;settings&lt;/code&gt; option 
of the &lt;code&gt;cxxfunction&lt;/code&gt;. The following is an illustration example.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;std::vector&amp;lt;int&amp;gt; v{1,2,3};&lt;/span&gt;
&lt;span class="s1"&gt;return wrap(v);&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;getPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Rcpp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="nv"&gt;$env$PKG_CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-std=c++0x &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="nv"&gt;$env$PKG_CXXFLAGS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fcpp11&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cxxfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;includes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#include &amp;lt;vector&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To link libraries, you have to add options to the &lt;code&gt;settings&lt;/code&gt; argument of &lt;code&gt;cxxfunction&lt;/code&gt;.
The following is an example of linking the GSL library. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;int n(as&amp;lt;int&amp;gt;(r_n));&lt;/span&gt;
&lt;span class="s1"&gt;double p(as&amp;lt;double&amp;gt;(r_p));&lt;/span&gt;
&lt;span class="s1"&gt;std::vector&amp;lt;double&amp;gt; x(n);&lt;/span&gt;
&lt;span class="s1"&gt;ralpha_wrapper(x.begin(), x.end(), p);&lt;/span&gt;
&lt;span class="s1"&gt;return wrap(x);&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;includes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;beta.cpp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;getPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Rcpp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="nv"&gt;$env$PKG_LIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-lgsl -lgslcblas &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="nv"&gt;$env$PKG_LIBS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="nv"&gt;$env$PKG_CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-std=c++0x &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="nv"&gt;$env$PKG_CXXFLAGS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ralpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cxxfunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r_n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r_p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;double&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;includes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Traps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Missing namespace prefix when calling functions that present in different namespaces.
For example,
if you want to use &lt;code&gt;std::abs&lt;/code&gt; but forget the namespace prefix (&lt;code&gt;std::&lt;/code&gt;),
the function &lt;code&gt;Rcpp::abs&lt;/code&gt; will be used.
This is a very tricky bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forget to synchronize the state of random number generates used in Rcpp with the one used in R. 
In this situation, 
random number generating functions in Rcpp always generate the same number. 
If you use random number generating functions in Rcpp but always get the same result, 
it's probably that you forget to synchronize the state of random number generators.
A simple way to synchronize the state of random number generators in Rcpp is to 
define a object of &lt;code&gt;RNGScope&lt;/code&gt; before you call random number generating functions.
For example,
you can put the statement &lt;code&gt;RNGScope scope;&lt;/code&gt; in the function/block that you have to call 
random number generating functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C++"></category><category term="list"></category><category term="programming"></category><category term="HPC"></category><category term="Rcpp"></category><category term="R"></category><category term="RcppArmadillo"></category><category term="Armadillo"></category></entry><entry><title>Download Debian Using Jigdo</title><link href="http://lisafly.github.io/blog/download-debian-using-jigdo/" rel="alternate"></link><updated>2012-09-13T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-09-13:blog/download-debian-using-jigdo/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/linux/debian.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;You can save a lot of time using Jigdo to download Debian image 
especially when you have an old version of the image. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Mount the the old version of the image to a folder that you 
have access to, e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="n"&gt;debian&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iso&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;a href="http://cdimage.debian.org/cdimage/weekly-builds/amd64/jigdo-dvd/"&gt;Weekly Builds of Debian Testing Image&lt;/a&gt; to copy the link
address of the jigdo file that you want to use. 
The first one is usually what you need. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the following command in terminal. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jigdo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lite&lt;/span&gt; &lt;span class="n"&gt;link_to_jigdo_file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will be asked about old vesions of images that you want to use
to accelerate downloading.
You can type in the path where you mounted the image. 
This process will be repeated until you don't have any more old version 
of CD/DVD images to use. Just press enter to continue and files not 
found in the old versions of images will be fetched throught internet. &lt;/p&gt;</summary><category term="jigdo-lite"></category><category term="wget"></category><category term="debian image"></category><category term="jigdo"></category><category term="Linux"></category></entry><entry><title>Rescue Linux From GUI Freezing</title><link href="http://lisafly.github.io/blog/rescue-linux-from-gui-freezing/" rel="alternate"></link><updated>2012-09-11T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-09-11:blog/rescue-linux-from-gui-freezing/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/computer.gif" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;The kernel of Linux is usually very stable, 
but the existing free desktop environments are craps. 
Amongs these desktop environments I tried 
(Gnome, Xfce, LXDE and so on), none is even close to the desktop environments in Windows and Mac.
I do not require desktop environments in Linux to be as fancy as desktop environments in Windows and Mac,
but they have to be usable and stable. 
These two basic requirements, unfortunately, seems unreachable from these desktop environment developers.
Tought their desktop environments are full of all kinds of flaws, 
they never fell shame to brag about their products. 
My experience with Linux desktops is that they crash very often. 
The most annoying case is that the X windows freezes and does not react to the keyboard and touchpad. 
It is not recommended to shutdown the machine by pressing the power button. 
To solve this problem, you can ssh into the machine from another one and kill the Xorg process. 
There arises several problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;How do you ssh into your machine in any network? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What if you do not have another machine on hand?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first problem often comes to how do you find the ip of the freezing machine?
If the machine is connected to your home network, 
you can just scan the network for connected machines. 
If the machine is connected to your work network, 
you often have a host name for your machine on the network. 
Scanning the network for ips is not a good idea in this case, 
because there are often many machines connected to your work network.
If the machine is connected to some network (e.g., public network),
it can be even harder to find the ip of your freezing machine.
My way to solve this problem is let the machine write its ip address 
into a file in Dropbox. 
So I can always know the ip of my machine no matter which network it is connected to. 
The second problem is not a problem if you have a (smart) phone with you. 
With a smartphone, you can install an application (e.g., connectBot) to login into 
Linux machine. 
If you only have a phone which cannot connect to internet, 
you can call someone who know Linux and you can trust and let him/her
login into your machine and kill the X window. 
If you hesitate to do that, well, just press the power button on your machine, 
hold it unitl your machine shut down. &lt;/p&gt;</summary><category term="GUI"></category><category term="DE"></category><category term="Dropbox"></category><category term="X"></category><category term="Linux"></category><category term="SSH"></category></entry><entry><title>Automated Verizon Phone Bill (Continued)</title><link href="http://lisafly.github.io/blog/automated-verizon-phone-bill-continued/" rel="alternate"></link><updated>2012-09-05T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-09-05:blog/automated-verizon-phone-bill-continued/</id><summary type="html">&lt;p&gt;I have switched to the "Share Everything" plan of Verizon two weeks ago,
and I got a little complex bill this month due to people leaving and joining my family plan. 
My ruby program for parsing phone bill still works well. 
It is actually surprising smarter than I thought on this complicated bill. 
Big congratulations to myself!&lt;/p&gt;</summary><category term="phone"></category><category term="verizon"></category><category term="Ruby"></category><category term="programming"></category></entry><entry><title>Tips for Python</title><link href="http://lisafly.github.io/blog/tips-python/" rel="alternate"></link><updated>2012-09-02T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-09-02:blog/tips-python/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/python/python.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;h2&gt;String&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;String.capitalize&lt;/code&gt; capilaizes the first letter of a string.
The method &lt;code&gt;String.title&lt;/code&gt; capitalizes each word.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;String.replace&lt;/code&gt; replaces an old string with a new string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Python"></category><category term="replace"></category><category term="programming"></category><category term="string"></category><category term="tips"></category><category term="capitalize"></category><category term="sustitution"></category></entry><entry><title>Tips for Windows Operating System</title><link href="http://lisafly.github.io/blog/tips-windows/" rel="alternate"></link><updated>2012-09-01T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-09-01:blog/tips-windows/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/windows/windows.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;h2&gt;Tricky Problem&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;When Dropbox is working on files, they might become unaccessible
temporarily. If you believe a problem is result from Dropbox, you
can try your operation again. If it still does not work, then quit
Dropbox and redo your operations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To add a entry into the right-click menu, you can modified the
registry and modify it as follows:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;under the key
&lt;code&gt;HKEY_CLASSES_ROOT\Directory\Background\shell&lt;/code&gt;, create
another key with any name and in right-side pane set its value
to the label, which you want to show in desktop context menu,
like Media Player, Winamp, Firefox, anything else.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create another key under this newly created key with name
command, and in right-side pane set its value to the exact path
of application,
e.g. &lt;code&gt;C:\Program Files\RStudio\bin\rstudio.exe&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Though you can also use &lt;code&gt;/&lt;/code&gt; as the delimiter for paths in Windows
system sometimes, you can only use &lt;code&gt;\&lt;/code&gt; as the delimiter
for paths when you use DOS command, because &lt;code&gt;/&lt;/code&gt; has been already
used for other meanings in DOS command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt; stand for a single character in DOS command, 
and &lt;code&gt;??&lt;/code&gt; stand for one or two characters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default Windows 7 updates automatically unless you turn the auto
update off. This can be annoying if you do some long time computing
in Windows, because the auto-updating might force the computer to
reboot when the computing is still running. A way to solve this
problem is to turn off the auto-updating before you do computing in
Windows. However it is a convenient way, because you have to turn on
the auto-updating after the computing is done. A better way is to
lock your computer, in this way the auto-updating will be halt and
won't screw up your running program. What's more, this can also
prevent your privacy from other people. (Actually I have to check
whether it is because of lock or it is just because of the computer is
too busy.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KIS under Setting/Firewall/Settings/Networks, 
edited my WiFi network from Public to Local Network&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;VBScript&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;An VBScript is accesible anywhere if it is placed into a searchable path 
(a path included in the path environment). &lt;/li&gt;
&lt;/ol&gt;</summary><category term="tips"></category><category term="anti-virus"></category><category term="Windows"></category><category term="Dropbox"></category><category term="OS"></category></entry><entry><title>A Input Bug in Ruby</title><link href="http://lisafly.github.io/blog/input-bug-ruby/" rel="alternate"></link><updated>2012-08-27T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-08-27:blog/input-bug-ruby/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/bug.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;If you run a ruby program though Bash 
and the ruby program read multiple inputs from the console, 
all inputs will be the same as the first argument. 
I'm not very sure how to solve this problem.&lt;/p&gt;</summary><category term="programming"></category><category term="Bash"></category><category term="Ruby"></category><category term="bug"></category><category term="terminal"></category><category term="IO"></category></entry><entry><title>Tips for Vim</title><link href="http://lisafly.github.io/blog/tips-vim/" rel="alternate"></link><updated>2012-08-26T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-08-26:blog/tips-vim/</id><summary type="html">&lt;h2&gt;Skills&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To quickly comment a range of text, you can subsitute ^ with # in that range.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:w !sudo tee %&lt;/code&gt; helps write current content into the file 
if you did not open the write-protected file with &lt;code&gt;sudo vim&lt;/code&gt;.
Another way is to use the &lt;code&gt;:w a_file&lt;/code&gt; command to write to a file that you 
have access to and then use it to replace the original file. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Search&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;n to jump to next occurence and N to jump to previous occurence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt; searchs last searched string. 
This can also be used in substitution,
i.e., :%s//new_string/gc replaces the last search string with &lt;code&gt;new_string&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Command&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;:! external_command&lt;/code&gt; to run external commands. 
You can use the up and down arrow to scroll to last and next external command 
after you have typed &lt;code&gt;:!&lt;/code&gt; in vim. 
This trick also works in other environment, 
e.g., you can press the up and down key to scroll to last and next search string
after you have typed &lt;code&gt;/&lt;/code&gt; in vim.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Buffers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;:buffers, :ls, :bw(have to write buffer to file first)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Indent&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Select lines that you want to indent
and then use command &lt;code&gt;:le n&lt;/code&gt; or &lt;code&gt;:ri n&lt;/code&gt;.
This sets the indent of the selected lines to &lt;code&gt;n&lt;/code&gt; spaces (from the left/right).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;n&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;&amp;gt;G&lt;/code&gt; to shift the current line and lines afte to the right.
If you want shift all lines to the right,
you can first go the first line by command &lt;code&gt;gg&lt;/code&gt;,
and then type in command &lt;code&gt;&amp;gt;G&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="sudo"></category><category term="vim"></category><category term="substitute"></category><category term="root"></category><category term="tips comment"></category><category term="Linux"></category></entry><entry><title>Load User-written Script into Ruby</title><link href="http://lisafly.github.io/blog/load-script-ruby/" rel="alternate"></link><updated>2012-08-25T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-08-25:blog/load-script-ruby/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;By default the current working directoly is not in the search path of Ruby. 
To load a user-written script named "script.rb" into Ruby, 
you can use the command &lt;code&gt;require './script.rb'&lt;/code&gt;.&lt;/p&gt;</summary><category term="search path"></category><category term="require"></category><category term="programming"></category><category term="load"></category><category term="package"></category><category term="Ruby"></category></entry><entry><title>Tips for Ruby</title><link href="http://lisafly.github.io/blog/tips-ruby/" rel="alternate"></link><updated>2012-08-25T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-08-25:blog/tips-ruby/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="200" align="right"/&gt;&lt;/p&gt;
&lt;h2&gt;Array&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;push&lt;/code&gt; inserts an element to the back of the arry; 
the method &lt;code&gt;insert&lt;/code&gt; inserts an element to any place of the array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;pop&lt;/code&gt; removes the last element of the array;
the method &lt;code&gt;delete&lt;/code&gt; removes any specified element from the array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;concat&lt;/code&gt; combines the array with another one;
the method &lt;code&gt;join&lt;/code&gt; concatenates all elements in the array separated 
by the specified delimiter. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;String&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use the method &lt;code&gt;to_i&lt;/code&gt; to convert a string to integer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You use both single and double quotes to denote string. 
The difference is that single quotes preserves 
escape characters while double quotes interprete escape characters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;end_with?&lt;/code&gt; check whether a string ends with the specified string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;upcase&lt;/code&gt; returns a copy of the string with lower case letters
replaced with their upper case letters; 
the method &lt;code&gt;downcase&lt;/code&gt; returns a copy of the string with upper case letters 
replaced with their lower case letters;
the method &lt;code&gt;swapcase&lt;/code&gt; return a copy of the string with lower case letters 
replaced with their upper case letters and upper case character replaced with 
their lower case letters. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the method &lt;code&gt;strip&lt;/code&gt; to remove leading and trailing white spaces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Input and Output&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Both the function &lt;code&gt;puts&lt;/code&gt; and &lt;code&gt;print&lt;/code&gt; display the content of objects 
on the console. The difference is that the function &lt;code&gt;puts&lt;/code&gt; add a new line
to the end if their is no one while &lt;code&gt;print&lt;/code&gt; not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;gets&lt;/code&gt; read in input from the console. 
You can use the &lt;code&gt;chomp&lt;/code&gt; method to ignore new lines,
i.e., you can use &lt;code&gt;gets.chomp&lt;/code&gt; to read a single line from the console.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;File and Directory&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can use the method &lt;code&gt;Dir.entries&lt;/code&gt; to query files and subdirectories
in a directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;File.delete&lt;/code&gt; removes files specified files. 
The number of files passed as arguments is returned. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Flow Control&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You cannot use &lt;code&gt;else if&lt;/code&gt; in Ruby, instead you can use &lt;code&gt;elsif&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Object and Class&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;methods&lt;/code&gt; to query all methods of an object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'd not define a function with the same as some directly usable function/method in Ruby.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="array"></category><category term="IO"></category><category term="Ruby"></category><category term="programming"></category><category term="string"></category></entry><entry><title>String in C++11</title><link href="http://lisafly.github.io/blog/cpp-auto-string/" rel="alternate"></link><updated>2012-08-20T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-08-20:blog/cpp-auto-string/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;auto s = "abcd"&lt;/code&gt; creats &lt;code&gt;const char *&lt;/code&gt; not string, so use &lt;code&gt;auto&lt;/code&gt; with caution. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since a string in C++ is an array of chars, 
you can operate it like an array. 
For example, you can use range-based for loop and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is recommended that you use &lt;code&gt;std::string&lt;/code&gt; in function which are not intended to be 
interfaces, and you use &lt;code&gt;const char *&lt;/code&gt; as parameters of function that are intended to be 
interfaces (e.g., compiled as shared library and so on).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;==&lt;/code&gt; to compare whether the content of two &lt;code&gt;std::string&lt;/code&gt; are the same,
but you cannot use &lt;code&gt;==&lt;/code&gt; to compare the content of &lt;code&gt;const char *&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="auto"></category><category term="iteration"></category><category term="programming"></category><category term="C/C++"></category><category term="string"></category><category term="loop"></category><category term="char"></category></entry><entry><title>Make Eclipse Support C++11</title><link href="http://lisafly.github.io/blog/eclipse-cpp11/" rel="alternate"></link><updated>2012-08-20T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-08-20:blog/eclipse-cpp11/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/eclipse/cdt.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make a new C++ project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default options for everything&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once created, right-click the project and go to "Properties"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C/C++ Build -&amp;gt; Settings -&amp;gt; Tool Settings -&amp;gt; GCC C++ Compiler -&amp;gt; Miscellaneous -&amp;gt; Other Flags. 
Put -std=c++0x at the end. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++ General -&amp;gt; Paths and Symbols -&amp;gt; Symbols -&amp;gt; GNU C++. 
Click "Add..." and paste &lt;code&gt;__GXX_EXPERIMENTAL_CXX0X__&lt;/code&gt; (ensure to append and prepend two underscores) 
into "Name" and leave "Value" blank.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hit Apply, do whatever it asks you to do, then hit OK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C/C++"></category><category term="software"></category><category term="eclipse"></category></entry><entry><title>Lvalue Reference and Rvalue Reference</title><link href="http://lisafly.github.io/blog/lvalue-rvalue-reference/" rel="alternate"></link><updated>2012-08-19T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-08-19:blog/lvalue-rvalue-reference/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/cpp/left-right.jpg" height="180" width="200" align="right"/&gt;&lt;/p&gt;
&lt;h2&gt;Difference betwen Lvalue and Rvalue Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Lvalue and Rvalue are terrible names. They are due to historical reasonal but people stuck with these names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lvalue reference has a name while a rvalue reference has no name, in other words, 
a lvalue reference is persistent while a rvalue reference is temporary.
Let &lt;code&gt;f(vector&amp;lt;int&amp;gt; &amp;amp;&amp;amp; x)&lt;/code&gt; be a function/method (can be a constructor) 
which takes a rvalue reference as argument.
It is common to misunderstand &lt;code&gt;x&lt;/code&gt; as a rvalue reference. 
When a rvalue reference/temporary object is passed to &lt;code&gt;f&lt;/code&gt;, 
it is moved to &lt;code&gt;x&lt;/code&gt;,
however, &lt;code&gt;x&lt;/code&gt; itself is not a rvalue reference/temporary object because it has a name.
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; only means that it is OK to move &lt;code&gt;x&lt;/code&gt;, but does not mean that &lt;code&gt;x&lt;/code&gt; is a rvalue reference/temporary object.
And at the place where you intend to move &lt;code&gt;x&lt;/code&gt;, 
you must use &lt;code&gt;std::move&lt;/code&gt; manually to move it, 
otherwise, it get copied. 
Values return by functions/methods and expression are temporary values, 
so you do have to use &lt;code&gt;std::move&lt;/code&gt; to move them when you pass them 
to functions/emthods that take a rvalue reference as argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can take the address of a lvalue reference but you cannot take the address of a rvalue reference. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you apply &lt;code&gt;std::move&lt;/code&gt; on a primitive type variable (double, int and so on), 
it is usually lefted unchanged. 
This means that copy is usually the fastest way to implement
move on primitive types, but it is not guaranteed that copy is 
always used (different compiler might have different implementation on this). 
After being moved a variable still have a valid but unspecified value.
So do not use the value in a moved variable until you given it a new known value.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lvalue referece cannot be moved. 
The reason is that such operation is not necessary. 
To move the object that the lvalue reference points to, 
one can move the object directly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You cannot use a vecotor (similar for other containers) of lvalue references,
because lvalue references have to be initialized to point to valid objects when they are created. 
An alternative way is to use vector of pointers/iterators instead. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always use &lt;code&gt;const&lt;/code&gt; lvalue reference, unless you intend to change the referenced object. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How to Use Rvalue Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do not write &amp;amp;&amp;amp; to return type of a function,
and there is no need to return a local variable using &lt;code&gt;std::move&lt;/code&gt;.
When return a local variable, it is automatically move in C++11. 
However, if the local variable is static, then it is not moved as expected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you copy content of an argument in a function, 
overload it with rvalue reference and move the content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you write a class with the copy constructor and the assignment operator, 
write also the move constructor and the move assignment operator.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C/C++"></category><category term="reference"></category><category term="programming"></category></entry><entry><title>An IO Bug in R</title><link href="http://lisafly.github.io/blog/input-bug-r/" rel="alternate"></link><updated>2012-08-16T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-08-16:blog/input-bug-r/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/bug.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I encountered an input/output bug in R in Linux system. 
The symptom is that input and output are not displayed in the terminal 
and the warning message 
"An unusual circumstance has arisen in the nesting of readline input. 
Please report using bug.report()" is shown. 
I found that though input and output are not displayed, you can still 
interact with the underlying R session. 
A safe way is to save the R workspace, quit the R session, open a new 
R session and load in the saved workspace. To save the R workspace,
just type in &lt;code&gt;save.image('ws_name')&lt;/code&gt; in the console, where &lt;code&gt;ws_name&lt;/code&gt; 
is the name of the workspace. Notice that you will not see anything 
happen on the console, so you have to make sure that you do not make 
any mistake typing in the command. To quit the R session after saving 
the workspace, you can type in 'q('no')' in the console. 
Similarly, you won't see anything in the console, so make sure you do not 
make any mistake. Now can open a new R session, and then load in the saved 
workspace. &lt;/p&gt;</summary><category term="warning"></category><category term="IO"></category><category term="programming"></category><category term="R"></category></entry><entry><title>Keep Matrix Structure when Extract a Row/Column from a Matrix</title><link href="http://lisafly.github.io/blog/keep-matrix-structure-r/" rel="alternate"></link><updated>2012-08-16T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-08-16:blog/keep-matrix-structure-r/</id><summary type="html">&lt;p&gt;I talked in the post &lt;a href=""&gt;Abuse of Vector in R&lt;/a&gt; that 
it is often the case that we want keep the matrix sturcture when 
extracting a row/column from a matrix,
i.e., we often want to return a matrix with 1 row/column when extracting 
a row/column from a matrix. 
By default R returns a vector when you extract a row/column from a matrix.
To override this behavior, you can specify the option &lt;code&gt;drop=FALSE&lt;/code&gt; when 
extracting submatrix from matrix. A illustrative example is given below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nrow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the contrary, if you want to keep the sturcture of a matrix with multiple
rows and columns but convert a matrix with 1 row/column to a vector in R, 
you can the function &lt;code&gt;drop&lt;/code&gt;. See the following example. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;   &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="mi"&gt;11&lt;/span&gt;   &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;    &lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;   &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programming"></category><category term="data structure"></category><category term="algebra"></category><category term="matrix"></category><category term="R"></category><category term="vector"></category></entry><entry><title>Summary on Random Number Generators</title><link href="http://lisafly.github.io/blog/summary-random-number-generators/" rel="alternate"></link><updated>2012-07-24T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-24:blog/summary-random-number-generators/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/rng/random-number-generator.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;The most popular pseudo random number generator (PRNG) currently is Mersenne Twister. 
Mersenne Twister has many different versions, among which the MT19937 
is the most widely used one. 
The period of MT19937 is extreemly long ($2^{19937}-1$)
and is equidistributed for generating vectors up to dimension 623. 
The MT19937 generate 32 bits random numbers. 
Combining two random blocks, one can generate 64 bits random numbers.
This is often implemented together with the 32 bit version, 
and usually call MT19937_64.
The MT19937_64 is equidistributed for generating vectors up to dimension 311.
A more modern family of random number generators than Mersenne Twister 
is the WELL random number generators, which have better equidistribution 
property and are better to escape the zeroland (initialization 
array contains many zero bits). 
However, the speed of the WELL generators is about 0.6 to 0.7 compared to the Mersenne Twister generators. 
Also the WELL random number generators has a large inner state 
(e.g., the WELL44497b uses about 33kb for its inner state while the MT19937 uses only about 2.5kb). 
This is usually not a problem on modern computers, 
but if you use lots of random number generators at the same time or if the code is run on a embedded device, 
it might worth considering the consume of memories of these generators. 
Among different versions of WELL generators, WELL19937c and WELL44497b are commonly used. 
SIMD-oriented Fast Mersenne Twister is an improved version of Mersenne Twister. 
It uses parallelism of modern CPUs and is about twice faster than mersenne Twister. 
SFMT also has better equidistribution property than Mersenne Twister, but not as good as WELL.
SFMT recovers from 0-excess initial state faster than Mersenne Twister, but not faster than WELL.
It is likely that SFMT replaces Mersenne Twister and becomes the next popular number generator. &lt;/p&gt;</summary><category term="WELL"></category><category term="RNG"></category><category term="statistics"></category><category term="SFMT"></category><category term="dimension"></category><category term="MT"></category></entry><entry><title>List Non-backup Files in Linux</title><link href="http://lisafly.github.io/blog/list-files-without-tilde-linux/" rel="alternate"></link><updated>2012-07-17T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-17:blog/list-files-without-tilde-linux/</id><summary type="html">&lt;p&gt;When you use the &lt;code&gt;ls&lt;/code&gt; command to list files in a directory 
the backup files (whose names end with ~) also show up , 
which is often annoying. 
While there are many ways to list non-backup files, 
I give two neat ways to achieve this. 
The first way way is to use &lt;code&gt;ls -B&lt;/code&gt;. 
The second way is to use &lt;code&gt;ls --ignore=*~&lt;/code&gt;.&lt;/p&gt;</summary><category term="Linux"></category><category term="backup"></category></entry><entry><title>Tips for the IML Procedure in SAS</title><link href="http://lisafly.github.io/blog/sas-iml-procedure/" rel="alternate"></link><updated>2012-07-11T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-11:blog/sas-iml-procedure/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/sas/sas.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;End an &lt;code&gt;IML&lt;/code&gt; procedure with &lt;code&gt;quit&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;IML&lt;/code&gt; procedure does not support overloading functions. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define functions in the &lt;code&gt;IML&lt;/code&gt; procedure, and the definition can be nested. 
That is you can define another function in a user-defined function. 
Note that the order of definition of functions matter (similar to C). 
A function must be defined before it is called. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not very sure how to use default arguments in user-defined functions in the &lt;code&gt;IML&lt;/code&gt; procedure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;code&gt;IML&lt;/code&gt; procedure, a vector can be used as a matrix and vice versa. 
When a matrix is used as a vector, elements are extracted by row which is different from R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It seems that the &lt;code&gt;IML&lt;/code&gt; prcedure does not support recursive functions (not sure about current version of SAS).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In SAS, data sets are global which means that any procedure can use a created data set.
However, variables defined in a &lt;code&gt;IML&lt;/code&gt; procedure is local, which means that variables defined 
in different &lt;code&gt;IML&lt;/code&gt; procedures are not shared. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can define modules in a &lt;code&gt;IML&lt;/code&gt; procedure. 
A module is just a bunch of statment putted together. 
A module does not have any argument, which means that it must invoked without parentheses. 
A function can have argument(s), and must be invoked with parentheses. 
Another important difference is that variables defined in a function takes effect only 
in the function while variables in a module takes effect in the whole &lt;code&gt;IML&lt;/code&gt; procedure after 
its definition. Based on these comparision, function is more useful and better than module in the &lt;code&gt;IML&lt;/code&gt; procedure. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The slicing of vectors and matrices in SAS is similar to that in R.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The name of a function in the &lt;code&gt;IML&lt;/code&gt; procedure can exceeds 8 characters, but I am not
sure about the maximum length.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;code&gt;mattrib&lt;/code&gt; to modify attributes of matrix in the &lt;code&gt;IML&lt;/code&gt; procedure. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can &lt;code&gt;||&lt;/code&gt; to combine matrix horizontally and &lt;code&gt;//&lt;/code&gt; to combine matrix vertically. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="SAS"></category><category term="matrix"></category><category term="programming"></category><category term="IML"></category></entry><entry><title>Make Plots in SAS</title><link href="http://lisafly.github.io/blog/sas-plot/" rel="alternate"></link><updated>2012-07-11T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-11:blog/sas-plot/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/sas/sas.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are functions to add points, lines and legends to an existing plot in R.
In SAS, there is no way to do this. 
What you can do is to add plotting commands in the plotting procedure and rerun your code. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Staring from version 9.2, SAS offers new procedures such as PROC SGPLOT and PROC SGPANEL for making plots.
PROC SGPLOT (sophisticated graphical plot) produces high quality plots. 
PROC SGPANEL divides the window into several parts and make plots on these sub area.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to call R from SAS which means that you can use R to make plots in SAS if you like. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="image"></category><category term="SAS"></category><category term="graphics"></category><category term="programming"></category></entry><entry><title>How Many Balls Do We Need?</title><link href="http://lisafly.github.io/blog/how-many-balls-do-we-need/" rel="alternate"></link><updated>2012-07-10T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-10:blog/how-many-balls-do-we-need/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ball-box/ball-in-box.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;If we randomly put balls into $m(\ge1)$ boxes until $n(\le m)$ of them are occupied,
what is the expectation of the number of balls needed?&lt;/p&gt;
&lt;p&gt;See my neat solution &lt;a href="http://dclong.github.io/media/ball-box/balls.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="statistics"></category><category term="probability"></category><category term="fun problems"></category></entry><entry><title>Number of Records?</title><link href="http://lisafly.github.io/blog/number-of-records/" rel="alternate"></link><updated>2012-07-10T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-10:blog/number-of-records/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/records/break-record.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Suppose there are $n$ distinct numbers $x_1,\ldots, x_n$,
 and $y_1, \ldots, y_n$ is a random permutations of them.
 If $\exists k$ such that $y_k&amp;lt;y_i, \forall 1\le i&amp;lt;k$,
 then we say that $y_k$ is a record 
 (we always count $y_1$ as a record).
 What is the expected number of records in $y_1, \ldots, y_n$?&lt;/p&gt;
&lt;p&gt;See my neat solution &lt;a href="http://dclong.github.io/media/records/records.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="statistics"></category><category term="records"></category><category term="probability"></category><category term="permutation"></category><category term="fun problems"></category></entry><entry><title>Useful Packages and Commands for Latex</title><link href="http://lisafly.github.io/blog/useful-packages-for-latex/" rel="alternate"></link><updated>2012-07-09T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-09:blog/useful-packages-for-latex/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/latex/latex.gif" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;h2&gt;Math Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{amssymb} &lt;ul&gt;
&lt;li&gt;popular math fonts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{dsfont} &lt;ul&gt;
&lt;li&gt;&lt;code&gt;\mathds&lt;/code&gt; font&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{bm} % bold math symbols&lt;ul&gt;
&lt;li&gt;bold math symbols&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{amsmath} &lt;ul&gt;
&lt;li&gt;math formulas.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{amsthm} &lt;ul&gt;
&lt;li&gt;theorem environments&lt;/li&gt;
&lt;li&gt;proof enviroment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;List Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{enumerate} &lt;ul&gt;
&lt;li&gt;universal list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Graphics Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{ifpdf} &lt;ul&gt;
&lt;li&gt;allow including figures without extensions and select the right type of figures according to the compiler used&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{graphicx} &lt;ul&gt;
&lt;li&gt;for including pictures&lt;/li&gt;
&lt;li&gt;the graphics driver is selected automatically if none is specified (via arguments of the package) &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{psfrag} &lt;ul&gt;
&lt;li&gt;for editing eps figures in Latex (e.g., replacing text)&lt;/li&gt;
&lt;li&gt;need to compile using command &lt;code&gt;latex&lt;/code&gt;, &lt;code&gt;dvips&lt;/code&gt; and &lt;code&gt;ps2pdf&lt;/code&gt; in sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{epsfig} &lt;ul&gt;
&lt;li&gt;for including eps figures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Bibliography&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{natbib} &lt;ul&gt;
&lt;li&gt;for citing refernce&lt;/li&gt;
&lt;li&gt;compatible with bibtex&lt;/li&gt;
&lt;li&gt;compile using &lt;code&gt;pdflatex/latex&lt;/code&gt;, &lt;code&gt;bibtex&lt;/code&gt;, &lt;code&gt;pdflatex/latex&lt;/code&gt;, &lt;code&gt;pdflatex/latex&lt;/code&gt;, &lt;code&gt;pdflatex/latex&lt;/code&gt; in sequence&lt;/li&gt;
&lt;li&gt;some Latex IDE (e.g., WinEdt) has a single button/command (PDFTexify) for simplifying the compiling process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Color&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage[usenames,dvipsnames]{color} &lt;ul&gt;
&lt;li&gt;using color by name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Mutiple Files&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You can use command &lt;code&gt;\input&lt;/code&gt; or &lt;code&gt;\include&lt;/code&gt; to include Latex source files. 
Generally speaking, 
&lt;code&gt;\input&lt;/code&gt; is preferred over &lt;code&gt;\include&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;\usepackage{subfiles}
For more information, please refer to &lt;a href="http://en.wikibooks.org/wiki/LaTeX/General_Guidelines"&gt;wiki book&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Chinese Packages&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;\usepackage{xeCJK} &lt;ul&gt;
&lt;li&gt;no need if use ctexart, ctexbook and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\usepackage{fontspec}&lt;ul&gt;
&lt;li&gt;choose font theme &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;\setCJKmainfont{Adobe Song Std} &lt;ul&gt;
&lt;li&gt;use adobe fonts as the main font&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="color"></category><category term="programming"></category><category term="list"></category><category term="Latex"></category><category term="package"></category><category term="bibliography"></category><category term="enumerate"></category><category term="formula"></category><category term="math"></category><category term="graphics"></category></entry><entry><title>How Many Empty Boxes?</title><link href="http://lisafly.github.io/blog/how-many-empty-boxes/" rel="alternate"></link><updated>2012-07-08T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-08:blog/how-many-empty-boxes/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ball-box/empty-box.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;If we randomly put $n(\ge1)$ balls into $m(\ge1)$ boxes, 
what is the expectation of the number of empty boxes?&lt;/p&gt;
&lt;p&gt;See my neat answer &lt;a href="http://dclong.github.io/media/ball-box/empty-box.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="expectation"></category><category term="ball"></category><category term="box"></category><category term="probability"></category><category term="fun problems"></category><category term="statistic"></category></entry><entry><title>Tips for Markdown</title><link href="http://lisafly.github.io/blog/markdown-tips/" rel="alternate"></link><updated>2012-07-08T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-08:blog/markdown-tips/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/markdown/markdown.gif" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Jekyll interprete contents in two nested curly brackets as a variable 
(white spaces around the vairable are trimmed).
For example, if we have &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;in the markdown code, 
then &lt;code&gt;abcd&lt;/code&gt; is interpreted as a variable.
So you should avoid using two nested braces for other purpose in Markdown code, 
otherwise, 
Jekyll might fail to build your web pages. 
If you do want to dispaly two nested curly brackets, 
you can either insert a space between the two left curly brackets and the two
right curly brackets. Also you can also put it into a literal block (might be 
changed to raw later). There are also other preserved symbol combinations in Jekyll 
(e.g. { followed by %). Use these for other purpose might result in failure of 
building your web pages. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A block indented 4 spaces is treated as a code block in Markdown. 
However, if this block is after a list item, it will not show up
as a code block correctly. This is due the ambiguity of the Markdown syntax.
A simple way to overcome this problem is to indent the block with 8 spaces. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nature numbers in ordred list only indicate order items. 
The actually order of items is according to the order you list them, 
not the order of prefixed nutuarl numbers. 
The values of natural numbers does not matter in ordered list. 
You can use a same nature number if you want. 
Later items do not have to start with bigger nature numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To insert a link in Markdown, you can use &lt;code&gt;[link name](url)&lt;/code&gt;. 
If you want the url to show up as it is, you can use &lt;code&gt;[url](url)&lt;/code&gt;.
However, this is not convenient. A better way is to use &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Markdown"></category><category term="Jekyll"></category><category term="programming"></category></entry><entry><title>Thread Safe Random Number Generator</title><link href="http://lisafly.github.io/blog/thread-safe-random-number-generator/" rel="alternate"></link><updated>2012-07-08T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-07-08:blog/thread-safe-random-number-generator/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/rng/random-number-generator.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;In statistical simulation, a thread safe random number generator is often useful. 
Thread safty can be achieved by synchronize public methods of random number generator 
engines. In C++, this can be done through mutex (see more about my post on multithreading 
in C++). I implemented a &lt;a href="http://dclong.github.io/media/rng/smt.h"&gt;thread safe random number generator&lt;/a&gt; (based on the Mersenne Twister).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#ifndef&lt;/span&gt; &lt;span class="nx"&gt;DCLONG_SMT_H_&lt;/span&gt;
&lt;span class="vi"&gt;#define&lt;/span&gt; &lt;span class="nx"&gt;DCLONG_SMT_H_&lt;/span&gt;

&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UIntType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nb"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nb"&gt;f&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;smt&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;mersenne_twister_engine&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UIntType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;mutex&lt;/span&gt; &lt;span class="nx"&gt;_mutex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()(){&lt;/span&gt;
            &lt;span class="nx"&gt;lock_guard&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;lck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_mutex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mersenne_twister_engine&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UIntType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UIntType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nb"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UIntType&lt;/span&gt; &lt;span class="nb"&gt;f&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mutex&lt;/span&gt; &lt;span class="nx"&gt;smt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UIntType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;_mutex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;typedef&lt;/span&gt; &lt;span class="nx"&gt;smt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;351&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;175&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xccab8ee7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x31b6ab00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xffe50000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1812433253&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;smt11213b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;typedef&lt;/span&gt; &lt;span class="nx"&gt;smt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;624&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;397&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x9908b0df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x9d2c5680&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xefc60000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1812433253&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;smt19937&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="vi"&gt;#if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BOOST_NO_INT64_T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BOOST_NO_INTEGRAL_INT64_T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;typedef&lt;/span&gt; &lt;span class="nx"&gt;smt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;uint64_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;312&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;156&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;UINT64_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xb5026f5aa96619e9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;UINT64_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x5555555555555555&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;UINT64_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x71d67fffeda60000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;UINT64_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xfff7eee000000000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;UINT64_C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6364136223846793005&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;smt19937_64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="vi"&gt;#endif&lt;/span&gt;

&lt;span class="vi"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To test whether this random number generator is truely thread safe, I generated a bunch 
of integer from negative binomial distribution using both this random number
generator and mt19937_64 with a same seed (on which the random number generator implemented here
is based) as the underlying engines, and compare whether they are the same set. 
Surprisingly, the two sets of integers I got were different. I was very confused
and ask this problem to &lt;a href="http://bartoszmilewski.com/"&gt;Bartosz Milewski&lt;/a&gt; who
published a series of video tutorials on multithreading in C++11. After
discussing with Bartosz Milewski, he pointed out that the problem was because
the negative binomial distribution calls the method &lt;code&gt;operator()()&lt;/code&gt; multiple
times to generate a single random integer. This does not mean that anything is
wrong with the implementation of the negative binomial distribution. It is
thread safe as long as the underlying random number generator it uses is thread
safe. Due to the fact that a negative binomial distribution calls the method
&lt;code&gt;operator()()&lt;/code&gt; of the underlying random number generator multiple times to generate a single integer, 
the random numbers it generates based on a synchronized random number generator
is not necessarily the same set as the one that the corresponding serial random
number generator generates from the same seed. I verified that the numbers
generated by the negative binomial distribution using the thread safe random
number generator here come from the right distribution. Another way to validate
the implementation of the thread safe random number generator here is that if a
distribution call the method &lt;code&gt;operator()()&lt;/code&gt; only once to generate a random
number, then the numbers it generates based on smt and mt19937_64 should be the
same set. I verified that this is true for a bernoulli distribution. &lt;/p&gt;
&lt;p&gt;Short after I implemented this thread safe random number generator, I found
betters ways to generate random numbers in parallel. The basic is to make the
random number engine to jump forward a long enough distance quickly. Currently
many popular random number generators can jump forward a long enough distance in
a acceptable short time. For example, the Mersenne Twister can jump forward in
milliseconds. For more information, please see &lt;a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/#dSFMT"&gt;SFMT&lt;/a&gt;.&lt;/p&gt;</summary><category term="C++"></category><category term="RNG"></category><category term="programming"></category><category term="thread"></category><category term="distribution"></category><category term="HPC"></category><category term="fun problems"></category><category term="MT"></category><category term="Concurrency"></category></entry><entry><title>Tips for Multithreading/Concurrency Programming in C++11</title><link href="http://lisafly.github.io/blog/cpp11-concurrency-tips/" rel="alternate"></link><updated>2012-06-24T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-24:blog/cpp11-concurrency-tips/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you use g++ to compile your parallel program which uses the thread library,
you need to use the option &lt;code&gt;-lpthread&lt;/code&gt;. 
For more information, see the post &lt;a href="http://dclong.github.io/en/2012/06/tips-gcc-compiler/"&gt;GNU/GCC&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; method of threads guarantees happen-before relationship between threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can pass either a function (can be lambda function) and an object which implement the 
operator &lt;code&gt;()&lt;/code&gt; to a thread. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;future&lt;/code&gt; class in C++11 is similar to the &lt;code&gt;future&lt;/code&gt; class in Java. 
The difference is that in C++11 we have another class named &lt;code&gt;promise&lt;/code&gt; 
which can work together with &lt;code&gt;future&lt;/code&gt; to return values from threads while 
in Java you do not need a promise and can just let methods (to be called by 
threads) return values. In C++11, there is another class &lt;code&gt;async&lt;/code&gt; which is 
close to what Java does. You do not have to use a promise and you can let 
functions/methods (to be called by threads) return values directly. &lt;code&gt;async&lt;/code&gt; 
is kind of like thread pool in Java, but not exactly the same. 
In C++11, you do not have much control on what many threads to with &lt;code&gt;async&lt;/code&gt; 
while in Java, you have better control on that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To protect shared data between threads in C++11, you have to use the &lt;code&gt;mutex&lt;/code&gt; (mutual exclusion)
class which is similar to the &lt;code&gt;ReentrantLock&lt;/code&gt; class in Java. Actually the
&lt;code&gt;ReentrantLock&lt;/code&gt; class in Java is essentially mutex. 
There is a common misunderstanding about &lt;strong&gt;lock&lt;/strong&gt; in Java.
The locking/unlocking is a conceptual thing that happens via programmer
discipline: basically if you make a method synchronized to prevent a read/write
conflict on a variable, then you have to ensure that every access to that
variable is throught a synchronized method/block of the same object. That forces
every threads to acquire mutex of the object and ensures mutual exclusion. 
Directly use of the &lt;code&gt;lock&lt;/code&gt; and &lt;code&gt;unlock&lt;/code&gt; methods of mutex is not encouraged in 
C++11 though, this is becuase if exception occurs between the locked block, 
the resource will never be unlock resulting dead lock. 
In Java this is gracefully addressed by introducing a &lt;code&gt;finally&lt;/code&gt; block in
addition to the &lt;code&gt;try ... catch ...&lt;/code&gt; blocks. 
A commonly used way to proctect shared data in C++11 is to use the &lt;code&gt;lock_guard&lt;/code&gt; 
class. For example you can put the following code in the functions/methods that 
need to be access by thread mutual exclusively&lt;/p&gt;
&lt;p&gt;std::lock_guard&lt;std::mutex&gt; lck(_mutex);&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;where &lt;code&gt;_mutex&lt;/code&gt; is a shared object of the &lt;code&gt;mutex&lt;/code&gt; class among these
functions/methods. The deconstructor of the &lt;code&gt;lock_guard&lt;/code&gt; unlocks the lock so
this guarantees that no dead lock happens. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It seems that parallel code in c++ is as efficient as in java (in the sense of code speedup)? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;std::async&lt;/code&gt; together with &lt;code&gt;std::future&lt;/code&gt; is an alternative to 
&lt;code&gt;std::thread&lt;/code&gt; and shared variables when implementing parallel algorithms. 
Using &lt;code&gt;std::async&lt;/code&gt; and &lt;code&gt;std::future&lt;/code&gt;, one avoids to lock/unlock variables 
and thus avoids false sharing problems, so it sometimes a better alternative
to &lt;code&gt;std::thread&lt;/code&gt; and shared variables. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you pass the address of a method to a thread or async, 
you must use the full name of the function, 
i.e., you have to use class name as the prefix. 
Also, you have to pass &lt;code&gt;this&lt;/code&gt; as the second parameter to thread/async
if the method is a non-static method. 
This is because a non-static method need a instance to run. 
(I'm not very sure whether this is true for static methods)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'd better not pass overloaded functions to thread or async in a class,
because it is hard for the thread or async to know which one is the right method to call.
I'm not sure whether there is way to solve this problem or not ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It seems that object used mutex cannot be copied? 
So if you write a thread safe class using mutex, 
you'd better override the default copy constructor of the class,
or you can make the mutex static. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parallel program often requires shared varialbes which should be access by references. 
By default objects are passed by value (i.e. copied) in C++, 
so you have to be careful when you write parallel code in C++,
otherwise, it is easy to make mistakes. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefer asynchronized buffering when dealing with high-latency operations. 
A good article from Herb Sutter can be found 
&lt;a href="http://www.drdobbs.com/architecture-and-design/know-when-to-use-an-active-object-instea/227500074?pgno=1"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="programming"></category><category term="C/C++"></category><category term="Java"></category><category term="HPC"></category><category term="async"></category><category term="mutex"></category><category term="future"></category><category term="concurrency"></category><category term="promise"></category></entry><entry><title>Copy Arrays in Java</title><link href="http://lisafly.github.io/blog/copy-array-java/" rel="alternate"></link><updated>2012-06-23T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-23:blog/copy-array-java/</id><summary type="html">&lt;p&gt;There are many different ways to copy arrays of object (primitive types) in Java. 
However, 
the fastest way seems to be the method &lt;code&gt;System.arraycopy&lt;/code&gt;. 
This methed is implemented using native code and only performs a shallow copy. 
Acutally most methods for copying arrays in Java perform shallow copy.&lt;/p&gt;</summary><category term="array"></category><category term="copy"></category><category term="Java"></category><category term="programming"></category></entry><entry><title>Power Settings in Linux with Gnome Desktop</title><link href="http://lisafly.github.io/blog/linux-gnome-power-settings/" rel="alternate"></link><updated>2012-06-19T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-19:blog/linux-gnome-power-settings/</id><summary type="html">&lt;p&gt;Full control of the power settings in Linux with Gnome Desktop can be done through 
&lt;strong&gt;dconf-editor&lt;/strong&gt; at org-&amp;gt;gnome-&amp;gt;settings-daemon-&amp;gt;plugins-&amp;gt;power.
The default way to determine low battery, critical low battery and to carray out 
critical low action is by counting left battery time. 
You can change the way to measuring percentage of battery. 
To get help on what an entry means, single click on the entry. &lt;/p&gt;</summary><category term="configuration"></category><category term="battery"></category><category term="power"></category><category term="Linux"></category></entry><entry><title>Estimation of False Discovery Rate using Sequential Permutation Pvalues</title><link href="http://lisafly.github.io/blog/sequential-permutation-test/" rel="alternate"></link><updated>2012-06-18T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-18:blog/sequential-permutation-test/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
I wrote a paper on sequential permutation test with Tim Bancroft and Dan Nettleton. 
The paper "T. Bancroft, C. Du and D. Nettleton (2012). 
Estimation of False Discovery Rate Using Sequential Permutation P­Values." 
has been accepted by Biometrics. To illustrate ideas in the paper and make sequential 
permutation test easier to use, I wrote an R package &lt;strong&gt;dclong.spt&lt;/strong&gt; which is availabe 
on &lt;a href="https://github.com/dclong/dclong.spt"&gt;GitHub&lt;/a&gt;. In order to make the package smaller, 
I moved these big datasets (used for illustrations in the paper) from the package to this website. &lt;/p&gt;
&lt;p&gt;The data &lt;a href="http://dclong.github.io/media/spt/marker.rda"&gt;barley&lt;/a&gt; was produced by experiment 
"Genetic regulation of gene expression of barley in response
to stem rust (Pgt isolate TTKS)" and can be access from PLEXdb (BB64). 
There is a file called "BB64_RMA_tmt_medians.txt" on the download page contains RMA expressions. 
The rma expression for the 75 chips involve fungas infection is the dataset barley in this package. &lt;/p&gt;
&lt;p&gt;The Band T-cell Acute Lymphocyctic Leukemia (ALL) data set can be 
access via the Bioconductor ALL package at &lt;www.bioconductor.org&gt;. 
Measures of messenger ribonucleic acid (mRNA) commonly referred to as expression levels
are available for 12,625 probesets in 128 ALL patients.
Of these 128 patients, we focus on the 21 males who have been classified as having a translocation
between chromosomes 9 and 22 (BCR/ABL) and the 5 males who have a translocation between
chromosomes 4 and 11 (ALL1/AF4). 
This subset of data is the &lt;a href="http://dclong.github.io/media/spt/leukemia.rda"&gt;leukemia&lt;/a&gt; used in the paper.&lt;/p&gt;
&lt;p&gt;Biologists genetically mutated/changed the genotypes of barley. 
They could not change everywhere, so they changed 378 positions on the chromosome of barley. 
In the map, "A" and "B" are two types (sort of open and close). 
Because they know where the mutations are, they called them "markers"
(so that if a barley with a certain genotype has a higher expression level, then you may infer and
say, oh that may be caused by the 145th marker, etc.). 
The map has 7 chromosomes of barley, 1H, 2H, ..., 7H. 
These numbers are locations of markers on the chromosomes, like coordinates. 
There are some missing values in the original map, a naive method was used to interpolate the missing
values and produced this dataset &lt;a href="http://dclong.github.io/media/spt/marker.rda"&gt;marker&lt;/a&gt;. &lt;/p&gt;</summary><category term="research"></category><category term="sequential permutation test"></category><category term="biostatistics"></category><category term="Acute Lymphocyctic Leukemia"></category><category term="package"></category><category term="marker"></category><category term="dclong.spt"></category><category term="R"></category><category term="barley"></category></entry><entry><title>How to Submit R Package to CRAN</title><link href="http://lisafly.github.io/blog/submit-r-package-cran/" rel="alternate"></link><updated>2012-06-17T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-17:blog/submit-r-package-cran/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
Submit using &lt;a href="http://xmpalantir.wu.ac.at/cransubmit/"&gt;web form&lt;/a&gt; or using ftp following the steps below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Upload the .tar.gz file using &lt;strong&gt;anonymous&lt;/strong&gt; as log-in name 
and your &lt;strong&gt;e-mail address&lt;/strong&gt; as password 
to &lt;a href="ftp://CRAN.R-project.org/incoming/"&gt;ftp://CRAN.R-project.org/incoming/&lt;/a&gt;. 
"ftp" is prefereed to "sftp". &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send a message to &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#67;&amp;#82;&amp;#65;&amp;#78;&amp;#64;&amp;#82;&amp;#45;&amp;#112;&amp;#114;&amp;#111;&amp;#106;&amp;#101;&amp;#99;&amp;#116;&amp;#46;&amp;#111;&amp;#114;&amp;#103;"&gt;&amp;#67;&amp;#82;&amp;#65;&amp;#78;&amp;#64;&amp;#82;&amp;#45;&amp;#112;&amp;#114;&amp;#111;&amp;#106;&amp;#101;&amp;#99;&amp;#116;&amp;#46;&amp;#111;&amp;#114;&amp;#103;&lt;/a&gt; about it. 
The email should contain the package name and version in the subject line. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="ftp"></category><category term="sftp"></category><category term="programming"></category></entry><entry><title>Copy SSH Public Key using "ssh-copy-id"</title><link href="http://lisafly.github.io/blog/ssh-copy-id/" rel="alternate"></link><updated>2012-06-13T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-13:blog/ssh-copy-id/</id><summary type="html">&lt;p&gt;If a Linux server runs &lt;code&gt;sshd&lt;/code&gt; on a non default port, 
you have to specify the port with option &lt;code&gt;-p port&lt;/code&gt;. 
In addition, 
the host machine and the port options must be in quotes 
(either single or double quotes), 
otherwise, 
you will get an error message.
Suppose sshd runs on port 323 on "host_machine", 
the following command copies the ssh public key to it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;id_rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;host_machine -p 323&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Linux"></category><category term="SSH"></category><category term="server"></category><category term="remote"></category><category term="port"></category></entry><entry><title>Parallel Computing in Java</title><link href="http://lisafly.github.io/blog/parallel-computing-java/" rel="alternate"></link><updated>2012-06-11T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-11:blog/parallel-computing-java/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/java/multithreading.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;The following are a few tips for multithreading parallel computing in Java.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Instance fields, static fields and elements of arrays are stored in heap
memory and thus can be shared between different threads. 
Local variables and parameter variables are never shared between threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If race condition happens (read and write to the same shared variable by 
different threads), 
you must protect the shared resource (object), which can be done through synchronized
method, locking/unlocking or atomic variables. 
When a thread excecute a synchronized method or block, 
it requires a mutex (mutual exclusion) of the object. 
This does not prevent all other threads from accessing the object 
but only these threads who also require mutex of the same object. 
If the object has public fileds and other unsynchronized methos,
other threads can still access these fileds or methods at the same time.
This means that nothing is acutally locked when you use synchronized method or locking/unlocking.
The locking/unlocking is a conceptual thing that happens via programmer discipline: 
basically if you make a method synchronized to prevent a read/write conflict on a variable, 
then you have to ensure that &lt;strong&gt;every&lt;/strong&gt; access to that variable is throught a synchronized method/block of the same object. 
That forces every threads to acquire mutex of the object and ensures mutual exclusion. 
The misunderstanding about locking/unlocking leads to buggy code which try to protect shared
object using synchronized method/block outside it. 
If a synchronized method/block is used to protect shared object, 
it must be inside the object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elements of arrays are independent variables and thus no synchronization 
is needed if different threads access elements with different indices. 
Similar rule applies to different instance variables of an object.
However, false sharing can happen if two threads access variables that are 
stored close in the memory (more accurate, in a same cache line). 
Though false sharing does not make your parallel code invalid, 
it downgrade the efficiency of the code. 
The following are some strategies to allievate false sharing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you let different threads to access different elements of an array, 
you can cut the array into non-interleaving parts 
(e.g., &lt;code&gt;0-(k-1)&lt;/code&gt; and &lt;code&gt;k-(n-1)&lt;/code&gt;) and let different threads work on different pieces. 
Or you can use thread-local copies of the array. 
This does not kill falsing sharing. 
The essential way to avoid falsing sharing is to avoid different threads accessing a same cache line. 
To avoid false sharing completely, you can separate parts of the array (to be 
accessed by diffrent threads) using dummy elements. 
A general rule is to make the sepration segment twice the size of cache line 
(which is usually 64 bytes).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use future object to return results from threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can align varialbes at the beginning of cache lines.&lt;br /&gt;
While this is supported in C/C++, it is not well supported in Java.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; method of threads and the &lt;code&gt;awaitTermination&lt;/code&gt; method of thread pool (if return true)
guarantees happen-before relationship between threads. In other words, if you
call the join method of a thread, then the changed made by the threads is
seenable by the code after the &lt;code&gt;join&lt;/code&gt; method. This is also true for the method 
&lt;code&gt;awaitTermination&lt;/code&gt; given that it returns &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If no barrie (join of threads, termination of thread pool) is set, the order of execuation of thread is underterminant. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have to call the &lt;code&gt;signal&lt;/code&gt; or the &lt;code&gt;signallAll&lt;/code&gt; method in some thread if you every called
the &lt;code&gt;await&lt;/code&gt; method in another thread. There is no need to call these two notifying methods
if you never called the &lt;code&gt;await&lt;/code&gt; method in a thread. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When doing multithreading parallel computing, there is no benefit to use
more thread than the number of available cores on the computer on which the
code is to be run. You can use the following code the get the number of available
cores on a computer.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;int coresNumber = Runtime.getRuntime().availableProcessors();&lt;/code&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using the future class, you can return results from threads. 
The advantage of using future class is that you do not have to
destroy threads or thread pool to retrieve result. 
The threads/thread pool created are/is resuable.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you create an object of Runnable or Callable and pass it to a thread or submit 
it to a thread pool, it is better to make deep copies of arguments passed to the 
constructor of the object. There are two reasons for this. First, shallow copy
makes the object shared and might result in race condition. Second, the object
might be destroied while the threads which require the object are still running. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following is a Java method which create a thread pool of fixed number of threads, 
add tasks into the pool, shutdown the pool and wait for all jobs to be finished.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;parSimulateIndependent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;outputFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxNumberOfThreads&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//initialize output, must do it here to avoid possible issues&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SPTOutput&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;numberOfSimulations&lt;/span&gt;&lt;span class="p"&gt;][];&lt;/span&gt;
    &lt;span class="c1"&gt;//thread pool&lt;/span&gt;
    &lt;span class="n"&gt;ExecutorService&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Executors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newFixedThreadPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxNumberOfThreads&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;simulationIndex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;simulationIndex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;numberOfSimulations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;simulationIndex&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;generateIndependentData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//writeData(simulationIndex);&lt;/span&gt;
        &lt;span class="n"&gt;generateRandomIndexOfCombinations&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SPTsRunnable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;randomIndexOfCombinations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sizeOfFirstGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sequentialTerminationCriteria&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;simulationIndex&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isTerminated&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
        &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;awaitTermination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECONDS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Some thread in the pool was interrupted.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below is another example which distribute jobs to threads manually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;runJobs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;threadsNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;threadsNumber&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;threadsNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;eachPlusOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;threadsNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;endIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;eachPlusOne&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SetElementRunnable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;threadsNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;endIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SetElementRunnable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;startIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threadsNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; was interrupted.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the run method of the SetElementRunnable class is given below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;100000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that different threads acess different elements of a shared array, 
so no synchronization is need. 
Another lock-free approach is to use atomic variables (operations to the variable is atomic). 
The following example sums integers in parallel using the AtomicInteger class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;TestSumRunnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;AtomicInteger&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AtomicInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;coresNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getRuntime&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;availableProcessors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;ExecutorService&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Executors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newFixedThreadPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coresNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SumRunnable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isTerminated&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;awaitTermination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECONDS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;499500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Wrong!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;step &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; done.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The run method of the SumRunnable class is as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAndAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addend&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above 3 examples, both thread pool and user-managed threads were used. 
Using thread pool is more convenient and is scalable for general purpose jobs. 
However, if you know that all jobs requires almost the same time to run, using
user-managed threads is more efficient because it creates much fewer objects.
This is often true in statistics simulations. &lt;/p&gt;</summary><category term="lock"></category><category term="programming"></category><category term="thread"></category><category term="race condition"></category><category term="Java"></category><category term="HPC"></category><category term="parallel"></category><category term="concurrency"></category><category term="mutex"></category></entry><entry><title>Useful Git Commands</title><link href="http://lisafly.github.io/blog/git-commands/" rel="alternate"></link><updated>2012-06-10T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-10:blog/git-commands/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add a Remote Repository&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dclong&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Track all Files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add all modifed tracked files for commit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove a file but keep it in the local repository&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show patches of a file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;stash&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;cherry&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pick&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show diff of stage file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rename branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show all branches&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete a branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tells git default branches to use when pushing&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List all tracked files in a git repository&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Git"></category><category term="repository"></category><category term="software"></category><category term="remote"></category></entry><entry><title>Operators in Different Programming Languages</title><link href="http://lisafly.github.io/blog/operators-popular-language/" rel="alternate"></link><updated>2012-06-10T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-10:blog/operators-popular-language/</id><summary type="html">&lt;table border="1" align="center"&gt;
    &lt;tr&gt;
        &lt;th&gt; &lt;/th&gt;
        &lt;th&gt;Bash&lt;/th&gt;
        &lt;th&gt;C/C++&lt;/th&gt;
        &lt;th&gt;D&lt;/th&gt;
        &lt;th&gt;Java&lt;/th&gt;
        &lt;th&gt;Julia&lt;/th&gt;
        &lt;th&gt;Mathematica&lt;/th&gt;
        &lt;th&gt;Matlab&lt;/th&gt;
        &lt;th&gt;Python&lt;/th&gt;
        &lt;th&gt;R&lt;/th&gt;
        &lt;th&gt;Ruby&lt;/th&gt;
        &lt;th&gt;VB/VB.net&lt;/th&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; and &lt;/td&gt;
        &lt;td&gt; -a &lt;/td&gt;
        &lt;td&gt; &amp;&amp; &lt;/td&gt;
        &lt;td&gt; &amp;&amp; &lt;/td&gt;
        &lt;td&gt; &amp;&amp; &lt;/td&gt;
        &lt;td&gt; &amp;&amp; &lt;/td&gt;
        &lt;td&gt; &amp;&amp; &lt;/td&gt;
        &lt;td&gt; &amp;&amp; &lt;/td&gt;
        &lt;td&gt; and &lt;/td&gt;
        &lt;td&gt; &amp;&amp; &lt;/td&gt;
        &lt;td&gt; &amp;&amp;, and &lt;/td&gt;
        &lt;td&gt; and &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; or &lt;/td&gt;
        &lt;td&gt; -o &lt;/td&gt;
        &lt;td&gt; || &lt;/td&gt;
        &lt;td&gt; || &lt;/td&gt;
        &lt;td&gt; || &lt;/td&gt;
        &lt;td&gt; || &lt;/td&gt;
        &lt;td&gt; || &lt;/td&gt;
        &lt;td&gt; || &lt;/td&gt;
        &lt;td&gt; or &lt;/td&gt;
        &lt;td&gt; || &lt;/td&gt;
        &lt;td&gt; ||, or &lt;/td&gt;
        &lt;td&gt; or &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; not &lt;/td&gt;
        &lt;td&gt; ! &lt;/td&gt;
        &lt;td&gt; ! &lt;/td&gt;
        &lt;td&gt; ! &lt;/td&gt;
        &lt;td&gt; ! &lt;/td&gt;
        &lt;td&gt; ! &lt;/td&gt;
        &lt;td&gt; ! &lt;/td&gt;
        &lt;td&gt; ! &lt;/td&gt;
        &lt;td&gt; not &lt;/td&gt;
        &lt;td&gt; ! &lt;/td&gt;
        &lt;td&gt; !, not  &lt;/td&gt;
        &lt;td&gt; not &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; bit and &lt;/td&gt;
        &lt;td&gt; &amp; &lt;/td&gt;
        &lt;td&gt; &amp; &lt;/td&gt;
        &lt;td&gt; &amp; &lt;/td&gt;
        &lt;td&gt; &amp; &lt;/td&gt;
        &lt;td&gt; &amp; &lt;/td&gt;
        &lt;td&gt; BitAnd &lt;/td&gt;
        &lt;td&gt; bitand &lt;/td&gt;
        &lt;td&gt; &amp; &lt;/td&gt;
        &lt;td&gt; bitops::bitAnd &lt;/td&gt;
        &lt;td&gt; &amp; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; bit or &lt;/td&gt;
        &lt;td&gt; | &lt;/td&gt;
        &lt;td&gt; | &lt;/td&gt;
        &lt;td&gt; | &lt;/td&gt;
        &lt;td&gt; | &lt;/td&gt;
        &lt;td&gt; | &lt;/td&gt;
        &lt;td&gt; BitOr &lt;/td&gt;
        &lt;td&gt; bitor &lt;/td&gt;
        &lt;td&gt; | &lt;/td&gt;
        &lt;td&gt; bitops:bitOr &lt;/td&gt;
        &lt;td&gt; | &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; bit not &lt;/td&gt;
        &lt;td&gt; ~ &lt;/td&gt;
        &lt;td&gt; ~ &lt;/td&gt;
        &lt;td&gt; ~ &lt;/td&gt;
        &lt;td&gt; ~ &lt;/td&gt;
        &lt;td&gt; ~ &lt;/td&gt;
        &lt;td&gt; BitNot &lt;/td&gt;
        &lt;td&gt; bitnot &lt;/td&gt;
        &lt;td&gt; ~ &lt;/td&gt;
        &lt;td&gt; bitops:bitNot &lt;/td&gt;
        &lt;td&gt; ~ &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; bit xor &lt;/td&gt;
        &lt;td&gt; ^ &lt;/td&gt;
        &lt;td&gt; ^ &lt;/td&gt;
        &lt;td&gt; ^ &lt;/td&gt;
        &lt;td&gt; ^ &lt;/td&gt;
        &lt;td&gt; ^ &lt;/td&gt;
        &lt;td&gt; BitXor &lt;/td&gt;
        &lt;td&gt; bitxor &lt;/td&gt;
        &lt;td&gt; ^ &lt;/td&gt;
        &lt;td&gt; bitops::bitxor &lt;/td&gt;
        &lt;td&gt; ^ &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; vector and &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &amp; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; vector or &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; | &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; vector not &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; ! &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; equals &lt;/td&gt;
        &lt;td&gt; -eq &lt;/td&gt;
        &lt;td&gt; == &lt;/td&gt;
        &lt;td&gt; == &lt;/td&gt;
        &lt;td&gt; == &lt;/td&gt;
        &lt;td&gt; == &lt;/td&gt;
        &lt;td&gt; == &lt;/td&gt;
        &lt;td&gt; == &lt;/td&gt;
        &lt;td&gt; == &lt;/td&gt;
        &lt;td&gt; == &lt;/td&gt;
        &lt;td&gt; == &lt;/td&gt;
        &lt;td&gt; = &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; not equal &lt;/td&gt;
        &lt;td&gt; -ne &lt;/td&gt;
        &lt;td&gt; != &lt;/td&gt;
        &lt;td&gt; != &lt;/td&gt;
        &lt;td&gt; != &lt;/td&gt;
        &lt;td&gt; != &lt;/td&gt;
        &lt;td&gt; != &lt;/td&gt;
        &lt;td&gt; ~= &lt;/td&gt;
        &lt;td&gt; != &lt;/td&gt;
        &lt;td&gt; != &lt;/td&gt;
        &lt;td&gt; != &lt;/td&gt;
        &lt;td&gt; not a=b &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; greater than &lt;/td&gt;
        &lt;td&gt; -gt &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
        &lt;td&gt; &gt; &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; less than &lt;/td&gt;
        &lt;td&gt; -lt &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
        &lt;td&gt; &lt; &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; greater than or equal to &lt;/td&gt;
        &lt;td&gt; -ge &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
        &lt;td&gt; &gt;= &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
        &lt;td&gt; less than or equal to &lt;/td&gt;
        &lt;td&gt; -le &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
        &lt;td&gt; &lt;= &lt;/td&gt;
    &lt;/tr&gt;   

    &lt;tr&gt;
        &lt;td&gt; next loop &lt;/td&gt;
        &lt;td&gt; continue &lt;/td&gt;
        &lt;td&gt; continue &lt;/td&gt;
        &lt;td&gt; continue &lt;/td&gt;
        &lt;td&gt; continue &lt;/td&gt;
        &lt;td&gt; continue &lt;/td&gt;
        &lt;td&gt; Continue[] &lt;/td&gt;
        &lt;td&gt; continue &lt;/td&gt;
        &lt;td&gt; continue &lt;/td&gt;
        &lt;td&gt; next &lt;/td&gt;
        &lt;td&gt; next &lt;/td&gt;
        &lt;td&gt; continue &lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt; 
        &lt;td&gt; stop loop &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
        &lt;td&gt; break &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt; print &lt;/td&gt;
        &lt;td&gt; echo &lt;/td&gt;
        &lt;td&gt; printf/std::cout &lt;/td&gt;
        &lt;td&gt; write, writeln &lt;/td&gt;
        &lt;td&gt; System.out.print, System.out.println &lt;/td&gt;
        &lt;td&gt; print, println &lt;/td&gt;
        &lt;td&gt; Print &lt;/td&gt;
        &lt;td&gt; disp &lt;/td&gt;
        &lt;td&gt;  &lt;/td&gt;
        &lt;td&gt; cat, print &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;


&lt;/table&gt;</summary><category term="Mathematica"></category><category term="Python"></category><category term="Julia"></category><category term="programming"></category><category term="C/C++"></category><category term="Java"></category><category term="D"></category><category term="operator"></category><category term="Bash"></category><category term="Ruby"></category><category term="R"></category><category term="VB/VB.net"></category><category term="MATLAB"></category></entry><entry><title>Tips for Using "roxygen2" to Write R packages</title><link href="http://lisafly.github.io/blog/tips-roxygen2/" rel="alternate"></link><updated>2012-06-10T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-10:blog/tips-roxygen2/</id><summary type="html">&lt;p&gt;The following are some roxygen2 tags that I use frequently for writing R packages.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Some R example code can take a long time to run. 
To prevent the example code from running when checking
the package, you can surround the example code with &lt;code&gt;\dontrun{}&lt;/code&gt;.
The following is such an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#&amp;#39; @examples&lt;/span&gt;
&lt;span class="c"&gt;#&amp;#39; \dontrun{&lt;/span&gt;
&lt;span class="c"&gt;#&amp;#39; rnorm(100000)&lt;/span&gt;
&lt;span class="c"&gt;#&amp;#39; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default roxygen2 does not export a function. To export a function
so that package users can use it, add tag &lt;code&gt;@export&lt;/code&gt; before the definition
of the function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the tag &lt;code&gt;@title&lt;/code&gt; to specify the title of a help document. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the tag &lt;code&gt;@description&lt;/code&gt; to start the description part of a 
help document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To import a package, use the tag &lt;code&gt;@import pkg_name&lt;/code&gt;. To import &lt;code&gt;fun1&lt;/code&gt; 
and &lt;code&gt;fun2&lt;/code&gt; from a package, use the tag &lt;code&gt;@importFrom pkg_name fun1 fun2&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default roxygen2 creates a Rd document for each exported function
with the same name as the function name. 
You can use the tag &lt;code&gt;@rdname&lt;/code&gt; to override the name of the Rd document.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="package"></category><category term="programming"></category><category term="tags"></category></entry><entry><title>Call Java in R using Package rJava</title><link href="http://lisafly.github.io/blog/call-java-in-r/" rel="alternate"></link><updated>2012-06-09T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-09:blog/call-java-in-r/</id><summary type="html">&lt;p&gt;The package "rJava" offers a convenient way to call Java code from R. 
The following are some tips for using the "rJava" package.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You must first start the Java Virtual Machine (using either 
&lt;code&gt;.jinit&lt;/code&gt; or &lt;code&gt;.jpackage&lt;/code&gt;) before you call Java code from R. 
You can specifiy a vector of paths for the function &lt;code&gt;.jinit&lt;/code&gt;. 
If the Java code relies on some other package or jar files, 
their path must also be added to the search path of the Java
Virtual Machine. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After creating an Java object, you can use &lt;code&gt;$&lt;/code&gt; to invoke its public methods
and access its public fields directly instead of using the function &lt;code&gt;.jcall&lt;/code&gt; or
&lt;code&gt;.jfield&lt;/code&gt;. This way preserves the flavor of object oriented programming, and is
much more convenient. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use boolean values, double values, strings directly when 
invoking Java methods in R. 
Because numerical numbers are double numbers be default in R, 
you should either add suffix "L" to a number or use function &lt;code&gt;as.integer&lt;/code&gt; to convert 
it to an integer if you want to pass it as an integer to a Java method. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can call a static method of class using the function &lt;code&gt;.jcall&lt;/code&gt;. 
Just replace the object argument with the name of the class whose 
static method you want to call. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To pass an vector to a Java method, you have to use the function 
&lt;code&gt;.jarray&lt;/code&gt; to convert the vector to a Java array. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="programming"></category><category term="Java"></category><category term="array"></category><category term="rJava"></category><category term="R"></category><category term="vector"></category></entry><entry><title>Easy Made Mistakes when Writing R code</title><link href="http://lisafly.github.io/blog/mistakes-r/" rel="alternate"></link><updated>2012-06-08T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-08:blog/mistakes-r/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/mistake.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Being flexible is a two-side sword to R. 
While it make it convenient and productive to use R,
it is also very easy to make mistakes when writing R code. 
The following is list of mistakes that happens all the time.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Miss passed arguments&lt;br /&gt;
This is often due the to "dots" argument (...). 
For example, I used to use VB a lot, so when I 
use the function &lt;code&gt;seq&lt;/code&gt;, I wrote code like this&lt;/p&gt;
&lt;p&gt;seq(1,10,step=2)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another example is &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You thought you write &lt;code&gt;data&lt;/code&gt; into the file &lt;code&gt;file_name&lt;/code&gt;,
however you just print &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;file_name&lt;/code&gt; to the
console. The annoying things about dots argument is that
it accept any kind of arguments. So whatever you pass to
a function accepting a dots argument, no warning or error 
about argument passing will be shown. The dots argument
opens the Pandor's box. &lt;!---'--&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Global variables&lt;br /&gt;
While you can assign values to global variables using &lt;code&gt;=&lt;/code&gt;,
&lt;code&gt;&amp;lt;-&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; inside a user-defined function, the change (of the global
variable) is only in effect in the duration of the function. 
When the function ends, the change is no longer in effect. 
In another words, the global variable remains unchanged 
outside the function. To make the change in effect outside the 
function, you must use &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; and &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; to assign values to the
global variable. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Priority of operators
The colon (:) operator precede over arithmatic operators 
such as +, -, *, / and so on. However, [] precede over the 
colon operator. When you write code &lt;code&gt;1:n-1&lt;/code&gt;, you thought
you get a vector from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt; while you actually get
a vector from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Miss used functions
The function &lt;code&gt;length&lt;/code&gt; is used for querying length of 
vectors not the length of characters. For the later purpose,
use the function &lt;code&gt;nchar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &amp;amp;&amp;amp; or || on vectors&lt;br /&gt;
For vector operation, you should use &amp;amp; and |.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use vectors or missing value as conditions&lt;br /&gt;
For if and while statement, the condition must be a non-missing
scaler (a vector of length 1).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;*apply&lt;/code&gt; functions to operate on rows of data frames.
A row of data frame is still a data frame (with 1 row). R is 
evil in the sence that it coerce data type wheneve necessary 
without noticing users. ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="vector"></category><category term="operator"></category><category term="mistake"></category><category term="programming"></category><category term="R"></category></entry><entry><title>Define Operator in R</title><link href="http://lisafly.github.io/blog/overload-operator-r/" rel="alternate"></link><updated>2012-06-08T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-08:blog/overload-operator-r/</id><summary type="html">&lt;p&gt;One thing I do not like R is that operations on String in R 
are not as convenient as in other programming langauges such as Java, Python and Ruby. 
In these 3 programming languages, 
you can simply use &lt;code&gt;+&lt;/code&gt; to concatenate strings while in R you have to use the function &lt;code&gt;paste&lt;/code&gt;.
The inconvenience result from unable to overload functions and operators in R. 
However, you can still define/override operators in R. 
For example,
the following code renew the definition of &lt;code&gt;+&lt;/code&gt; to concatenate two strings.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="R"></category><category term="operator"></category><category term="overloading"></category><category term="override"></category><category term="programming"></category></entry><entry><title>Software I use in Windows System</title><link href="http://lisafly.github.io/blog/softwares-windows/" rel="alternate"></link><updated>2012-06-08T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-08:blog/softwares-windows/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/windows/windows.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I switched from Windows System to Linux System half a year ago. 
The following is a summary of softwares I used in Windows system. 
I keep the list here in case I have to switch back to Windows sometime.
Surely a good way to avoid reintalling software is to portable applications. 
There is a post on my blog discussing this top.&lt;/p&gt;
&lt;h2&gt;Linux Tools&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Virtualbox/VMware&lt;/li&gt;
&lt;li&gt;coLinux&lt;/li&gt;
&lt;li&gt;andLinux&lt;/li&gt;
&lt;li&gt;Cygwin&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GnuWin32&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UnxUtils&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MinGW/MSYS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;console2&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Archive Tools&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;zip (come with with Windows)&lt;/li&gt;
&lt;li&gt;7zip &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Communication&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;QQ&lt;/li&gt;
&lt;li&gt;Skype (for communication with my family)  &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Network&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;IIS (for webhosting)&lt;/li&gt;
&lt;li&gt;Cisco VPN Client (for connecting to work network)  &lt;/li&gt;
&lt;li&gt;Chrome and Firefox (for surfing web)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;PDF&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Adobe Reader (for reading pdf documents)&lt;/li&gt;
&lt;li&gt;Latex and Texstudio (for word processing)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Scientific Computing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;R, Rtools and Rstudio (for statistical computing and graphics)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Anit-virus&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Microsoft Security Essentials&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Downloading Tools&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;QQ Xuanfeng&lt;/li&gt;
&lt;/ol&gt;</summary><category term="anti-virus"></category><category term="Windows"></category><category term="software"></category><category term="archive"></category><category term="Linux"></category><category term="virtualization"></category></entry><entry><title>Send Email in Ruby</title><link href="http://lisafly.github.io/blog/send-email-ruby/" rel="alternate"></link><updated>2012-06-07T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-07:blog/send-email-ruby/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;A few days ago, I started writing my first Ruby program which read my Verizon
family plan statements, calculate bills for each member and send emails to
notify them. The part of reading PDF document and calculating bill is easy. I
stuck at the sending email part. There are many Ruby libraries for sending
emails, but I want one that allows me to use my Gmail account. For security
reasons, I use a backup Gmail for sending emails. So I want a Ruby library which
allows me to set the "Reply-to" header, the "From" header and can send emails to
multiple recipients at a time. I tried a few options, such as "net/smtp",
"mikell/mail", "pony" and finally I was recommended the library "actionmailer".
Among all these libraries, "actionmailer" meets my requirement well and has good
documentation. The following the function I wrote to send email to members in my
family plan.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;email_bills&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;action_mailer&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_delivery_errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delivery_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;smtp&lt;/span&gt;
    &lt;span class="n"&gt;member_emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dclong@iastate.edu,lisa19850925@gmail.com,lynnyu2009@gmail.com,klins@iastate.edu&amp;quot;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;member_emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;duchuanlong&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;firedragon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;du&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_password&lt;/span&gt;
    &lt;span class="n"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smtp_settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;smtp.gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;authentication&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;user_name&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;firedragon.du@gmail.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;       &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;enable_starttls_auto&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;member_emails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;duchuanlong@gmail.com&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply_to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;duchuanlong@gmail.com&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deliver&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;read_password&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;highline&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;enter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;firedragon.du@gmail.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="smtp"></category><category term="programming"></category><category term="Verizon"></category><category term="PDF"></category><category term="Ruby"></category><category term="email"></category></entry><entry><title>Write R Code that Run Faster</title><link href="http://lisafly.github.io/blog/fast-computing-r/" rel="alternate"></link><updated>2012-06-05T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-05:blog/fast-computing-r/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/run-fast.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;R is a popular statistical software which is famous for enormous amout of
packages. The syntax of R is very flexible with make it convenient at the cost
of performance. R is indeed slow compared to many other scripting languages, but
there are a few tricks which can make your R code run faster.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use vector and matrix operation if possible. Theses &lt;code&gt;*apply&lt;/code&gt; functions
are very helpful for this purpose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid changing the type and size of object in R. Though we use R object
as if they are typeless, they have type actually. Changing the type and size
of a R object forces R to reallocate a memory space which is of course
ineffecient. I have seen so many people writing R code like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you know the length of &lt;code&gt;s&lt;/code&gt; ahead, it is better to allocate &lt;code&gt;s&lt;/code&gt; as a
vector/list and access its elements in the loop instead of changing its
size. R coerces between different types of object implicitly whenever necessary.
For example, if you have a data frame with columns of the same type, 
you can do many matrix operations on it because R coerces the data frame to 
a matrix when needed. This is very inefficient especially when you have a large 
data frame. A better way is first convert the data frame to a matrix,
and then operate on the matrix. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;foreach(i=1:n) %dopar% {}&lt;/code&gt; to do parallel computing if applicable
(you check my another post on parallel computing). Even if a &lt;code&gt;for&lt;/code&gt; loop is
not parallelizeable, &lt;code&gt;foreach(i=1:n) %do% {}&lt;/code&gt; is a better alternative. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use native code (e.g., Fortran, C/C++) for computationally intensive job if applicable. 
Though native code can increase the performance, there is overheading to invoke native code. 
It is less benefitial to invoke native code many times to do a smart part of job each time. 
You have to use command &lt;code&gt;R CMD SHLIB file_to_compile&lt;/code&gt; to compile native code, 
and use the function &lt;code&gt;dyn.load&lt;/code&gt; to load the shared library object. 
A more convenient way is to use R package "Rcpp" if you are confident about writing C++ code. 
However, you have to pay extra attention when you interact between R and other programming language. 
For example, passing arrays betwwen R and other languages can be tricky. 
For more information about this, refer to &lt;a href="http://dclong.github.io/en/2012/05/r-interface-other-languages/"&gt;this post&lt;/a&gt;.    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Split big data object (e.g., big data frame or matrix) to smaller ones,
and operate on these smaller objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid creating too many objects in the each working environment. Not having
enough memeory can not only make your code run slower but also make it fail
to run if have to allocate big vectors. One way to do this is to writing
small functions and run your functions instead of running everything
directly in a working environment. Small functions make sure that objects
can be garbage collected quickly when they are no longer needed. If you leave them in
the working environment, they will never release memory seized. Partition
big work into smaller functions also helps reducing bugs. Aftering creating
and remove big data objects, you can also call the function &lt;code&gt;gc&lt;/code&gt; manually to
collect garbage. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;double(n)&lt;/code&gt; to create a vector of length &lt;code&gt;n&lt;/code&gt; instead of using code
&lt;code&gt;rep(0,n)&lt;/code&gt;, and similar for others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use matrix instead of data frame wheneve possible. Actually data frame
cause problem in many cases. Only use data frame when necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to be continued ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="DLL"></category><category term="programming"></category><category term="HPC"></category><category term="parallel"></category><category term="R"></category><category term="memory"></category><category term="GC"></category></entry><entry><title>Good Ways to Do Scientific Computing</title><link href="http://lisafly.github.io/blog/good-ways-scientific-computing/" rel="alternate"></link><updated>2012-06-05T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-05:blog/good-ways-scientific-computing/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Save important intermediate results. It can happen that you did right from
step A to B, but messed up from step B to C. If you save the intermediate
results that step B to C needs, you can resume the work faster. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use good and consistent way to name objects if you use scripting language
(e.g., R). If your proeject is a big one and takes a long time to do, you had
better plan a continuable way for your work. You do not want to come back to
your project several days later and get confused about work you have done
before. When you name files storing results, a clear name is prefer though it is
long. Or at least you should organize in hierarchical directories. 
Another way to keep your work clear, is to organize object belong a a similar
work together. For example, if you have to do work A and B, both of which are
related to many datasets and objects. You can create two lists (or similar data
structure) and put all datasets and objects related to A into one list and datasets
and objects related to B into the other one. In this way, you keep the workspace
clean, which makes you productive. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writing help documents for functions you wrote and keep a "readme" file for you project. 
You can put work you did, 
work you have to do and ideas related to the project into the "readme" document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use seeds when you generating random numbers. This helps reproducing work you
did before. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test your simulation using a faily small dataset or complexity degree to estimate 
the time needed to run bigger simulations. 
If a simulation takes a very long time to run, it is a good idea to&lt;br /&gt;
continuingly update the progress of the simulation after, say, a fixed number of iterations. 
Printing time and summary of results based on currently progress is alwasy benefitial. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Research"></category></entry><entry><title>Online Tools for Popular Programming Languages</title><link href="http://lisafly.github.io/blog/online-tools-programming-language/" rel="alternate"></link><updated>2012-06-05T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-05:blog/online-tools-programming-language/</id><summary type="html">&lt;h2&gt;Answer Engine&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wolframalpha.com/"&gt;Wolfram Alpha&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Online Compilers and Interpreters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ideone.com/"&gt;IDEONE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Online Regular Editors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://rubular.com/"&gt;Rabular -- a Ruby regular expression editor&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="regexpal.com"&gt;regexpal -- a JavaScript regular expression tester&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.pythonregex.com/"&gt;Python Regular Expression Testing Tool&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.hongkiat.com/blog/regular-expression-tools-resources/"&gt;Regular Expression: Tools and Resources&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Data Base&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://json.parser.online.fr/"&gt;Json Parser Online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tex Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm"&gt;Tex Commands Available in MathJax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="JavaScript"></category><category term="Python"></category><category term="programming"></category><category term="regex"></category><category term="compiler"></category><category term="Ruby"></category></entry><entry><title>Parallel Computing in Different Programming Languages</title><link href="http://lisafly.github.io/blog/summary-parallel-computing/" rel="alternate"></link><updated>2012-06-05T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-05:blog/summary-parallel-computing/</id><summary type="html">&lt;p&gt;I am not an expert on parallel computing but a statistician who cares 
about scientific computing most of the time. 
There many different types of parallel computing,
however, the most practical one for average people to do scientific computing is
multithreading computing. This is because multicore computers are common
nowadays, but not everyone has access to high performance clusters. 
I will focus on multithreading scientific computing in this post.&lt;/p&gt;
&lt;p&gt;Usually commercial softwares have very good support for parallel computing, 
for example, Mathematica, Matlab and Revolution R all have solid support for
parallel computing. Mathematica and Matlab also have good support for GPU
computing. &lt;/p&gt;
&lt;p&gt;In Mathematica,  there are a bunch of functions starting with "Parallel" (e.g.,
&lt;code&gt;ParallelTable&lt;/code&gt;, &lt;code&gt;ParallelSubmit&lt;/code&gt;, etc) for the purpose of
parallel computing. If I remember correctly, one has to distribute a
user-defined function to kernels manually before you can use it for parallel
computing in Mathmatica 7 and earlier. In Mathematica 8, user-defined functions
are automatically distributed to kernels so that you can use your own function
for parallel computing directly, which is very convenient. Actually, Mathematica
is the most convenient one to do parallel computing among all programming
languages mentioned in this post, but at the cost of effciency of parallel
computing. Mathematica is famous for its intellegency but also nutorious (at
least I think so) for running slow. It is the most smart but also the slowest
programming languages among all programming languages that I have ever used (not
just these mentioned in this post). It is probably safe to say that Mathematica
is the slowest programming language. The more convenient a language is, the
slower it is generally speaking. It is hard to get both. A way to improve the
speed of Mathematica code is to compile the code to C code or some other code
that is more efficient to run. I will not go deeply into this since it is not
the main purpose of this post.&lt;/p&gt;
&lt;p&gt;There are several ways to do parallel computing in Matlab. 
The one I know (and is probably the easiest way) is to use &lt;code&gt;parfor&lt;/code&gt; instead of
&lt;code&gt;for&lt;/code&gt; in loops. If there is only 1 thread, &lt;code&gt;parfor&lt;/code&gt; works in serial. 
To better use &lt;code&gt;parfor&lt;/code&gt; for parallel computing, you have to learn some concept about
different kinds of variables, e.g., slicing variables, reduced variables, etc.
Understanding these concept helps you write better parallel code, and it help
debugging if your code does not work. 
To let &lt;code&gt;parfor&lt;/code&gt; use multiple threads, you must open the matlabpool manually. 
For example, to use the local host for parallel computing, 
you use the following command to initilize a pool with 8 workers 
(I assume the computer has 8 cores). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;matlabpool&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;parfor&lt;/code&gt; in Matlab works like a charm most of the time. Consider the fact that
Matlab code is very fast compared to other scripting languages, it is a good
choice for heavy numeric computing.&lt;br /&gt;
However, for some reason I am not sure about (probably bug in Matlab
interpreter), sometimes even very simple parallel code does not work. If this is
happens, it is usually not easy to get if fixed. What you try is to change
reduced variables to a slicing variable, and operate on the slicing variable
after parallel computing. Another annoying thing I met when doing parallel
computing in Matlab was that sometimes the exactly same code did not work on
another machine with the same version of Matlab. I was not sure what caused the
problem, but I found that it was related to functions end with "rnd" (random
number generating functions) I used in the code. There are some old version
functions starting with "rand" for generating random numbers, which are more
robust and always works well in parallel computing.&lt;/p&gt;
&lt;p&gt;R (not talking about Revolution R) has many packages for parallel computing.
Actually there are too many and thus make people confused about where to get
started. Fortunately, The company of Revolution R contributed some packages to
CRAN to make parallel computing in R unified. It is similar to &lt;code&gt;parfor&lt;/code&gt; in matlab. 
You use &lt;code&gt;foreach&lt;/code&gt; together with &lt;code&gt;%dopar%&lt;/code&gt; to do parallel computing. To do this,
you must first register a backend for it. 
The following simple example does parallel computing using package "doMC" as the backend 
of &lt;code&gt;foreach&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doMC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;registerDoMC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;dopar&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use package "snow" as the backend if you have access to a cluster.
In R, you don have to worry about different kind of variables. 
Variables outside the &lt;code&gt;foreach&lt;/code&gt; loop are shared among threads, 
and &lt;code&gt;foreach&lt;/code&gt; returns a list of results corresponding to each iteration. 
Surely access variables outside the &lt;code&gt;foreach&lt;/code&gt; loop
make the parallel compting less efficient. A better way is to let &lt;code&gt;foreach&lt;/code&gt;
return a list of results and then operate on the list. 
Sometimes, when you do parallel computing in R, the program does not speedup as
you expect. This is probably because some functions you used has already been
implemented in parallel. Notice that &lt;code&gt;foreach&lt;/code&gt; is not just for parallel
computing. Even if you do serial computing, you can still use &lt;code&gt;foreach&lt;/code&gt; with
&lt;code&gt;%dopar%&lt;/code&gt; replaced by &lt;code&gt;%do%&lt;/code&gt;. It is usually faster than the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;Both Java and C/C++ support multithreading directly. The concept of
multithreading computing in these two languages are similar. 
You have to create multiple threads, and let each of them run part of the job.
Java has a better support for multithreading in the sense that its standard
library supports thread pool. There is still no directly support of thread pool
in C++11. You have to non-standard libraries for this purpose. 
For scientific computing (e.g. statistical simulations), it is usually every
easy to partition the work by yourself and assign them to different threads so
that a thread pool is not essential.
For example, if you want to do a simulation of 1000 runs, you can create &lt;code&gt;k&lt;/code&gt;
threads, assign the first &lt;code&gt;1000/k&lt;/code&gt; runs to the first threads, assgin the second
&lt;code&gt;1000/k&lt;/code&gt; runs to the second threads, and so on and so forth.
To share data
between different threads, usually you have to lock and unlock shared resources. 
In Java, this
can be done through "ReentrantLock" class or synchronized methods.
In C/C++ this can be done through "mutex". 
Details about multithreading computing in these two languages is beyond
the scope of this post. For more information about multithreading in Java, you can
refer to the book "Big Java" which is really easy to follow, and "C++
Concurrency in Action" is a good book about multithreading for C++. &lt;/p&gt;
&lt;p&gt;Finally, I want to mention that not all computing job is suitable for parallel
computing. The more comminication threads has to make, 
the more dependent the jobs are, the less efficient the
parallel computing is. In statistical simulations, random numbers are usually
generated in serial (though there are parallel algorithm for random number
generating, the popular RNGs are usually serial). If a simulation is mostly
about generating random numbers, it is probably non-benefitial to do parallel
computing.&lt;/p&gt;</summary><category term="Mathematica"></category><category term="lock"></category><category term="programming"></category><category term="C/C++"></category><category term="thread"></category><category term="Java"></category><category term="HPC"></category><category term="parallel"></category><category term="R"></category><category term="concurrency"></category><category term="mutex"></category><category term="GPU Computing"></category></entry><entry><title>String in Different Programming Languages</title><link href="http://lisafly.github.io/blog/summary-string-popular-programming-language/" rel="alternate"></link><updated>2012-06-05T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-05:blog/summary-string-popular-programming-language/</id><summary type="html">&lt;p&gt;A string is essentially a sequence of characters. 
This is how string is implemented in different programming languages.
For this reason, you can operate string like an array in some programming languages.
This post is a shallow summary on strings in different programming languages.
For a deep discussion, please check other posts. &lt;/p&gt;
&lt;h2&gt;Representate&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: double quotes (single quotes for char type)&lt;/li&gt;
&lt;li&gt;Java: double quotes (single quotes for char type)&lt;/li&gt;
&lt;li&gt;Bash: single or double quotes (double quotes allows expansion of varialbes while single quotes not) &lt;/li&gt;
&lt;li&gt;Python: single or double quotes (exchangeable)&lt;/li&gt;
&lt;li&gt;Ruby: single or double quotes (single preserve escapes while double interpret them)&lt;/li&gt;
&lt;li&gt;R: single or double quotes (exchangeable)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Substring&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: use iterators and constructor of the std::string class&lt;/li&gt;
&lt;li&gt;Java: substring() as a method&lt;/li&gt;
&lt;li&gt;Bash: &lt;code&gt;${str:0:3}&lt;/code&gt; where &lt;code&gt;str&lt;/code&gt; is a string variable&lt;/li&gt;
&lt;li&gt;Python: used like an array &lt;code&gt;str[2:]&lt;/code&gt;, &lt;code&gt;str[:2]&lt;/code&gt;, &lt;code&gt;x[:-2]&lt;/code&gt;, ...&lt;/li&gt;
&lt;li&gt;Ruby: &lt;code&gt;slice()&lt;/code&gt; as a method or used like an array str[3..-1], str[2,3], ...&lt;/li&gt;
&lt;li&gt;R: &lt;code&gt;substr()&lt;/code&gt; as a function&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Concatenate&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: +&lt;/li&gt;
&lt;li&gt;Java: +&lt;/li&gt;
&lt;li&gt;Bash: &lt;code&gt;"${str1}other_str"&lt;/code&gt; where &lt;code&gt;str1&lt;/code&gt; is a string variable. If no white space, double quotes can be omitted&lt;/li&gt;
&lt;li&gt;Python: +&lt;/li&gt;
&lt;li&gt;Ruby: + &lt;/li&gt;
&lt;li&gt;R: paste() as a function&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Length&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C++: size() as a method&lt;/li&gt;
&lt;li&gt;Java: length() as a method&lt;/li&gt;
&lt;li&gt;Bash: &lt;code&gt;${#str_var}&lt;/code&gt; where &lt;code&gt;str_var&lt;/code&gt; is a string variable&lt;/li&gt;
&lt;li&gt;Python: len() as a function&lt;/li&gt;
&lt;li&gt;Ruby: length() as a method&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="programming"></category><category term="Java"></category><category term="string"></category><category term="bash"></category><category term="Ruby"></category><category term="R"></category></entry><entry><title>Automated Phone Bill Using Ruby Program</title><link href="http://lisafly.github.io/blog/automated-verizon-bill-using-ruby/" rel="alternate"></link><updated>2012-06-04T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-04:blog/automated-verizon-bill-using-ruby/</id><summary type="html">&lt;p&gt;I have decided to try different programming languages. 
I learn Python a month ago. 
I would like to say that Python is great scripting language. 
The only thing I do not like so far is inconsistent about methods and functions.
It is annoying to remember whether a call should be made by method or by function. 
I started learning Ruby a few weeks ago.
I have to say that the syntax of Rudy looks weird to me at first,
and I even doubted whether it is worth my effort to learn this language since I already 
know how to program in Python. 
But I have long heard about cool stuff such as Ruby on Rails, Cucumber and so on. 
So I finally convinced myself to continue on studying Ruby. 
As I mentioned in another post, the best way to learn a language is to use it.
I have been thinking about writing a program to parse the statement (in pdf) of 
my Verizon family plan, calculating bill for each member and send email to notify
the bill each of them has to pay automatically. 
I had a R script which can do the calculation part provided that I type some
information manually. 
I decided to make my job as the primary user of the family plan easier.
I am happy that I left this coding job to Ruby for practise. 
[My code][] is on bitbucket.
If the code does not run, 
you have to install a few ruby packages in order to use it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="n"&gt;actionmailer&lt;/span&gt; &lt;span class="n"&gt;highline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code only works for current Verizon family plan statement. 
I wish Verizon not to change the format of the family plan statement so that
this program can be used by people like me for a long time, otherwise I have to
make this program more robust to support statement in other format as well.&lt;/p&gt;</summary><category term="Python"></category><category term="programming"></category><category term="Verizon"></category><category term="Ruby"></category><category term="email"></category><category term="phone"></category></entry><entry><title>Read PDF in Ruby</title><link href="http://lisafly.github.io/blog/ruby-read-pdf/" rel="alternate"></link><updated>2012-06-03T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-03:blog/ruby-read-pdf/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/ruby/ruby.png" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;"pdf-reader" is a good Ruby libary for reading pdf document. 
You can install it via RubyGems using the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have to load the library before you use it. 
To load it, use the command below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more information, see the &lt;a href="https://github.com/yob/pdf-reader"&gt;project on GitHub&lt;/a&gt;.&lt;/p&gt;</summary><category term="require"></category><category term="library"></category><category term="programming"></category><category term="package"></category><category term="PDF"></category><category term="Ruby"></category></entry><entry><title>Texstudio, Bravo!</title><link href="http://lisafly.github.io/blog/texstudio-bravo/" rel="alternate"></link><updated>2012-06-02T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-06-02:blog/texstudio-bravo/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/bravo/bravo.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;I have heard about this Latex IDE for a long time. I
tried it today on a Debian virtual machine. It works like a charm. I like the preview
function a lot. Using inline preview, you can see compiled result while you are
typing. It works even with user-defined commands. 
This is very helpful for people who has to use massive math expression in
Latex, which make Texstudio comparable to the WYSIWYG Latex IDE "LyX". The
advatantage of Texstudio over Lyx is obvious. You write pure Latex code. You
do not have to remember many shortcuts and commands specific to LyX. Texstudio has
tons of other features such as auto-complete, highlighting, structure view, reversing
search and so on. It is also cross platform! Texstudio has the potential to be
the terminator of debate on Latex IDEs. &lt;/p&gt;</summary><category term="LyX"></category><category term="Latex"></category><category term="IDE"></category><category term="software"></category><category term="WYSIWYG"></category><category term="Texstudio"></category></entry><entry><title>Check Whether an Email Address is Valid in Java</title><link href="http://lisafly.github.io/blog/valid-email-address-java/" rel="alternate"></link><updated>2012-05-27T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-05-27:blog/valid-email-address-java/</id><summary type="html">&lt;p&gt;See the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test@test.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Pattern&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.+@.+&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;.[a-z]+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Matcher&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;matchFound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matchFound&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EMAIL OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EMAIL ERROR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pattern"></category><category term="match"></category><category term="Java"></category><category term="programming"></category></entry><entry><title>Missing Grub Menu of Windows Operating System</title><link href="http://lisafly.github.io/blog/missing-grub-windows/" rel="alternate"></link><updated>2012-05-26T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-05-26:blog/missing-grub-windows/</id><summary type="html">&lt;p&gt;I came across this problem after I installed both Debian and Windows 7 system on my laptop.
After searching online, I found a solution to this problem. 
1. Open /etc/default/grub as root user and make sure the following line is somewhere in the file and uncommented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;GRUB_DISABLE_OS_PROBER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Run command &lt;code&gt;update-grub2&lt;/code&gt; and then reboot your computer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This solution is not just for Windows and Linux dual boot. 
It is also for dual/multiple Linux operating systems boot. &lt;/p&gt;</summary><category term="Windows"></category><category term="Linux"></category><category term="OS"></category><category term="Debian"></category></entry><entry><title>Containers in Popular Programming Languages</title><link href="http://lisafly.github.io/blog/containers-summary-in-popular-languages/" rel="alternate"></link><updated>2012-05-22T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-05-22:blog/containers-summary-in-popular-languages/</id><summary type="html">&lt;p&gt;Here is a brief summary about containers in programming languages such as 
C/C++, D, Java, VB/VB.net, Matlab, Mathmatica, R, Julia, Python and Ruby. 
All of these programming languages defined support containers. 
Some of the languages distinguish different types of containers 
and have many different kind of containers while some of them 
have more general definition thus have fewer types of containers. 
For example, 
R distinguishs array and list while in some other programming
languages (e.g., Mathematica, Python and Ruby), 
array and list are the same thing. 
In C/C++, D and Java, 
array is one of the basic data structure, 
and a list can be based on either arrays or linked-list. 
This is a trade-off. 
If a language distingusish different types of containers, 
it is usually faster but at the cost of inconvenience, verse versa.
All of these programming I list here lanuages support different types of containers. 
Elements in a container must be of the same type, 
however, 
using a top level type can make containers support differnt runtime/actual types of elements. 
Some lanaguges (e.g., Mathmatica, Python and Ruby)
make this default with all their containers while some languages 
(e.g., R and Mathematica) distinguish between different types of containers. 
The most popular way for accessing elements in a container (mostly array) is to use "[]", 
e.g., 
C/C++, D, Java, R, Julia and Python all support this operator for accessing elements of containers; 
a less popular way for accessing elements in a container 
(array, list, dictionary and so on) 
is to use "{}", 
e.g., Mathematica, Python and ? (other languages ...?); 
another way for slicing containers is to use "()" 
e.g., Matlab, VB/VB.net and C++ via &lt;code&gt;operator()&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The concept of arrays is sort of similar in C/C++, D, Java, VB/VB.net, Matlab,
Julia and R. The type of elements of array in these languages must be of the same
type unless you declare an array with super type of types you want to use in
it. All of these languages support dynamic array except C in which you must
maintain one by yourself. Among them, R and Matlab use 1-based arrays while
others use 0-based arrays. An exception is that VB allows &lt;code&gt;k&lt;/code&gt;-based arrays
where &lt;code&gt;k&lt;/code&gt; is an arbitray integer. I am not sure whether VB.net allows this or
not.&lt;/p&gt;
&lt;p&gt;The concept of arrays is sort of similar in Mathematica, Python and Ruby.
Arrays in these languages are all dynamic, and elements do not have to be of
the same type (or more actually arrays in these languages have the super type
of all types). An element in an array can be an array. This concept of 2-d
array is similar to the concept of 2-d array in Java. 
Lists in R and cells and struct arrays in Matlab are sort of similar to arrays
in these languages. &lt;/p&gt;
&lt;p&gt;Notice that some languages support hash tables. In D it is called
association arrays; in python it is called dictionaries; in Ruby it is either
called hashes or arrays whose subscript is not necessarily ordered or numeric.
Noticed that a hash table cannot be sorted. If you do want to sort a hash
table, you have to use a differnt data structure (e.g., the sort method of a
hash table in Ruby changes the data structure to a 2-d array). &lt;/p&gt;
&lt;p&gt;The following is a brief summary about codes on containers in these languages. &lt;/p&gt;
&lt;h2&gt;C/C++&lt;/h2&gt;
&lt;p&gt;//create array &lt;/p&gt;</summary><category term="Mathematica"></category><category term="generic"></category><category term="C++"></category><category term="list"></category><category term="programming"></category><category term="Julia"></category><category term="Python"></category><category term="hash"></category><category term="D"></category><category term="array"></category><category term="Java"></category><category term="Ruby"></category><category term="R"></category><category term="vector"></category><category term="VB/VB.net"></category><category term="MATLAB"></category></entry><entry><title>Read CPU Temperature in Linux</title><link href="http://lisafly.github.io/blog/linux-read-cpu-temperature/" rel="alternate"></link><updated>2012-05-19T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-05-19:blog/linux-read-cpu-temperature/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/hot.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;First you have to install package "lm-sensors". &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wajig&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sensors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To detect the cpu temperature, type the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;modprobe&lt;/span&gt; &lt;span class="n"&gt;coretemp&lt;/span&gt;
&lt;span class="n"&gt;sensors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more instructions on this top, 
see &lt;a href="http://www.cyberciti.biz/faq/howto-linux-get-sensors-information/"&gt;nixCraft&lt;/a&gt;.&lt;/p&gt;</summary><category term="modprobe"></category><category term="sensors"></category><category term="CPU"></category><category term="Linux"></category><category term="temperature"></category></entry><entry><title>Differences betwwen Vector and ArrayList in Java</title><link href="http://lisafly.github.io/blog/vector-arraylist-difference-java/" rel="alternate"></link><updated>2012-05-18T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-05-18:blog/vector-arraylist-difference-java/</id><summary type="html">&lt;p&gt;A good summay is &lt;a href="http://javarevisited.blogspot.com/2011/09/difference-vector-vs-arraylist-in-java.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="synchronization"></category><category term="thread"></category><category term="Java"></category><category term="programming"></category></entry><entry><title>Abuse of Vector in R</title><link href="http://lisafly.github.io/blog/abuse-vector-r/" rel="alternate"></link><updated>2012-05-16T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-05-16:blog/abuse-vector-r/</id><summary type="html">&lt;p&gt;R is a language that is friendly to vector operation, 
so vector is an important data structure in R. 
A single data (of basic types, e.g., numeric or character) is essentially a
vector of length 1. A matrix or an array in R is essentially a vector. 
R make extensive use of vectors. A vector in R can either be a column vector or
a row vector depending on how you write the code. This is perhaps OK with most
people though it invites chances to make mistakes. One annoying thing about
vector is that When you extract a row or a column from a
matrix, you get a vector. 
I think this is one place that R abuse vectors. When you extract a sub matrix,
you want it to be a matrix as well most of the time. Even if you do want a
vector, most functions in R coerce a matrix to vector automatically, so return a
matrix instead of a vector doesn't hurt. Matlab goes to another
extreem on vectors. There is no separate data structre for vector in Matlab. 
A vector in Matlab is either a matrix with 1 row or a matrix with 1 column. &lt;/p&gt;
&lt;p&gt;R is famous for its simple and flexible syntax, however, it's too
flexible and as coinsequence that it's slow compared to many other programming 
languages, and it's easy to make tricky mistakes in R. &lt;/p&gt;</summary><category term="programming"></category><category term="matrix"></category><category term="data sturcture"></category><category term="data"></category><category term="vector"></category><category term="R"></category></entry><entry><title>Some Useful Properties of Modified Bessel Functions of the First Kind</title><link href="http://lisafly.github.io/blog/bessel-first-property/" rel="alternate"></link><updated>2012-05-16T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-05-16:blog/bessel-first-property/</id><summary type="html">&lt;p&gt;I have to deal with Modified Bessel functions of the first kind frequently in my research. 
Here I list some useful properties of them for future reference. 
    $$I_0'(x) = I_1(x)$$
    $$I_1'(x) = \frac{I_0(x)+I_2(x)}{2} $$
    $$\frac{I_1(x)}{I_0(x)}\uparrow \Leftrightarrow I_0(x)(I_0(x)+I_2(x))-2I_1^2(x)&amp;gt;0,\forall x&amp;gt;0$$
    $$\frac{I_1(x)-I_2(x)}{I_0(x)-I_1(x)}\uparrow$$
where $I_n(x)$ is the modified Bessel function of order $n$.&lt;/p&gt;
&lt;p&gt;For more properties about modified Bessel functions of the first kind, 
please refer to &lt;a href="http://mathworld.wolfram.com/ModifiedBesselFunctionoftheFirstKind.html"&gt;Wolfram MathWorld&lt;/a&gt;.&lt;/p&gt;</summary><category term="derivative"></category><category term="monotone"></category><category term="Research"></category><category term="Wolfram"></category><category term="positive"></category></entry><entry><title>Compare R with Other Languages on Data Manipulation</title><link href="http://lisafly.github.io/blog/pass-array-r-other-language/" rel="alternate"></link><updated>2012-05-16T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-05-16:blog/pass-array-r-other-language/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
Here I compare R with other languages such as C/C++, Java, Matlab, Python and so
on data manipulation. I list a few advantages and disadvantages of R on data
manipulation compared with other programming languages. &lt;/p&gt;
&lt;p&gt;Generally speaking, it is very convenient to manipulate data in R. Using function
&lt;code&gt;read.table&lt;/code&gt; (and other derived functions), you can read numerical and
character data into a data frame from a text file at the same time. Though other
programming languages can do this too, most of them are not as simple and convenient
as R. For example, you can read in a table in Matlab using function &lt;code&gt;dlmread&lt;/code&gt;,
but the data has to be of the same type. Function &lt;code&gt;xlsread&lt;/code&gt; in Matlab can read
numerical and character values at the same type, but as its name indicates, it
relies on the Microsoft Excel software. What is more, &lt;code&gt;xlsread&lt;/code&gt; read data into a
cell which does not have row names and column names attributes. The first row of
the data (usually stands for the headers) is read into the cell as the first row
of data. This is inconvenient. 
A matrix and data frame in R can have both column names and row names.
They make extracting and recording data very convenient in R.
Matlab is close to R in the sense that its matrix data structure is comparable
to the matrix data structure in R, and its structure array data structure is
comparable to the data frame data structure in R. However, you can only extract
rows from a structure array but not columns. The cell data structure in Matlab
is another data structure that is comparable to the data frame data structre in
R, however, as I mentioned before it doesn't have row names and column names
attributes. All these things make it a hessle to work on data with different
types at the same time in Matlab. &lt;/p&gt;
&lt;p&gt;Python has some libraries (e.g., pandas and pydataframe) that offer similar
object as data frame in R and similar functions as &lt;code&gt;read.table&lt;/code&gt; and
&lt;code&gt;write.table&lt;/code&gt; (and their derived functions) in R. One advatange of Python over R
is that it has better support of object oriented programming than R. Working on
vector alike object in python is more convenient than in R many times. For example, you can
easily insert an element into a list in Python with the &lt;code&gt;insert&lt;/code&gt; method while in
R you have to extract parts of a vector/list and then recombine them with the
elements you want to insert. &lt;/p&gt;
&lt;p&gt;Support of string in C awful. Java has a better support of string, however, I
don't know whether there are libraries offering convenient ways to read and write data like 
&lt;code&gt;read.table&lt;/code&gt; and &lt;code&gt;write.table&lt;/code&gt; in R. Honestly speaking, I doubt. What's more,
compiled langugaes are not as convenient as script languages to explore data.&lt;/p&gt;
&lt;p&gt;Given these things discussed above, Python and R
are good choices if you have to deal with both numerical and character data at the same time.&lt;/p&gt;</summary><category term="Python"></category><category term="C++"></category><category term="programming"></category><category term="statistics"></category><category term="Java"></category><category term="string"></category><category term="data frame"></category><category term="R"></category><category term="OOP"></category><category term="MATLAB"></category></entry><entry><title>Passing Arrays between R and Other Programming Languages</title><link href="http://lisafly.github.io/blog/r-interface-other-languages/" rel="alternate"></link><updated>2012-05-16T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-05-16:blog/r-interface-other-languages/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/r/r.png" height="200" width="240" align="right"/&gt;
A matrix or an array in R is essentially a vector with dimension attribute. 
For this reason, no matter you pass a vector, matrix or an array
to an external call, you essentially pass a 1 dimensional array to the call. 
As a coinsequence, 
it's usually not conveneint to pass 2 dimensional arrays between R and other programming languages. 
To pass arrays from R to an external call, 
always use 1 dimensional array.
If the 1-d array you pass to an external call stores data of a 2-d array, 
you have to pass extra arguments about the
dimension information to the external call.&lt;/p&gt;
&lt;p&gt;In C, an array name is an address. 
There's no way to figure out the length of the array from its address, 
so you have to pass information about the length of array to a C function if you want to call it from R. 
An array is an object in Java, and you can access its length attribute, so you don't have to pass
information about the length to a Java method if you want to call it in R.
Because of the way that R calls C functions, there's simple no way to return a
2-d array from a C function to R. However, since an 2-d array in Java is an
object, you can return it to R. Applying function &lt;code&gt;.jevalArray&lt;/code&gt; on the 2-d array
object, you get a vector of addresses. Applying function &lt;code&gt;.jevalArray&lt;/code&gt; on these
addresses again (most conveniently with the help of function &lt;code&gt;sapply&lt;/code&gt; or
&lt;code&gt;lapply&lt;/code&gt;), you get values of the 2-d array. For example, suppose &lt;code&gt;x&lt;/code&gt; is an 2-d
array object returned from a Java method to R, you can use the following code to
get its content.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jevalArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,.&lt;/span&gt;&lt;span class="n"&gt;jevalArray&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If a C function returns an array of unkown length, there is no directly way to
return it to R. There are two ways to solve this problem. First, if you know the
maximum length of the array to be returned, you can pass an array with this
length from R to C to accept the returned result. Second, you can write data
from C into a file and then read the data into R. &lt;/p&gt;
&lt;p&gt;From these aspect, interfacing with Java in R is more convenient than
interfacing with C in R. However, R offers APIs written in C for generating
random numbers and manipulating states of random number generators. Another
thing is that you probably have to debug and modify C code and Java code when
you call them in R. For C, you have to unload and reload dynamic libraries; for
Java, you have to restart the JVM. For some reason I'm not sure about (probably
because of other loaded libraries requiring rJava package), restarting the JVM
may not work. These are advantages and disadvantages of interfacing with C and
Java in R. You can choose the most convenient one for you work. &lt;/p&gt;</summary><category term="array"></category><category term="R"></category><category term="C/C++"></category><category term="programming"></category><category term="Java"></category></entry><entry><title>Install Softwares in Linux</title><link href="http://lisafly.github.io/blog/install-software-linux/" rel="alternate"></link><updated>2012-04-30T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-04-30:blog/install-software-linux/</id><summary type="html">&lt;p&gt;Sometime when you install softwares in Linux, 
you get an error message saying that you do not have permission while you used sudo or the root account. 
This probably means that you do not have full access to some installation files.
An easy way to solve this problem is to change file permissions of these installation files.
For example, 
suppose "inst" is the directory containing installation files, 
you can 
change file access use the following command and try installation again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="mi"&gt;755&lt;/span&gt; &lt;span class="n"&gt;inst&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Linux"></category><category term="softwares"></category><category term="permission"></category></entry><entry><title>Install R package "arrayQualityMetrics"</title><link href="http://lisafly.github.io/blog/arrayQualityMetrics/" rel="alternate"></link><updated>2012-04-22T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-04-22:blog/arrayQualityMetrics/</id><summary type="html">&lt;p&gt;I had to use the R package "arrayQualityMetrics" to check the quality of some gene chips. 
Installing this package in Linux takes a few steps. 
The following is the brief instruction on how to install R package "arayQualityMetrics" in Debian.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# install the graphics library cairo&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libcairo2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="cp"&gt;# install X toolkit intrinsiscs development files&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libxt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="cp"&gt;# install development files for the Gnome XML library&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libxml2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="cp"&gt;# if you have installed BiocInstaller &lt;/span&gt;
&lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BiocInstaller&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;biocLite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;arrayQualityMetrics&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;# if you haven&amp;#39;t installed R package BiocInstaller&lt;/span&gt;
&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://bioconductor.org/biocLite.R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;biocLite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;arrayQualityMetrics&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installing R package "arrayQualityMetrics" takes a while, so be patient. &lt;/p&gt;</summary><category term="research"></category><category term="programming"></category><category term="biostatistics"></category><category term="package"></category><category term="array"></category><category term="quality"></category><category term="R"></category></entry><entry><title>Easier Blogging Using Python Program</title><link href="http://lisafly.github.io/blog/first-python/" rel="alternate"></link><updated>2012-04-22T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2012-04-22:blog/first-python/</id><summary type="html">&lt;p&gt;I switched my blog from Wordpress to Github a few months ago. 
Github is a general purpose repository. 
The biggest advantage to reposit your blog on Github is that 
it allows you to work offline without the hassle to login to your online account. &lt;/p&gt;
&lt;p&gt;Jekyll Bootstrap use Ruby rake to help make posts and pages. 
For some reason I cannot use it on my laptop. 
I am a newbie to Linux. 
I have spent much time figuring out things in Linux, 
and I hessitate to dig into every problem I come accross. 
To automatically generate a post/page template sounds like a very simple job. 
A person with very basic programming skill can do this. 
Most programming languges (C/C++, Java, Matlab, Mathmatica, R) 
I know well focus on scientific computing, and among them R seems to be the one suitable for this job. 
However, I found that Python is extremely popular among Linux users. 
Many script in Linux are written by python. 
Plus the fact that I want to use Jython as a dynamic interpreter for Java, 
I decide to force myself to write code in Python, 
because this is best way that one can master a programming language. 
I wrote a Python modules &lt;a href="{{%20site.url%20}}/epost.py"&gt;"epost.py"&lt;/a&gt;. 
This module allows you to manipulate a post easily. 
If no post with the specified pattern exists, 
it prompt for creating a new post.
If a post with the specifed pattern exists, 
it ask for a bash command that operate the file.
You can use &lt;code&gt;%&lt;/code&gt; to stand for the path of the post 
and &lt;code&gt;#&lt;/code&gt; to denote the prefix (.../yyyy-mm-dd-) of the path of the post, 
which makes things convenient.
The module "epost.py" is directly runnable. 
For example to edit, rename, or create a post with paritial name "abcd",
you can type in the following in terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;epost&lt;/span&gt; &lt;span class="n"&gt;abcd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If no post with name containing "abcd" exists, it asks you whether to create a
new post with name "yyyy-mm-dd-abcd", where "yyyy-mm-dd" is the current date.
If a post with name containing "abcd" exists, it asks you for a bash command
operating the post. You can use &lt;code&gt;%&lt;/code&gt; to stand for the path of the post. For
example, if you want to edit the post using vim, you can type in &lt;code&gt;vim %&lt;/code&gt;.
You can also rename the post easily with "#" denoting the prefix of the path 
of the post. For example, to rename the post to "yyyy-mm-dd-ABCD.md", 
you can type in command &lt;code&gt;mv % #ABCD&lt;/code&gt; or &lt;code&gt;mv % #ABCD.md&lt;/code&gt;. 
The program takes care of the file extension, so you need not to worry about whether to include it or not.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The &amp;quot;_posts&amp;quot; directory does not exist. Please make sure your are in the right working directory.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="c"&gt;# get all posts&lt;/span&gt;
    &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;No posts to edit. Do you want to create a new post with the title?&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Y/y: yes&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;N/n: no&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;C/c: cancel&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;n&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;no&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Please type in the index (0-based) of a post to be edited or a control command.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;F/f: first&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;L/l: last&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;C/c: cancel&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;N/n: new&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;n&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;no&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;l&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;last&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_posts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/_posts/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0:04}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0:02}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0:02}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;A post with the same name already exists!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writelines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writelines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;layout: post&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;comments: true\n')
        f.writelines('title: ' + file + '\n')
        f.writelines('categories: \n')
        f.writelines('tags: \n')
        f.writelines('---\n')
        f.close()
        command(fileName)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; is selected.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Please type in a command to operate the post.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Use % to denote the path of the post.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Use # to denote the prefix (.../yyyy-mm-dd-) of the path of the post.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;regular&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;
        &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
    &lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programming"></category><category term="blog"></category><category term="Jekyll"></category><category term="Python"></category><category term="Ruby"></category></entry><entry><title>A Bug in Mathematica</title><link href="http://lisafly.github.io/blog/bug-in-mathematica/" rel="alternate"></link><updated>2011-12-08T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2011-12-08:blog/bug-in-mathematica/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/computer/bug.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Mathematica is a very intelligent and powerful math software. 
I use it in my study and research a lot. 
Mathematica's ability to take derivative and to calculate 
limit is obvious powerful–way much beyond many mathematician's ability. 
Mathematica's ability to calculate integral is also powerful. 
There are many integrals than I'm not able to solve while Mathmatica can. 
For a long time I totally trusted Mathematica. 
I thought that it is so intelligent an software that whenever 
it's able to give me a result it must right, 
until one day I asked Mathematica to do some integrals.&lt;br /&gt;
See whether you can find what's wrong with Mathematica.&lt;/p&gt;
&lt;p&gt;What I learn is not just this bug in Mathmatica. 
What I learned is that software has bugs, no matter how intelligent it is. 
Bugs happens when a software grow large. 
Never fully trust a software. You should always judge the result based on your own knowledge.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Integrate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Exp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Sin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;NIntegrate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Exp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Sin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="mf"&gt;0.635862&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Integrate&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Exp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Cos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Sin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;theta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;Pi&lt;/span&gt;&lt;span class="p"&gt;}]]&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Mathematica"></category><category term="programming"></category><category term="bug"></category></entry><entry><title>Tips for VB/VB.net</title><link href="http://lisafly.github.io/blog/tips-vb.net/" rel="alternate"></link><updated>2011-08-31T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2011-08-31:blog/tips-vb.net/</id><summary type="html">&lt;h2&gt;About String Functions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;String functions that return a string can be used with a dollar sign at the end, 
which is a faster version of the corresponding function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;trim&lt;/code&gt; gets rid of leading and trailing spaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;instr&lt;/code&gt; supports both case sensitive and case insensitive comparisons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;split&lt;/code&gt; can split a string into a string array.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tips"></category><category term="VB/VB.net"></category><category term="programming"></category><category term="string"></category></entry><entry><title>Tips For Excel</title><link href="http://lisafly.github.io/blog/tips-for-excel/" rel="alternate"></link><updated>2011-08-28T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2011-08-28:blog/tips-for-excel/</id><summary type="html">&lt;h2&gt;About Statistics Functions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Excel is not a reliable software for statistical analysis. 
It's not even capable for simple operations such as calculating 
mean and standard deviation when numbers are very big 
(at least before version 2007, not sure about later versions). 
If you do have to use Excel for statistical analysis, 
you'd better verify the results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bug in Excel 2007 (not sure about later versions) 
is that the degrees of freedoms of the Chisquare distribution can only be positive integers. 
If you pass a real number to related functions (density, cdf, etc), 
the degrees of freedom will first be coerced to an integer 
(I forget the exact behavior, but it's probably rounding down) and then do the calculation. 
No warning is shown in this process. Fotunately, 
the Gamma distribution behaves right in Excel. 
Be aware of the relationship between Chisquare distribution and Gamma distribution, you can circumambulate this bug. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It seems that the F distribution in Excel can only have integer
degrees of freedom. If not, the degrees of freedoms will changed to
integers first. I don't know how to circumvent this problem easily.
Sure we can write our own functions but it's not worth doing that.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="statistics"></category><category term="office"></category><category term="software"></category><category term="Excel"></category><category term="bug"></category></entry><entry><title>Combination and Permutation Related Functions in R</title><link href="http://lisafly.github.io/blog/combination-and-permutation-in-r/" rel="alternate"></link><updated>2010-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2010-11-20:blog/combination-and-permutation-in-r/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;expand.grid&lt;/code&gt; creates a data frame from all possible combinations of supplied vectors or factors. 
For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;Var1&lt;/span&gt; &lt;span class="n"&gt;Var2&lt;/span&gt; &lt;span class="n"&gt;Var3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;    &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;    &lt;span class="n"&gt;a&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="n"&gt;b&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;combn&lt;/code&gt; generates all combinations of $n$ elements taking $m$ at a time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="R"></category><category term="statisitcs"></category><category term="combination"></category><category term="permutation"></category><category term="programming"></category></entry><entry><title>General Tips for Latex</title><link href="http://lisafly.github.io/blog/general-tips-for-latex/" rel="alternate"></link><updated>2010-11-20T00:00:00-08:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2010-11-20:blog/general-tips-for-latex/</id><summary type="html">&lt;p&gt;&lt;a href="http://en.wikibooks.org/wiki/Latex"&gt;wikibooks&lt;/a&gt; has a comprehensive tutorial about latex. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.texample.net/"&gt;TeXample.net&lt;/a&gt; has lots of useful example resources for TeX users.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Latex does not recognize &lt;code&gt;~&lt;/code&gt; as one's home directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes these old temporary files generated by latex during compiling can lead latex to failure. 
So if you don't think there's anything wrong in your latex code 
(especially when the code works well before but it doesn't work now), 
you might want to delete all these temporary files and then compile latex again. 
If you're working on a big latex project and there're many subfolders which containing temporary file to be deleted, 
it's very annoying to deleted them manually. 
A good is to deleted them recursively using command prompt (in windows) or terminal (in linux).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you define you new commands in latex, 
you'd better put them after command &lt;code&gt;\begin{document}&lt;/code&gt;, 
especially when you import these commands from a existing file, otherwise, 
latex might fail to find these user-defined commands.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usually we don't have to put a string into a quotation mark in latex,
however, we have do this if the string contains space(s).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Command &lt;code&gt;\include{}&lt;/code&gt; cannot be nested, 
and the file being
imported cannot contain command &lt;code&gt;\setcounter&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You must use &lt;code&gt;\printanswers&lt;/code&gt; to show contents in solution
environment if you use the document class &lt;code&gt;exam&lt;/code&gt;. Note this offers a
neat way for controlling the solutions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use the &lt;code&gt;hyperref&lt;/code&gt;, then you'd better not use the option &lt;code&gt;dvipdfm&lt;/code&gt;.
Without the option &lt;code&gt;dvipdfm&lt;/code&gt;, both the commands &lt;code&gt;latex&lt;/code&gt; and  &lt;code&gt;pdflatex&lt;/code&gt;
work well; with the option &lt;code&gt;dvipdfm&lt;/code&gt;, only the &lt;code&gt;latex&lt;/code&gt; wroks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to compile different latex code according to different
    compiler used, you can use &lt;code&gt;ifpdf&lt;/code&gt;. In your latex code, you can use
    the following syntax to achieve the purpose&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;ifpdf&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;latex&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;pdflatex&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;latex&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;compiled&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;latex&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most Latex IDEs support user-defined templates,
so you can create your own Latex templates for different purposes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes you might want to use a picture or some data table in a PDF document,
but you do not have the source picture nor the source Latex code. What you
can do is to take a snap shot of the part on the PDF using Adobe Reader,
copy and paste the snap shot into Word, change the word file into PDF
using &lt;code&gt;Save as ...&lt;/code&gt; function in Word, and then include the PDF pages
into the your Latex source file. Some PDF viewer softwares (e.g., evince) might also allows you
to extract the picture directly. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you use environment &lt;code&gt;align&lt;/code&gt;, you do not have to use &lt;code&gt;&amp;amp;&lt;/code&gt; to align
equations manually though can do that. If you don't align equations
manually, they will be aligned automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tips"></category><category term="Latex"></category><category term="programming"></category></entry><entry><title>First 10-digit Prime in consecutive digits of e?</title><link href="http://lisafly.github.io/blog/first-prime/" rel="alternate"></link><updated>2010-05-23T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2010-05-23:blog/first-prime/</id><summary type="html">&lt;p&gt;One day my friend Ru He asked me an interview question of Google: 
what's the first 10-digit prime found in consecutive digits of e? 
I really doubt whether this is a Google interview question, 
because it seems so easy, 
especially with the help of Mathematica.
The following is the Mathematica code I wrote to solve this question. 
It actually solves the general problem of first n-digit prime in consecutive digits of e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PrimeInE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;prime&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Floor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PrimeQ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Floor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Please choose a bigger value for argument &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;n&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; in order to find the first &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-digit prime in e.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;PrimeInE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;7427466391&lt;/span&gt;

&lt;span class="n"&gt;PrimeInE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;182845904523536028747135266249&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Mathematica"></category><category term="Google"></category><category term="E"></category><category term="interview"></category><category term="math"></category><category term="fun problems"></category></entry><entry><title>How Long Does It Take to Observe a Sequence?</title><link href="http://lisafly.github.io/blog/how-long-observe-pattern/" rel="alternate"></link><updated>2010-05-22T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2010-05-22:blog/how-long-observe-pattern/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pattern/coin.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;There are many interesting while at the same time very tricky problems in
statistics. One famous question is that how many steps (expected) does
it take to observe a given sequence (e.g. THTH, TTHH), if we flip a
balanced coin?&lt;/p&gt;
&lt;p&gt;This problem can be solved using (delay) renewal theory or martingales.
These two methods are well explained in stochastic processes text books
(e.g. Stochastic Processes, S. M. Ross), so I will not explain them here. 
I implemented an algorithm base on martingales in Mathematica. 
It can deal with all this kind of problems, no matter how
long the pattern to be observed is and no matter which discrete distribution
is specified for the sample space. The following are some running results in
Mathematica.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;pat1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;pat2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some people might be shock by the above results, because they either think
that the result should be the same, or they think that the expected time for
patter "HTHT" to occur should be smaller. Notice that pattern "HTHT" has a
duplicated structure which is the reason make it harder to occur. To be clearer,
we know that a random sequence generated by flipping a coin n times won't have
a big chance to have either too many or too few runs. Duplicated structures
usually result in too many runs in sequence, e.g. "HTHT" has four runs which
is the biggest run we can have in a sequence of length 4, so it would take more
time on average for "HTHT" to come out.&lt;/p&gt;
&lt;p&gt;Here are &lt;a href="http://dclong.github.io/media/pattern/pattern-time-examples.pdf"&gt;more examples and results&lt;/a&gt; of the &lt;a href="http://dclong.github.io/media/pattern/pattern.cdf"&gt;code&lt;/a&gt;.
You need either Mathematica or CDF player to open the code.
For you convenience, the code is also presented below. 
Notice that the code also contains a function for calculating the probability for a 
pattern to come out before other patterns. 
For a more detail description about this interesting problem see my post 
&lt;a href="http://dclong.github.io/en/2010/05/best-strategy/"&gt;Which One Is the Best Strategy?&lt;/a&gt; and
&lt;a href="http://dclong.github.io/en/2012/07/best-strategy-2/"&gt;Which One Is the Best Strategy? (continued)&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;nprob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;All element of `1` are negative.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;ndist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The sum of `1` is greater than 1.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;sp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The sample space `1` has duplicated element(s).&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;nmatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The length of `1` does not match the length of `2`.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pattern_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;padj_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;algorithm&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;based&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;martingales&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;defining&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;defining&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;defining&lt;/span&gt; &lt;span class="nx"&gt;probabilites&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;padj&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;logical&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;whether&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;auto&lt;/span&gt; &lt;span class="nx"&gt;adjust&lt;/span&gt; &lt;span class="nx"&gt;argument&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;make&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;Module&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;npattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ResultProb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;nsample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DeleteDuplicates&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kt"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Table&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;nmatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="k"&gt;Min&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;nprob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;padj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;ndist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;
          &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;following&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;core&lt;/span&gt; &lt;span class="nx"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;npattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;npattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;AppendTo&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ResultProb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;Flatten&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Position&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]]]];&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;npattern&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;npattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;For&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;npattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ResultProb&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;Break&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;PatternAdditionalExpectedTime&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pat_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gpat_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;padj_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;calculate&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;pat&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;occur&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="nx"&gt;given&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;gpat&lt;/span&gt; &lt;span class="nx"&gt;already&lt;/span&gt; &lt;span class="nx"&gt;occurs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;essentially&lt;/span&gt; &lt;span class="nx"&gt;based&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Module&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ngpat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;nsample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DeleteDuplicates&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kt"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Table&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;nmatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="k"&gt;Min&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;nprob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;padj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;ndist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;
            &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;npat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pat&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ngpat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;gpat&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ngpat&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;For&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;Flatten&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Position&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pat&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nb"&gt;For&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;gpat&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;pat&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="nx"&gt;AppendTo&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="nx"&gt;Goto&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nx"&gt;AppendTo&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;Label&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;ngpat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;For&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;ngpat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;gpat&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;pat&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; 
                &lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Flatten&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Position&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pat&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]]],&lt;/span&gt;
                &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;Break&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;AppendTo&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Total&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;padj&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;ngpat&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;patnum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Argument `1` requires 2 or more elements.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;patterns_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;padj_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; 
&lt;span class="nx"&gt;Module&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;patterns&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="nb"&gt;contains&lt;/span&gt; &lt;span class="nx"&gt;patterns&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;compared&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;dist&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="nx"&gt;specifies&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;discrete&lt;/span&gt; &lt;span class="nx"&gt;distribution&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;npat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;patterns&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;npat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternFirstComeOutProbability&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;patnum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;patterns&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;nsample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Length&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;DeleteDuplicates&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kt"&gt;Null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Table&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Length&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;nsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;nmatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="k"&gt;Min&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;nprob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;padj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;If&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Total&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;ndist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;probs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;
            &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;For&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;If&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Continue&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PatternAdditionalExpectedTime&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;patterns&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;patterns&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;padj&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Join&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Table&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;PrependTo&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;AppendTo&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;For&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;npat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;AppendTo&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="nx"&gt;PatternExpectedTime&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;patterns&lt;/span&gt;&lt;span class="err"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;samspace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;probs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;padj&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;AppendTo&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;LinearSolve&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Mathematica"></category><category term="pattern"></category><category term="Markov chain"></category><category term="statistics"></category><category term="sequence"></category><category term="coin"></category><category term="stochastic"></category><category term="martingale"></category><category term="fun problems"></category></entry><entry><title>Sun Bin PK Pang Juan</title><link href="http://lisafly.github.io/blog/sun-bin-pang-juan/" rel="alternate"></link><updated>2010-05-15T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2010-05-15:blog/sun-bin-pang-juan/</id><summary type="html">&lt;p&gt;&lt;img src="http://dclong.github.io/media/pk/pk.jpg" height="200" width="240" align="right"/&gt;&lt;/p&gt;
&lt;p&gt;Dating back to the time when I was a sophomore, 
I read a very interesting problem from "Waming", 
which is a magazine of math department of USTC (University of Science and Technology of China).&lt;/p&gt;
&lt;p&gt;One day Guigu Zi (a famous ancient Chinese sophist, 
the teacher of Sun Bin and Pang Juan) came up with two numbers between 1 and 100, 
and told the product of the two numbers to Sun Bin, the sum to Pang Juan. 
The next day when Pang Juan ran into Sun Bin, he boasted, 
"Now I don't know what the 2 numbers are, 
but I'm pretty sure you don't know either." 
"I have to thank you for the information, 
because I did have no idea of what the 2 numbers are, but now I already know." 
responded Sun Bin. 
Pang Juan thought for a while, smiled and then said, 
"Now the same here." Question: what are the two numbers?&lt;/p&gt;
&lt;p&gt;If you think are a very smart people and very good at logic, you can spend some time think about this problem. 
My code (written in Mathmatica) for solving this problem is given below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;(*function filter possible combinations based on Pang Juan&amp;#39;s first words.*)&lt;/span&gt;
&lt;span class="nc"&gt;PangJuan1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;comb_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kn"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
    &lt;span class="nc"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]];&lt;/span&gt;
        &lt;span class="nc"&gt;If&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;EvenQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nc"&gt;PrimeQ&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nc"&gt;Floor&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;}]]&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="c"&gt;(*function filter possible combinations based on Sun Bin&amp;#39;s words.*)&lt;/span&gt;
&lt;span class="nc"&gt;SunBin&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;comb_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; 
    &lt;span class="kn"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;DivisorCombinations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FlagLower&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FlagUpper&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
    &lt;span class="nc"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
        &lt;span class="n"&gt;prod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]*&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]];&lt;/span&gt;
        &lt;span class="n"&gt;divisors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Divisors&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="c"&gt;(*Build up all possible combinations*)&lt;/span&gt;
        &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="nc"&gt;FlagLower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Floor&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="c"&gt;(*The smallest subscript of the bigger divisors*)&lt;/span&gt;
        &lt;span class="nc"&gt;DivisorCombinations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
        &lt;span class="c"&gt;(*Find the upper subscript of the bigger divisors*)&lt;/span&gt;
        &lt;span class="nc"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;FlagUpper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FlagLower&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
            &lt;span class="nc"&gt;FlagUpper&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="nc"&gt;FlagUpper&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FlagUpper&lt;/span&gt;&lt;span class="o"&gt;++];&lt;/span&gt;
            &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="nc"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FlagUpper&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nc"&gt;FlagLower&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;--,&lt;/span&gt;
                &lt;span class="nc"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;
      &lt;span class="nc"&gt;DivisorCombinations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;]],&lt;/span&gt; 
       &lt;span class="n"&gt;divisors&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;]]}]&lt;/span&gt;
     &lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="c"&gt;(*There should be only one possible combination according the \&lt;/span&gt;
&lt;span class="c"&gt;imformation that Pang Juan provided in his first sentence*)&lt;/span&gt;
    &lt;span class="nc"&gt;If&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;DivisorCombinations&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="nc"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;}],&lt;/span&gt;
     &lt;span class="nc"&gt;If&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;PangJuan1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;DivisorCombinations&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nc"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
      &lt;span class="o"&gt;]&lt;/span&gt;
     &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="c"&gt;(*function filter possible combinations based on Pang Juan&amp;#39;s second words.*)&lt;/span&gt;
&lt;span class="nc"&gt;PangJuan2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;comb_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; 
  &lt;span class="kn"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;AddendCombinations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
   &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
   &lt;span class="nc"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]];&lt;/span&gt;
    &lt;span class="c"&gt;(*Build up all the possible combinations*)&lt;/span&gt;

    &lt;span class="nc"&gt;AddendCombinations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nc"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
     &lt;span class="nc"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;AddendCombinations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
     &lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="nc"&gt;If&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Length&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;SunBin&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;AddendCombinations&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="nc"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
     &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="c"&gt;(*construct all combinations and use the above three functions to \&lt;/span&gt;
&lt;span class="c"&gt;filter the right one*)&lt;/span&gt;
&lt;span class="nc"&gt;GuiGuzi&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kn"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
   &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
   &lt;span class="nc"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
    &lt;span class="nc"&gt;For&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
      &lt;span class="nc"&gt;AppendTo&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;}];&lt;/span&gt;
      &lt;span class="o"&gt;];&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="c"&gt;(*Use the information that Pang Juan provide in his first sentence \&lt;/span&gt;
&lt;span class="c"&gt;to delete those impossible combinations*)&lt;/span&gt;

   &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PangJuan1&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="c"&gt;(*Use the information that Sun Bin provide to delete those \&lt;/span&gt;
&lt;span class="c"&gt;impossible combinations*)&lt;/span&gt;
   &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SunBin&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="c"&gt;(*Use the information that Pang Juan provide in his second sentenc \&lt;/span&gt;
&lt;span class="c"&gt;to delete those impossible combinations*)&lt;/span&gt;

   &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PangJuan2&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
   &lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="c"&gt;(*run the porgram*)&lt;/span&gt;
&lt;span class="nc"&gt;GuiGuzi&lt;/span&gt;&lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="puzzle"></category><category term="Mathematica"></category><category term="fun problems"></category><category term="math"></category><category term="number"></category></entry><entry><title>Format Data In SAS</title><link href="http://lisafly.github.io/blog/format-data-in-sas/" rel="alternate"></link><updated>2009-11-01T00:00:00-07:00</updated><author><name>Chuanlong (Ben) Du</name></author><id>tag:lisafly.github.io,2009-11-01:blog/format-data-in-sas/</id><summary type="html">&lt;h2&gt;Data Formatting&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To add labels to a variable, 
You can use the statement &lt;code&gt;label&lt;/code&gt; to add labels to a variable in SAS.
And it doesn't matter whether you use the quotation marks for the label string or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;label&lt;/code&gt; statement in SAS is somehow similar to the &lt;code&gt;format&lt;/code&gt; procedure. 
The difference is that &lt;code&gt;label&lt;/code&gt; explains the name of variables while 
&lt;code&gt;format&lt;/code&gt; explains the value of variables. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="SAS"></category><category term="format"></category><category term="programming"></category><category term="label"></category></entry></feed>